{"title":"ET框架学习_ETBook阅览","uid":"6724ada40863aa20046f27eaed957b7c","slug":"ET框架学习-ETBook阅览","date":"2022-06-28T05:35:40.000Z","updated":"2022-06-28T08:35:08.698Z","comments":true,"path":"api/articles/ET框架学习-ETBook阅览.json","keywords":null,"cover":"/img/background/cover.jpg","content":"<p>加了ET群很久，一直只是看群里的人聊天谈地，clone了ET框架很长时间，也没有怎么看过，所以这次想先从ETBook开始看起，认识一下这个框架。</p>\n<p><strong>ETBook地址:<a href=\"http://etgame.cn/pages/a2f161/\">http://etgame.cn/pages/a2f161/</a></strong></p>\n<p>在这次的ETBook阅读的同时，我也会同步看烟雨迷离半世殇的ETBook笔记汇总，加深理解。</p>\n<p>烟雨迷离半世殇的ETBook笔记汇总：<a href=\"https://www.lfzxb.top/etbook/\">https://www.lfzxb.top/etbook/</a></p>\n<p>目前的git上的master分支已经更到了7.0，该版本似乎还在持续更新中，不知道有多大的时效性。</p>\n<p>略过前面的介绍，直接从第二章:CSharp的协程开始。</p>\n<hr>\n<h1 id=\"2-CSharp的协程\"><a href=\"#2-CSharp的协程\" class=\"headerlink\" title=\"2.CSharp的协程\"></a>2.CSharp的协程</h1><h2 id=\"2-1-CSharp的协程\"><a href=\"#2-1-CSharp的协程\" class=\"headerlink\" title=\"2.1 CSharp的协程\"></a>2.1 CSharp的协程</h2><p>作者在开篇使用一段while循环+线程挂起的程序。并以此做延伸来引出异步的实现。</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> loopCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">&#123;</span>\n           <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> temp <span class=\"token operator\">=</span> watcherValue<span class=\"token punctuation\">;</span>\n           \n           Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           \n           <span class=\"token operator\">++</span>loopCount<span class=\"token punctuation\">;</span>\n           <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loopCount <span class=\"token operator\">%</span> <span class=\"token number\">10000</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n           <span class=\"token punctuation\">&#123;</span>\n               Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"loop count: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token expression language-csharp\">loopCount</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">&#125;</span>\n       <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>为了做出延时5秒后输出loopCount的效果，且不打断10000次计数打印一次的逻辑，这里导入ET框架中的一个自定义单例<strong>OneThreadSynchronizationContext</strong>，因为代码过长就不全贴出来了，只是简短介绍一下成员和方法。</p>\n<details>\n<summary>OneThreadSynchronizationContext</summary>\n\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//SynchronizationContext 提供了1个Post虚函数。</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadSynchronizationContext</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">SynchronizationContext</span></span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// Instance单例访问器</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ThreadSynchronizationContext</span> Instance<span class=\"token punctuation\">;</span>       \n\n    <span class=\"token comment\">// 存储了线程的ID,在构造函数里初始化</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> threadId <span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// 线程同步队列,发送接收socket回调都放到该队列,由poll线程统一执行</span>\n    <span class=\"token comment\">// 一个线程安全的只读队列,存储Action。</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">ConcurrentQueue<span class=\"token punctuation\">&lt;</span>Action<span class=\"token punctuation\">></span></span> queue<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//用于存储从队列里提取的Action委托</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Action</span> a<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//一个轮询用的函数,</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \n\n             <span class=\"token comment\">//此处提取queue里的委托,若无则return;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">TryDequeue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">out</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n               \n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> \n            <span class=\"token comment\">//执行Action委托 </span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">//覆写SynchronizationContext的虚函数Post</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Post</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SendOrPostCallback</span> callback<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">object</span></span> state<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>   <span class=\"token comment\">//用了一个匿名函数</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">Post</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> \n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Post</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Action</span> action<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//首先会判断当前Thread线程的ID是否与此单例的线程ID相同</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>xxx<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//若相同,则执行参数action</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> \n\n    <span class=\"token comment\">//否则将action委托入队queue</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">//用于将参数action入队</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">PostNext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Action</span> action<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</details>","text":"加了ET群很久，一直只是看群里的人聊天谈地，clone了ET框架很长时间，也没有怎么看过，所以这次想先从ETBook开始看起，认识一下这个框架。 ETBook地址:http://etgame.cn/pages/a2f161/ 在这次的ETBook阅读的同时，我也会同步看烟雨迷离半...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"通用","slug":"通用","count":1,"path":"api/categories/通用.json"}],"tags":[{"name":"ET框架","slug":"ET框架","count":1,"path":"api/tags/ET框架.json"},{"name":"探索发现","slug":"探索发现","count":2,"path":"api/tags/探索发现.json"},{"name":"C#","slug":"C","count":3,"path":"api/tags/C.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-CSharp%E7%9A%84%E5%8D%8F%E7%A8%8B\"><span class=\"toc-text\">2.CSharp的协程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-1-CSharp%E7%9A%84%E5%8D%8F%E7%A8%8B\"><span class=\"toc-text\">2.1 CSharp的协程</span></a></li></ol></li></ol>","author":{"name":"HalfReunion","slug":"blog-author","avatar":"/img/icon/avatar.jpg","link":"/","description":"如无必要，勿增实体","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"UI的DrawCall计算","uid":"1350894a588790266d2094e5ec7bddd0","slug":"UI的DrawCall计算","date":"2022-06-28T08:25:28.000Z","updated":"2022-06-28T08:35:14.975Z","comments":true,"path":"api/articles/UI的DrawCall计算.json","keywords":null,"cover":"/img/background/cover.jpg","text":"总结提取自uwa4d的文章：https://edu.uwa4d.com/course-intro/0/126 影响DrawCall的元素有三点：Depth值，Material，Texture。 Depth值： 1，需要按照Hierarchy面板的节点顺序，从上到下进行Depth分...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"Unity","slug":"Unity","count":3,"path":"api/categories/Unity.json"}],"tags":[{"name":"UI","slug":"UI","count":1,"path":"api/tags/UI.json"},{"name":"优化","slug":"优化","count":1,"path":"api/tags/优化.json"}],"author":{"name":"HalfReunion","slug":"blog-author","avatar":"/img/icon/avatar.jpg","link":"/","description":"如无必要，勿增实体","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"制作一个跑酷系统","uid":"0b6ba2c8e01bb1370597130d76cb280b","slug":"制作一个跑酷系统","date":"2022-06-26T11:44:10.000Z","updated":"2022-06-28T05:18:09.801Z","comments":true,"path":"api/articles/制作一个跑酷系统.json","keywords":null,"cover":"/img/background/cover.jpg","text":"1，人物控制和相机控制1：控制相机与角色的偏移transform.position = new Vector3(x,x,x)+ followTarget.position; 2：让相机以角色为中心点，以一个圆为周期转动。 transform.position = Quaterni...","link":"","photos":[],"count_time":{"symbolsCount":"8.4k","symbolsTime":"8 mins."},"categories":[{"name":"Unity","slug":"Unity","count":3,"path":"api/categories/Unity.json"}],"tags":[{"name":"C#","slug":"C","count":3,"path":"api/tags/C.json"},{"name":"制作实例","slug":"制作实例","count":1,"path":"api/tags/制作实例.json"},{"name":"动画系统","slug":"动画系统","count":1,"path":"api/tags/动画系统.json"}],"author":{"name":"HalfReunion","slug":"blog-author","avatar":"/img/icon/avatar.jpg","link":"/","description":"如无必要，勿增实体","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}
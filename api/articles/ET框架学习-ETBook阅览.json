{"title":"ET框架学习_ETBook阅览(慢慢更)","uid":"ce2b5aade03ea809a40872ba12728878","slug":"ET框架学习-ETBook阅览","date":"2022-06-30T04:24:40.000Z","updated":"2022-06-30T08:51:00.155Z","comments":true,"path":"api/articles/ET框架学习-ETBook阅览.json","keywords":null,"cover":"/img/background/cover.jpg","content":"<p>加了ET群很久，一直只是看群里的人聊天谈地，clone了ET框架很长时间，也没有怎么看过，所以这次想先从ETBook开始看起，认识一下这个框架。</p>\n<p><strong>ETBook地址:<a href=\"http://etgame.cn/pages/a2f161/\">http://etgame.cn/pages/a2f161/</a></strong></p>\n<p>在这次的ETBook阅读的同时，我也会同步看烟雨迷离半世殇的ETBook笔记汇总，加深理解。</p>\n<p>烟雨迷离半世殇的ETBook笔记汇总：<a href=\"https://www.lfzxb.top/etbook/\">https://www.lfzxb.top/etbook/</a></p>\n<p>目前的git上的master分支已经更到了7.0，该版本似乎还在持续更新中，不知道有多大的时效性。</p>\n<p>略过前面的介绍，直接从第二章:CSharp的协程开始。</p>\n<hr>\n<h1 id=\"2-CSharp的协程\"><a href=\"#2-CSharp的协程\" class=\"headerlink\" title=\"2.CSharp的协程\"></a>2.CSharp的协程</h1><h2 id=\"2-1-CSharp的协程\"><a href=\"#2-1-CSharp的协程\" class=\"headerlink\" title=\"2.1 CSharp的协程\"></a>2.1 CSharp的协程</h2><p>作者在开篇使用一段while循环+线程挂起的程序。并以此做延伸来引出异步的实现。</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> loopCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">&#123;</span>\n           <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> temp <span class=\"token operator\">=</span> watcherValue<span class=\"token punctuation\">;</span>\n           \n           Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           \n           <span class=\"token operator\">++</span>loopCount<span class=\"token punctuation\">;</span>\n           <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loopCount <span class=\"token operator\">%</span> <span class=\"token number\">10000</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n           <span class=\"token punctuation\">&#123;</span>\n               Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"loop count: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token expression language-csharp\">loopCount</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">&#125;</span>\n       <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>为了做出延时5秒后输出loopCount的效果，且不打断10000次计数打印一次的逻辑，这里导入ET框架中的一个自定义单例<strong>OneThreadSynchronizationContext</strong>，这个类主要处理别的线程扔回主线程的委托。简短介绍一下该类的成员和方法。</p>\n<details>\n<summary>OneThreadSynchronizationContext</summary>\n\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//SynchronizationContext 提供了1个Post虚函数。</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadSynchronizationContext</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">SynchronizationContext</span></span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// Instance单例访问器</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ThreadSynchronizationContext</span> Instance<span class=\"token punctuation\">;</span>       \n\n    <span class=\"token comment\">// 用于存储主线程的线程ID,在构造函数里初始化</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> threadId <span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// 线程同步队列,发送接收socket回调都放到该队列,由poll线程统一执行</span>\n    <span class=\"token comment\">// 一个线程安全的只读队列,存储Action。</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">ConcurrentQueue<span class=\"token punctuation\">&lt;</span>Action<span class=\"token punctuation\">></span></span> queue<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//用于存储从队列里提取的Action委托</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Action</span> a<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//一个轮询用的函数,</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \n\n             <span class=\"token comment\">//此处提取queue里的委托,若无则return;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">TryDequeue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">out</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n               \n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> \n            <span class=\"token comment\">//执行Action委托 </span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">//覆写SynchronizationContext的虚函数Post</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Post</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SendOrPostCallback</span> callback<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">object</span></span> state<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>   <span class=\"token comment\">//用了一个匿名函数</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">Post</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> \n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Post</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Action</span> action<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//首先会判断当前Thread线程的ID是否与此单例的线程ID相同</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>xxx<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//若相同,说明目前在主线程,则执行参数action</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> \n\n    <span class=\"token comment\">//否则将其他线程来的action委托入队queue</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">//用于将参数action入队</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">PostNext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Action</span> action<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</details>\n\n<p>而后作者设计出了一个异步方法，这个方法核心在于：另开一个线程，并将逻辑包裹成委托传入，使用Thread.Sleep做阻塞n秒的操作，待阻塞完毕后将委托扔回主线程执行，这样就能在不阻塞主线程的情况下作一个计时操作，也避免了一些线程冲突操作，且免去加锁的麻烦。</p>\n<hr>\n<h2 id=\"2-2-更好的协程\"><a href=\"#2-2-更好的协程\" class=\"headerlink\" title=\"2.2 更好的协程\"></a>2.2 更好的协程</h2><p>使用上面的方法如果有增加的需求会不方便。这时候可以用C#自带的异步语法。<br>此处使用了C#设计的几个逻辑</p>\n<ol>\n<li>Task</li>\n<li>async&#x2F;await</li>\n<li>TaskCompletionSource</li>\n</ol>\n<p>1.Task可以理解为，为了一个异步操作而封装了多种功能的集合单位，本质还是使用了Thread，MSDN直接解释为一个异步操作。而Thread更倾向于是一个最基本的线程单元。</p>\n<p>2.async&#x2F;await是一对组合使用的关键字，async用于修饰方法，用于提醒该方法里有异步操作，而await用于修饰async方法里的逻辑，await是阻塞的，若无返回则不会执行下面的操作。</p>\n<p>3.TaskCompletionSource，是一种创建Task的方式。集合了控制Task的方法。</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">WaitTimeAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> waitTime<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Action</span> action<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">WaitTime</span><span class=\"token punctuation\">(</span>waitTime<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    thread<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//此处把action回调略去,改为使用TaskCompletionSource</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">WaitTimeAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> waitTime<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">TaskCompletionSource<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">></span></span> tcs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">TaskCompletionSource<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">WaitTime</span><span class=\"token punctuation\">(</span>waitTime<span class=\"token punctuation\">,</span> tcs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    thread<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> tcs<span class=\"token punctuation\">.</span>Task<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>改变了之前需要回调方法里嵌套回调来实现的连续异步操作。</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Crontine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">WaitTimeAsync</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"当前线程: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token expression language-csharp\">Thread<span class=\"token punctuation\">.</span>CurrentThread<span class=\"token punctuation\">.</span>ManagedThreadId</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">, WaitTimeAsync finsih loopCount的值是: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token expression language-csharp\">loopCount</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">WaitTimeAsync</span><span class=\"token punctuation\">(</span><span class=\"token number\">4000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"当前线程: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token expression language-csharp\">Thread<span class=\"token punctuation\">.</span>CurrentThread<span class=\"token punctuation\">.</span>ManagedThreadId</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">, WaitTimeAsync finsih loopCount的值是: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token expression language-csharp\">loopCount</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//旧的形式</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">WaitTimeAsync</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">,</span> WaitTimeFinishCallback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">WaitTimeFinishCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"WaitTimeAsync finsih loopCount的值是: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token expression language-csharp\">loopCount</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">WaitTimeAsync</span><span class=\"token punctuation\">(</span><span class=\"token number\">4000</span><span class=\"token punctuation\">,</span> WaitTimeFinishCallback2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>此时作者在主线程调用了这个静态函数：<br>SynchronizationContext.SetSynchronizationContext(OneThreadSynchronizationContext.Instance); 用于同步上下文，替换了将逻辑扔回主线程执行的操作，</p>\n<p><em><strong>在WaitTime中直接调用tcs.SetResult(true)就行了，回调会自动扔到同步上下文中，而同步上下文我们可以在主线程中取出回调执行，这样自动能够完成回到主线程的操作</strong></em></p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"> <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">WaitTime</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> waitTime<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TaskCompletionSource<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">></span></span> tcs<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>waitTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    tcs<span class=\"token punctuation\">.</span><span class=\"token function\">SetResult</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<hr>\n<h2 id=\"2-3-单线程异步\"><a href=\"#2-3-单线程异步\" class=\"headerlink\" title=\"2.3 单线程异步\"></a>2.3 单线程异步</h2><p>异步实现不仅仅只有多线程的方式，一般游戏逻辑会设计一个单线程的计时器。<br>代码比较简单,直接贴出来了。</p>\n<details>\n<summary>单线程异步</summary>\n\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> loopCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\"><span class=\"token keyword\">long</span></span> time<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Action</span> action<span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"主线程: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token expression language-csharp\">Thread<span class=\"token punctuation\">.</span>CurrentThread<span class=\"token punctuation\">.</span>ManagedThreadId</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token function\">Crontine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            \n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token function\">CheckTimerOut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                \n                <span class=\"token operator\">++</span>loopCount<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loopCount <span class=\"token operator\">%</span> <span class=\"token number\">10000</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">&#123;</span>\n                    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"loop count: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token expression language-csharp\">loopCount</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        \n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Crontine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            \n            <span class=\"token function\">WaitTimeAsync</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">,</span> WaitTimeAsyncCallback1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">//每次执行完都会刷新一次time和委托</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">WaitTimeAsyncCallback1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"当前线程: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token expression language-csharp\">Thread<span class=\"token punctuation\">.</span>CurrentThread<span class=\"token punctuation\">.</span>ManagedThreadId</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">, WaitTimeAsync finsih loopCount的值是: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token expression language-csharp\">loopCount</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            \n            <span class=\"token comment\">//刷新新的time和委托</span>\n            <span class=\"token function\">WaitTimeAsync</span><span class=\"token punctuation\">(</span><span class=\"token number\">4000</span><span class=\"token punctuation\">,</span> WaitTimeAsyncCallback2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        \n        \n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">CheckTimerOut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>time <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token comment\">// 检测时间到了没有,若到了则执行。</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">long</span></span> nowTicks <span class=\"token operator\">=</span> DateTime<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">.</span>Ticks <span class=\"token operator\">/</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>time <span class=\"token operator\">></span> nowTicks<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            time <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            action<span class=\"token punctuation\">.</span><span class=\"token function\">Invoke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        \n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">WaitTimeAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> waitTime<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Action</span> a<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n             \n            time <span class=\"token operator\">=</span> DateTime<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">.</span>Ticks <span class=\"token operator\">/</span> <span class=\"token number\">10000</span> <span class=\"token operator\">+</span> waitTime<span class=\"token punctuation\">;</span>\n            action <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</details>\n\n<p>把上面的样子改成await形式</p>\n<details>\n<summary>await异步</summary>\n\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> loopCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\"><span class=\"token keyword\">long</span></span> time<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">TaskCompletionSource<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">></span></span> tcs<span class=\"token punctuation\">;</span>\n        \n    <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"主线程: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token expression language-csharp\">Thread<span class=\"token punctuation\">.</span>CurrentThread<span class=\"token punctuation\">.</span>ManagedThreadId</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">Crontine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            \n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token function\">CheckTimerOut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                \n            <span class=\"token operator\">++</span>loopCount<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loopCount <span class=\"token operator\">%</span> <span class=\"token number\">10000</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"loop count: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token expression language-csharp\">loopCount</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n        \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Crontine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">await</span> <span class=\"token function\">WaitTimeAsync</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"当前线程: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token expression language-csharp\">Thread<span class=\"token punctuation\">.</span>CurrentThread<span class=\"token punctuation\">.</span>ManagedThreadId</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">, WaitTimeAsync finsih loopCount的值是: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token expression language-csharp\">loopCount</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">await</span> <span class=\"token function\">WaitTimeAsync</span><span class=\"token punctuation\">(</span><span class=\"token number\">4000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"当前线程: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token expression language-csharp\">Thread<span class=\"token punctuation\">.</span>CurrentThread<span class=\"token punctuation\">.</span>ManagedThreadId</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">, WaitTimeAsync finsih loopCount的值是: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token expression language-csharp\">loopCount</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">CheckTimerOut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>time <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">long</span></span> nowTicks <span class=\"token operator\">=</span> DateTime<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">.</span>Ticks <span class=\"token operator\">/</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>time <span class=\"token operator\">></span> nowTicks<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        time <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        tcs<span class=\"token punctuation\">.</span><span class=\"token function\">SetResult</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n        \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">WaitTimeAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> waitTime<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">TaskCompletionSource<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">></span></span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">TaskCompletionSource<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        time <span class=\"token operator\">=</span> DateTime<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">.</span>Ticks <span class=\"token operator\">/</span> <span class=\"token number\">10000</span> <span class=\"token operator\">+</span> waitTime<span class=\"token punctuation\">;</span>\n        tcs <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">.</span>Task<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</details>\n\n<p>代码简单，要注意的点是await不会开启多线程，这上面的调用都是在主线程中完成，有没使用多线程取决于具体实现，task在没有await的情况下是非阻塞的。我本身对这个不太熟悉，要去补补对应知识。</p>\n<h2 id=\"3-2-强大的MongoBson库\"><a href=\"#3-2-强大的MongoBson库\" class=\"headerlink\" title=\"3.2 强大的MongoBson库\"></a>3.2 强大的MongoBson库</h2><p>需要使用序列化的场景:</p>\n<ol>\n<li>对象通过序列化反序列化clone</li>\n<li>服务端数据库存储数据，二进制</li>\n<li>分布式服务端，多进程间的消息，二进制</li>\n<li>后端日志，文本格式</li>\n<li>服务端的各种配置文件，文本格式</li>\n</ol>\n<p>列举常用序列化库</p>\n<ol>\n<li>protobuf不支持复杂的对象结构(无法使用继承)，做消息合适，做数据库存储和日志格式并不好用。</li>\n<li>json做日志格式合适，但是做网络消息和数据存储就太大。</li>\n</ol>\n<details>\n<summary>适用场景</summary>\n\n<ol>\n<li>你想想某天你的配置文件需要放到数据库中保存，你不需要进行格式转换，后端直接把前端发过来的配置消息保存到数据库中，这是不是能减少非常多错误呢？</li>\n<li>某天有些服务端的配置文件不用文件格式了，需要放在数据库中，同样，只需要几行代码就可以完成迁移。</li>\n<li>某天后端服务器crash，你需要扫描日志进行数据恢复，把日志进行反序列化成C#对象，一条条进行处理，再转成对象保存到数据库就完成了。</li>\n<li>对象保存在数据库，直接就可以看到文本内容，可以做各种类sql的操作</li>\n<li>想像一个场景，一个配置文本对象，反序列化到内存，通过网络消息发送，存储到数据库中。整个过程一气呵成。、</li>\n<li></details></li>\n</ol>\n<p>这里作者选用了Mongo Bson，可以减少各种数据转换，减少代码，提高可维护性。MongoDB库既可以序列化成文本也可以序列化成BSON的二进制格式。</p>\n<details>\n<summary>Mongo Bson支持功能</summary>\n\n<ol>\n<li>支持复杂的继承结构</li>\n<li>支持忽略某些字段序列化</li>\n<li>支持字段默认值</li>\n<li>结构多出多余的字段照样可以反序列化，这对多版本协议非常有用</li>\n<li>支持ISupportInitialize接口使用，这个在反序列化的时候简直就是神器</li>\n<li>支持文本json和二进制bson序列化</li>\n<li>MongoDB数据库支持</li>\n</ol>\n</details>\n\n<p>后面是列举MongoBson的一些使用例子，推荐直接去官网看。</p>\n<h2 id=\"3-3-一切皆组件\"><a href=\"#3-3-一切皆组件\" class=\"headerlink\" title=\"3.3 一切皆组件\"></a>3.3 一切皆组件</h2><p>本篇主要介绍ECS设计，OW(守望先锋)率先使用ECS这种设计并取得巨大成功。它采用了状态帧这种网络技术：即客户端服务器端拥有一套相同逻辑，客户端进行预测行为，先进行客户端表现，而后和服务器端的预测行为做对照，不匹配的话就进行回滚。（<strong>预测</strong>这个词我这里还是有点不太理解，后面还需要去查查。）使用组件式开发的话，则只需要回滚对应组件即可。</p>\n<p>ECS的重点在于逻辑与数据完全分离，EC是纯数据，System是逻辑，由数据驱动逻辑。而数据驱动逻辑的意思即：通过Update（tick）检测数据变化，通过事件机制来订阅数据变化。</p>\n<p>作者认为传统的ECS书写逻辑的方式有让组件过于稀碎化的缺点，导致组件非常多且开发人员只熟悉自己的模块，造成大量冗余。Entity和Component通常只有一层，组件一多可能不知道要使用哪些Component。合理的做法是以树状的方式管理组件，<strong>Entity可以管理Component，Component管理Entity，甚至Component还可以挂载Component。例如：人由头，身体，手，脚组成，而头又由眼睛，耳朵，鼻子，嘴巴组成。</strong></p>\n<p>在ET框架里，所有数据都是Component，包括Entity，Entity继承于ComponentWithId，ComponentWithId继承于Component，所以Entity本质上也是一个Component，只不过它可以挂载其它的Component。</p>\n<p>实际使用中可以继承Component，ComponentWithId，Entity三者之一，</p>\n<ol>\n<li>如果该类需要挂载组件则继承Entity。</li>\n<li>如果不需要挂载组件，但是需要带个逻辑ID则继承ComponentWithId。</li>\n<li>其他情况继承Component。</li>\n</ol>\n<p>ET的Entity可以有数据成员，通用的数据放在Entity上作为成员，不通用的作为组件挂载在Entity上，比如物品的设计，所有物品都有配置id，数量，等级的字段，这些字段没有必要做成组件，放在Entity身上使用会更加方便。</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\">\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Item</span><span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Entity</span></span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 道具的配置Id</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> ConfigId <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 道具的数量</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> Count <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 道具的等级</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> Level <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>ET的树状数据结构:<br>顶层Game.Scene，不同模块的数据都挂载在Game.Scene上，每个模块下可以挂载很多数据。<br>比如做一个道具系统，设计一个ItemsComponent挂载在Player上即可，需要技能开发一个SkillComponent挂载在Player上。全服需要做一个活动，则开发一个活动组件挂载到Game.Scene上，这种设计会十分简洁且模块化。</p>\n<h3 id=\"组件的细节\"><a href=\"#组件的细节\" class=\"headerlink\" title=\"组件的细节\"></a>组件的细节</h3><h4 id=\"1-组件的创建\"><a href=\"#1-组件的创建\" class=\"headerlink\" title=\"1.组件的创建\"></a>1.组件的创建</h4><p>组件的创建统一由ComponentFactory创建，该工厂类提供了Create,CreateWithParent,CreateWithId三个方式。<br>其中Create是最简单的创建方式，它做了几个处理。</p>\n<ol>\n<li>根据组件类型构建一个组件。</li>\n<li>将组件加入事件系统，并且抛出一个AwakeSystem。</li>\n<li>是否启用对象池。</li>\n</ol>\n<p>CreateWithParent<br>在Create基础上提供了一个Parent对象，设置到Component.Parent字段上。</p>\n<p>CreateWithId<br>是用来创建ComponentWithId或者其子类的，在Create的基础上可以自己设置一个Id, Component在创建的时候可以选择是否使用对象池。</p>\n<p>三类工厂方法都带有一个fromPool的参数，默认是true。</p>\n<h4 id=\"2-组件的释放\"><a href=\"#2-组件的释放\" class=\"headerlink\" title=\"2.组件的释放\"></a>2.组件的释放</h4><p>Component有非托管资源，所以需要继承一个IDisposable接口，用于显示释放资源。使用该接口主要做如下操作</p>\n<ol>\n<li>抛出Destory System。</li>\n<li>如果组件是对象池创建的，那么在这里会放回对象池。</li>\n<li>从全局事件系统(EventSystem)中删除该组件，并且将InstanceId设为0。<br>如果组件挂载Entity身上，那么Entity调用Dispose的时候会自动调用身上所有Component的Dispose方法。</li>\n</ol>\n<h4 id=\"3-InstanceId的作用\"><a href=\"#3-InstanceId的作用\" class=\"headerlink\" title=\"3.InstanceId的作用\"></a>3.InstanceId的作用</h4>","text":"加了ET群很久，一直只是看群里的人聊天谈地，clone了ET框架很长时间，也没有怎么看过，所以这次想先从ETBook开始看起，认识一下这个框架。 ETBook地址:http://etgame.cn/pages/a2f161/ 在这次的ETBook阅读的同时，我也会同步看烟雨迷离半...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"通用","slug":"通用","count":1,"path":"api/categories/通用.json"}],"tags":[{"name":"ET框架","slug":"ET框架","count":1,"path":"api/tags/ET框架.json"},{"name":"探索发现","slug":"探索发现","count":2,"path":"api/tags/探索发现.json"},{"name":"C#","slug":"C","count":5,"path":"api/tags/C.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-CSharp%E7%9A%84%E5%8D%8F%E7%A8%8B\"><span class=\"toc-text\">2.CSharp的协程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-1-CSharp%E7%9A%84%E5%8D%8F%E7%A8%8B\"><span class=\"toc-text\">2.1 CSharp的协程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-2-%E6%9B%B4%E5%A5%BD%E7%9A%84%E5%8D%8F%E7%A8%8B\"><span class=\"toc-text\">2.2 更好的协程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-3-%E5%8D%95%E7%BA%BF%E7%A8%8B%E5%BC%82%E6%AD%A5\"><span class=\"toc-text\">2.3 单线程异步</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-2-%E5%BC%BA%E5%A4%A7%E7%9A%84MongoBson%E5%BA%93\"><span class=\"toc-text\">3.2 强大的MongoBson库</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-3-%E4%B8%80%E5%88%87%E7%9A%86%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">3.3 一切皆组件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%84%E4%BB%B6%E7%9A%84%E7%BB%86%E8%8A%82\"><span class=\"toc-text\">组件的细节</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E7%BB%84%E4%BB%B6%E7%9A%84%E5%88%9B%E5%BB%BA\"><span class=\"toc-text\">1.组件的创建</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E7%BB%84%E4%BB%B6%E7%9A%84%E9%87%8A%E6%94%BE\"><span class=\"toc-text\">2.组件的释放</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-InstanceId%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">3.InstanceId的作用</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"HalfReunion","slug":"blog-author","avatar":"/img/icon/avatar.jpg","link":"/","description":"如无必要，勿增实体","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"玩游戏-仁王2","uid":"d128f62f62d268410a7ff9276841ac04","slug":"玩游戏-仁王2","date":"2022-07-04T11:26:58.000Z","updated":"2022-07-04T12:15:58.804Z","comments":true,"path":"api/articles/玩游戏-仁王2.json","keywords":null,"cover":"/img/background/cover.jpg","text":"之前一段时间(半年前)在玩仁王2，实在是很有意思的游戏。有可玩性高的动作系统，换一把武器就能有截然不同体验的感觉和怪猎非常相似，然后还拥有一些刷刷刷，装备build的RPG要素。 游戏里角色操作三段架势还有数种适配架势的技能，结合精力管控系统，再进行一些合理的玩法增添后，让人玩起...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"随笔","slug":"随笔","count":1,"path":"api/categories/随笔.json"}],"tags":[{"name":"玩游戏","slug":"玩游戏","count":1,"path":"api/tags/玩游戏.json"}],"author":{"name":"HalfReunion","slug":"blog-author","avatar":"/img/icon/avatar.jpg","link":"/","description":"如无必要，勿增实体","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"UnityEngine.Object和System.Object","uid":"0eeec1440f5c3f42f857474d88fef113","slug":"UnityEngine-Object和System-Object","date":"2022-06-29T03:32:19.000Z","updated":"2022-06-29T03:35:50.893Z","comments":true,"path":"api/articles/UnityEngine-Object和System-Object.json","keywords":null,"cover":"/img/background/cover.jpg","text":"引子 string s = string.Empty; var go = new GameObject(\"goodBoy\"); DestroyImmediate(go); go = null; if (!go) s += \"A\"; if (go is null) s += \"B\"...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"Unity","slug":"Unity","count":5,"path":"api/categories/Unity.json"}],"tags":[{"name":"C#","slug":"C","count":5,"path":"api/tags/C.json"},{"name":"基础","slug":"基础","count":1,"path":"api/tags/基础.json"}],"author":{"name":"HalfReunion","slug":"blog-author","avatar":"/img/icon/avatar.jpg","link":"/","description":"如无必要，勿增实体","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}
{"title":"Unity的异步编程","uid":"6d90e9563a794d3204e8d9a75ad8b2a9","slug":"Unity的异步编程","date":"2022-07-12T16:36:41.000Z","updated":"2022-07-13T08:20:03.232Z","comments":true,"path":"api/articles/Unity的异步编程.json","keywords":null,"cover":"/img/background/cover.jpg","content":"<p>这里只打算探索一下Unity的协程实现和C#的原生异步实现：async&#x2F;await还有将async&#x2F;await整合进Unity生命周期的第三方库UniTask。</p>\n<h2 id=\"1-Unity的协程\"><a href=\"#1-Unity的协程\" class=\"headerlink\" title=\"1. Unity的协程\"></a>1. Unity的协程</h2><p>Unity的协程依赖于IEnumertor类的迭代原理和Mono的生命周期，以实现一种分帧操作来呈现异步的效果。</p>\n<p>Unity协程的生命依靠着几个关键词IEnumertor,yield return。 启动一般以StartCoroutine()开始，</p>\n<p>IEnumertor的内部</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IEnumertor</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">MoveNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">object</span></span> Current <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>当打算使用协程时，一般是声明一个函数迭代器(或者叫迭代器块)，然后使用yield return来控制函数执行的流程。</p>\n<p>这里也可以再详细研究一下，首先函数迭代器里只能用yield return而不是普通的return，其二是函数迭代器内部的实现，看似是一个按着顺序执行的结构，实际是让编译器生成了一个<strong>状态机</strong>。</p>\n<p>这个状态机的特性：</p>\n<ol>\n<li>拥有1个初始状态。</li>\n<li>每次调用MoveNext，在执行到yield return 语句前，它需要执行GetEnumerator方法中的代码。</li>\n<li>在使用到Current属性时，必须返回生成的上一个值。</li>\n<li>必须知道什么时候完成生成值的操作，以便MoveNext返回false。</li>\n</ol>\n<p>使用1个例子来描述(来源于C# in Depth)<br>例如:</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">IEnumerator<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">CreateEnumerable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token expression language-csharp\">Padding</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> 开始调用 CreateEnumerable()\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token expression language-csharp\">Padding</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">准备调用yield </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token expression language-csharp\">i</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">yield</span> <span class=\"token keyword\">return</span> i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token expression language-csharp\">Padding</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> yield 结束\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token expression language-csharp\">Padding</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> yiled 最后1个值\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">yield</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token expression language-csharp\">Padding</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">CreateEnumerable() 结束\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">TestBegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">IEnumerator<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span> iterator <span class=\"token operator\">=</span> <span class=\"token function\">CreateEnumerable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//IEnumerator&lt;int> iterator = iterable.GetEnumerator();</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"开始递归\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"调用MoveNext\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> result <span class=\"token operator\">=</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">MoveNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"MoveNext的值=</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token expression language-csharp\">result</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Fetching Current...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Current的值=</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token expression language-csharp\">iterator<span class=\"token punctuation\">.</span>Current</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            \n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>输出的结果为,<br><img src=\"/img/article/UNITY_YIBU/0.png\" alt=\"image\"></p>\n<p>在函数的正常使用里，return 基本有两个用处：为调用者提供返回值，终止方法的执行，在退出时执行finally代码块。</p>\n<p>上面的例子可以发现几个规律，</p>\n<ol>\n<li>yield return会临时退出方法，而当执行MoveNext的时候，yield return 会继续执行。</li>\n<li>所有工作在调用MoveNext时完成，获取current值(yield return 后面的值 是赋值给current属性)。</li>\n<li>需要通过MoveNext返回false才能结束方法执行。</li>\n</ol>\n<p>这样可以得到yield return的流程:<br>-&gt;声明IEnumerator代码块<br>-&gt;执行MoveNext()&#x3D;代码块执行到下一个yield return 临时退出方法<br>-&gt;执行MoveNext()&#x3D;从刚才的退出的地方执行到下一个yield return,然后临时退出方法<br>-&gt;执行MoveNext()-&gt; Loop -&gt; ……. 直到MoveNext返回false</p>\n<p>有关于为什么yield return也能用在IEnumerable里，<br>C# in Depth作者对此有解析,<br><a href=\"https://csharpindepth.com/Articles/IteratorBlockImplementation\">https://csharpindepth.com/Articles/IteratorBlockImplementation</a></p>\n<p>那么为什么yield 可以Keep住状态，然后在下次继续执行呢？这里可以反编译一下yield 语法糖。</p>\n<details>\n<summary>反编译</summary>\n\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">CompilerGenerated</span></span><span class=\"token punctuation\">]</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token operator\">&lt;</span>CreateEnumerable<span class=\"token operator\">></span>d__2 <span class=\"token punctuation\">:</span> IEnumerator<span class=\"token operator\">&lt;</span><span class=\"token keyword\">object</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> IEnumerator<span class=\"token punctuation\">,</span> IDisposable\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>1__state<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">object</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>2__current<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&lt;</span>i<span class=\"token operator\">></span><span class=\"token number\">5__1</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token return-type class-name\"><span class=\"token keyword\">object</span></span> IEnumerator<span class=\"token operator\">&lt;</span><span class=\"token keyword\">object</span><span class=\"token operator\">></span><span class=\"token punctuation\">.</span>Current\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DebuggerHidden</span></span><span class=\"token punctuation\">]</span>\n\t\t\t<span class=\"token keyword\">get</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>2__current<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\n\t\t<span class=\"token return-type class-name\"><span class=\"token keyword\">object</span></span> IEnumerator<span class=\"token punctuation\">.</span>Current\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DebuggerHidden</span></span><span class=\"token punctuation\">]</span>\n\t\t\t<span class=\"token keyword\">get</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>2__current<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\n\t\t<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DebuggerHidden</span></span><span class=\"token punctuation\">]</span>\n\t\t<span class=\"token keyword\">public</span> <span class=\"token operator\">&lt;</span>CreateEnumerable<span class=\"token operator\">></span><span class=\"token function\">d__2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>1__state<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>1__state <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>1__state<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\n\t\t<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DebuggerHidden</span></span><span class=\"token punctuation\">]</span>\n\t\t<span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> IDisposable<span class=\"token punctuation\">.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\n\t\t<span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">MoveNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>1__state<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n\t\t\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>1__state <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t\tConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>Padding <span class=\"token operator\">+</span> <span class=\"token string\">\" 开始调用 CreateEnumerable()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token operator\">&lt;</span>i<span class=\"token operator\">></span><span class=\"token number\">5__1</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">goto</span> IL_00b6<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n\t\t\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>1__state <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t\tConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>Padding <span class=\"token operator\">+</span> <span class=\"token string\">\" yield 结束\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token operator\">&lt;</span>i<span class=\"token operator\">></span><span class=\"token number\">5__1</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">goto</span> IL_00b6<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n\t\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>1__state <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\tConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>Padding <span class=\"token operator\">+</span> <span class=\"token string\">\"CreateEnumerable() 结束\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\tIL_00b6<span class=\"token punctuation\">:</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>i<span class=\"token operator\">></span><span class=\"token number\">5__1</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\tConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;0&#125;准备调用yield &#123;1&#125;\"</span><span class=\"token punctuation\">,</span> Padding<span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span>i<span class=\"token operator\">></span><span class=\"token number\">5__1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>2__current <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>i<span class=\"token operator\">></span><span class=\"token number\">5__1</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>1__state <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\tConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>Padding <span class=\"token operator\">+</span> <span class=\"token string\">\" yiled 最后1个值\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>2__current <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>1__state <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\n\t\t<span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> IEnumerator<span class=\"token punctuation\">.</span><span class=\"token function\">MoveNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">//ILSpy generated this explicit interface implementation from .override directive in MoveNext</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">MoveNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\n\t\t<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DebuggerHidden</span></span><span class=\"token punctuation\">]</span>\n\t\t<span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> IEnumerator<span class=\"token punctuation\">.</span><span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NotSupportedException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> Padding <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">string</span></span><span class=\"token punctuation\">(</span><span class=\"token char\">' '</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">Program</span> program <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Program</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">TestBegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">IteratorStateMachine</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\"><span class=\"token punctuation\">&lt;</span>CreateEnumerable<span class=\"token punctuation\">></span>d__2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">IEnumerator</span> <span class=\"token function\">CreateEnumerable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token operator\">&lt;</span>CreateEnumerable<span class=\"token operator\">></span><span class=\"token function\">d__2</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">TestBegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">IEnumerator</span> iterator <span class=\"token operator\">=</span> <span class=\"token function\">CreateEnumerable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"开始递归\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"调用MoveNext\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> result <span class=\"token operator\">=</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">MoveNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MoveNext的值=&#123;0&#125;\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>result<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\tConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Fetching Current...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Current的值=&#123;0&#125;\"</span><span class=\"token punctuation\">,</span> iterator<span class=\"token punctuation\">.</span>Current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</details>\n\n<p>可以看到，整个MoveNext变成了通过状态代码切换状态的函数，并分割成了几部分。<br>成员变量</p>\n<p><strong><i>5__1</strong>：指的是for循环里的i变量</p>\n<p><strong>&lt;&gt;2__current</strong>：就是IEnumertor的current属性，这里我使用了int泛型，所以这里的类型变成了int。如果没有指定类型，这个变量将会是个Object。</p>\n<p><strong>&lt;&gt;1__state</strong> ：状态代码，这个值的初始化在static IEnumertor CreateEnumerable()中，初始值为0。</p>\n<p><strong>这样看流程就很清晰，编译器将函数里的逻辑分成几个步骤并分配给不同状态码管理，而每次执行MoveNext都会推进这个状态码的切换，保持yield return部分更新Current属性的同时，进而推进逻辑的执行。</strong></p>\n<hr>\n<p>之后就是Unity部分，Unity部分涉及1个StartCorountine启动协程还有很多个yield return new XXXX。</p>\n<p>StartCoroutine将入参的IEnumerator包裹成Corountine对象，之后这个对象会保存在MonoBehaviour的一个成员容器里，同时内部还会提取出MoveNext和Current以方便调用，然后调用Corountine内部的run方法启动。从上面得知调用MoveNext就等同于推进逻辑执行，<br>而Current主要是保存另一个yield return new XXXX的东西。</p>\n<ul>\n<li>WaitForSeconds</li>\n<li>WaitForFixedUpdate</li>\n<li>WaitForEndOfFrame</li>\n<li>Coroutine (C#层)</li>\n<li>WWW</li>\n<li>AsyncOperation</li>\n</ul>\n<p>这些类型的处理方式，无非是做个类似定时器一样的类DelayedCallManager去实现他们，比如说yield return new WaitForSeconds(10f)，DelayedCallManager根据这个需要等待的值直接去Update里算时间，计时结束后再回调Coroutine。</p>\n<details>\n<summary>别人对DelayedCallManager的解析</summary>\n\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">\n\t<span class=\"token keyword\">void</span> <span class=\"token class-name\">DelayedCallManager</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">float</span> time <span class=\"token operator\">=</span> <span class=\"token function\">GetCurTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> frame <span class=\"token operator\">=</span> <span class=\"token function\">GetTimeManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetFrameCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\tContainer<span class=\"token double-colon punctuation\">::</span>iterator iterator <span class=\"token operator\">=</span> m_CallObjects<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//m_CallObjects保存了所有注册的Coroutine对象</span>\n\t\n\t<span class=\"token comment\">// iterator->time 在注册的时候赋值是: 当前时间 + 等待的时间(new WaitForSeconds(5),那么就是5秒)</span>\n\t<span class=\"token comment\">// iterator->time &lt;= time 这个条件判断了iterator的定时时间是否满足了</span>\n\t<span class=\"token comment\">// 比如上面我们加入定义new WaitForSeconds(5)，</span>\n\t<span class=\"token comment\">// 满足的条件时就当当前时间time要大于iterator满足的时间的时候，则进入这个while循环内</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iterator <span class=\"token operator\">!=</span>  m_CallObjects<span class=\"token punctuation\">.</span><span class=\"token function\">end</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> iterator<span class=\"token operator\">-></span>time <span class=\"token operator\">&lt;=</span> time<span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">//判断帧是否满足,加入用到了new WaitForFixedUpdate()之类的</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">.</span>timeStamp <span class=\"token operator\">!=</span> m_TimeStamp <span class=\"token operator\">&amp;&amp;</span> cb<span class=\"token punctuation\">.</span>frame <span class=\"token operator\">&lt;=</span> frame<span class=\"token punctuation\">)</span> \t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">//调用CoroutineCallback了</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\t\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</details>\n\n<h2 id=\"2-async-x2F-await\"><a href=\"#2-async-x2F-await\" class=\"headerlink\" title=\"2. async&#x2F;await\"></a>2. async&#x2F;await</h2><p>去看了看Unity课堂的日本站，有关于异步处理的专栏，几乎都是async&#x2F;await的讲解，看下他们的解析来总结。</p>\n<ul>\n<li>async关键字：指定方法为异步方法。</li>\n<li>await关键字：用于修饰async方法里的逻辑，await是阻塞的，若无返回则不会执行下面的操作。</li>\n</ul>\n<p>用简单的例子展开：</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">AsyncTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>DateTime<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">await</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">Delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>DateTime<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>反编译这段代码，可以发现内部是创建了一个状态机，用比较清晰的写法来描述这段</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">AsyncTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//实例化1个异步状态机</span>\n\t<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> statemachine <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">AsyncTestStateMachine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\tstateMachine<span class=\"token punctuation\">.</span>builder <span class=\"token operator\">=</span> AsyncVoidMethodBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstateMachine<span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\tstateMachine<span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\tstateMachine<span class=\"token punctuation\">.</span>builder<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> stateMachine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>AsyncTestStateMachine是一个名字是动态生成，继承自IAsyncStateMachine的类，MSDN对这个接口的解释是 表示为异步方法生成的状态机。 此类别仅供编译器使用。 需要实现一个MoveNext()作为状态转换函数，有一个重要的成员对象AsyncVoidMethodBuilder。</p>\n<details>\n<summary>AsyncTestStateMachine的反编译</summary>\n\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token operator\">&lt;</span>asyncFunc<span class=\"token operator\">></span>d__1 <span class=\"token punctuation\">:</span> IAsyncStateMachine\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>1__state<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">public</span> AsyncVoidMethodBuilder <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>t__builder<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">private</span> TaskAwaiter <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>u__1<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">MoveNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token class-name\"><span class=\"token keyword\">int</span></span> num <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>1__state<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">try</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token class-name\">TaskAwaiter</span> awaiter<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\tConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>DateTime<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\tawaiter <span class=\"token operator\">=</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">Delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetAwaiter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>awaiter<span class=\"token punctuation\">.</span>IsCompleted<span class=\"token punctuation\">)</span>\n\t\t\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t\tnum <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>1__state <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>u__1 <span class=\"token operator\">=</span> awaiter<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token operator\">&lt;</span>asyncFunc<span class=\"token operator\">></span><span class=\"token class-name\">d__1</span> stateMachine <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>t__builder<span class=\"token punctuation\">.</span><span class=\"token function\">AwaitUnsafeOnCompleted</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> awaiter<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> stateMachine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\tawaiter <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>u__1<span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>u__1 <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">TaskAwaiter</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\tnum <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>1__state <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\tawaiter<span class=\"token punctuation\">.</span><span class=\"token function\">GetResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>DateTime<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> exception<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>1__state <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>t__builder<span class=\"token punctuation\">.</span><span class=\"token function\">SetException</span><span class=\"token punctuation\">(</span>exception<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>1__state <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>t__builder<span class=\"token punctuation\">.</span><span class=\"token function\">SetResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\n\t\t<span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> IAsyncStateMachine<span class=\"token punctuation\">.</span><span class=\"token function\">MoveNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">//ILSpy generated this explicit interface implementation from .override directive in MoveNext</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">MoveNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\n\t\t<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DebuggerHidden</span></span><span class=\"token punctuation\">]</span>\n\t\t<span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SetStateMachine</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IAsyncStateMachine</span> stateMachine<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\n\t\t<span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> IAsyncStateMachine<span class=\"token punctuation\">.</span><span class=\"token function\">SetStateMachine</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IAsyncStateMachine</span> stateMachine<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">//ILSpy generated this explicit interface implementation from .override directive in SetStateMachine</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">SetStateMachine</span><span class=\"token punctuation\">(</span>stateMachine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</details>\n\n<p>这个状态机内部有几个成员变量:<br><strong>&lt;&gt;1__state</strong> \t\t当前状态机的状态<br><strong>&lt;&gt;t__builder</strong> \t主要负责异步方面操作的核心成员变量。这里的类型是AsyncVoidMethodBuilder，表示不返回值的异步方法生成器。<br><strong>&lt;&gt;u__1</strong>\t\t\tTaskAwaiter类型，提供等待异步任务完成的对象。</p>\n<p>流程上是，编译器为所有被async修饰的异步方法，构建继承自IAsyncStateMachine的状态机，每个状态机都新增一个初始化的方法，这个方法用于初始化 builder 成员，将初始状态设置为 -1，并且会调用builder的start，调用MoveNext。<br>若有async嵌套async的情况，最外层的async会获得下一层async的awaiter，并且对其进行等待回调操作。</p>\n<p>进入MoveNext，先判断状态是否为0，</p>\n<p>否：获取Task异步方法的Awaiter，并判断异步是否已经完成</p>\n<p>未完成：<br>则将状态置为0，把Awaiter存入类成员变量中，并以该awaiter和自身this作为入参调用builder的.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine)方法，然后退出状态机。AwaitUnsafeOnCompleted的作用是，待异步方法完成时回调状态机的MoveNext()方法。</p>\n<p>是：将状态设为-1，重置状态码，执行延迟后面的逻辑。</p>\n<p>深入到Task.Delay，内部主要通过System.Threading.Timer实现，本身是基于线程池线程实现，所以他的计时是开启线程-&gt;线程内计时-&gt;计时结束回调，Delay函数返回Task，而AsyncVoidMethodBuilder的机制使得他会等待计时完成再执行后面的逻辑，因为使用了多线程所以也没有阻塞到主线程。</p>\n<p>async void和async Task区别<br><a href=\"https://docs.microsoft.com/zh-cn/archive/msdn-magazine/2013/march/async-await-best-practices-in-asynchronous-programming\">https://docs.microsoft.com/zh-cn/archive/msdn-magazine/2013/march/async-await-best-practices-in-asynchronous-programming</a></p>\n<h2 id=\"3-UniTask\"><a href=\"#3-UniTask\" class=\"headerlink\" title=\"3. UniTask\"></a>3. UniTask</h2>","text":"这里只打算探索一下Unity的协程实现和C#的原生异步实现：async&#x2F;await还有将async&#x2F;await整合进Unity生命周期的第三方库UniTask。 1. Unity的协程Unity的协程依赖于IEnumertor类的迭代原理和Mono的生命周期，...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"Unity","slug":"Unity","count":7,"path":"api/categories/Unity.json"}],"tags":[{"name":"探索发现","slug":"探索发现","count":3,"path":"api/tags/探索发现.json"},{"name":"C#","slug":"C","count":6,"path":"api/tags/C.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-Unity%E7%9A%84%E5%8D%8F%E7%A8%8B\"><span class=\"toc-text\">1. Unity的协程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-async-x2F-await\"><span class=\"toc-text\">2. async&#x2F;await</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-UniTask\"><span class=\"toc-text\">3. UniTask</span></a></li></ol>","author":{"name":"HalfReunion","slug":"blog-author","avatar":"/img/icon/avatar.jpg","link":"/","description":"如无必要，勿增实体","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"对UGUI系统的理解","uid":"c0e269d7e765c6c0b1340afdef40bcca","slug":"对UGUI系统的理解","date":"2022-11-22T13:50:59.000Z","updated":"2022-11-23T12:06:09.552Z","comments":true,"path":"api/articles/对UGUI系统的理解.json","keywords":null,"cover":"/img/background/cover.jpg","text":"集合看过的资料，也有混合一些理解，权当个记录的地方。大部分以luzexi大佬的笔记做导引和总结 前言首先UGUI建立在Mesh网格之上，UI元素的实例化都是通过构建网格实现。所以当想显示一个图片，实现按钮等都会构建Mesh，然后Mesh绑定材质球，在材质球里放图片。无论是UI系统...","link":"","photos":[],"count_time":{"symbolsCount":"9.3k","symbolsTime":"8 mins."},"categories":[{"name":"Unity","slug":"Unity","count":7,"path":"api/categories/Unity.json"}],"tags":[{"name":"UI","slug":"UI","count":2,"path":"api/tags/UI.json"},{"name":"基础","slug":"基础","count":2,"path":"api/tags/基础.json"}],"author":{"name":"HalfReunion","slug":"blog-author","avatar":"/img/icon/avatar.jpg","link":"/","description":"如无必要，勿增实体","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"玩游戏-仁王2","uid":"d128f62f62d268410a7ff9276841ac04","slug":"玩游戏-仁王2","date":"2022-07-04T11:26:58.000Z","updated":"2022-07-04T16:52:52.736Z","comments":true,"path":"api/articles/玩游戏-仁王2.json","keywords":null,"cover":"/img/background/cover.jpg","text":"之前一段时间(半年前)在玩仁王2，实在是很有意思的游戏。有可玩性高的动作系统，换一把武器就能有截然不同体验的感觉和怪猎非常相似，然后还拥有一些刷刷刷，装备build的RPG要素。 游戏里角色操作三段架势还有数种适配架势的技能，结合精力管控系统，再进行一些合理的玩法增添后，让人玩起...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"随笔","slug":"随笔","count":1,"path":"api/categories/随笔.json"}],"tags":[{"name":"玩游戏","slug":"玩游戏","count":1,"path":"api/tags/玩游戏.json"}],"author":{"name":"HalfReunion","slug":"blog-author","avatar":"/img/icon/avatar.jpg","link":"/","description":"如无必要，勿增实体","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}
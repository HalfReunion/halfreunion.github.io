{"title":"对UGUI系统的理解","uid":"c0e269d7e765c6c0b1340afdef40bcca","slug":"对UGUI系统的理解","date":"2022-07-07T13:50:59.000Z","updated":"2022-07-10T01:03:47.697Z","comments":true,"path":"api/articles/对UGUI系统的理解.json","keywords":null,"cover":"/img/background/cover.jpg","content":"<p>对看过的东西做一个总结。</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>首先UGUI建立在Mesh网格之上，UI元素的实例化都是通过构建网格实现。<br>所以当想显示一个图片，实现按钮等都会构建Mesh，然后Mesh绑定材质球，在材质球里放图片。无论是UI系统还是场景人物模型，都是遵循渲染原理和CPU工作原理，即GPU收集需要渲染的信息交于GPU进行渲染。</p>\n<p>Unity的动态合批原理是将相同的材质球(Material,参数也要一样:Shader和Textrue)进行网格的合并。</p>\n<p>所以这类UI元素的合批遵循就是下面的规则，将相同图片，相同Shader的材质球指向一个材质球，并把网格根据一些合并规则合并起来，这样就生成了几个合并后的网格+几个相同图片相同Shader的材质球，而每次动态合批都有一定代价，比如合批后会new出一个合批后的新材质球。<br>所谓图集概念由此而生，将多张图片放在同一张图片上，使得图片和材质球不需要重复绘制，只要改变Mesh的UV坐标来进行纹理映射即可。</p>\n<p>UGUI会尽量使用动态合批来减少DC对CPU的消耗。</p>\n<p>具体合并规则可以看<a href=\"https://halfreunion.github.io/post/UI%E7%9A%84DrawCall%E8%AE%A1%E7%AE%97%E3%80%82\">https://halfreunion.github.io/post/UI%E7%9A%84DrawCall%E8%AE%A1%E7%AE%97。</a></p>\n<p>Canvas就是渲染UI元素的组件，Canvas执行一次合批操作，会将其子节点的UI元素（不包括Canvas）进行合批，并将信息递交给GPU后生成DC。<br>而当UI元素发生变化时，也会进行一次上面的操作，因为UI元素发生变化而重新去计算Graphic组件（Graphic是UGUI的核心组成部分，是一个抽象类，为 Canvas 系统提供可绘制几何图形的所有 Unity UI C# 类的基类。）的布局和网格情况的过程，被称为Rebuild。</p>\n<p>避免过多Rebuild也是优化的关键。</p>\n<hr>\n<h2 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h2><h3 id=\"1-Canvas-组件\"><a href=\"#1-Canvas-组件\" class=\"headerlink\" title=\"1. Canvas 组件\"></a>1. Canvas 组件</h3><p>Canvas就是渲染UI元素的组件，比较重要的是参数是RenderMode,</p>\n<ol>\n<li>Overlay模式，不以Camera为基准</li>\n<li>Camera模式，以Camera为基准</li>\n<li>WorldSpace，以3D世界为标准</li>\n</ol>\n<p>Overlay通常处于屏幕的最前端，覆盖其他两个模式的UI元素，没有3D效果，多个该模式的Canvas同时存在的情况下，Sort Order参数越大越靠前渲染。</p>\n<p>Camera模式基于Camera的平面透视，渲染布局依赖绑定的Camera，该模式可以让更多非UI元素加入。<br>是实际上UI系统里最常用的模式。<br>UI元素的z轴若不为0，会单独拿出来渲染而不会参与合批。</p>\n<p>WorldSpace，基于Camera的视椎体透视，它将UI元素当做3D物体一样处理，当UI物体出现在Camera视野中时，相当于渲染了一个普通3D物体，除了普通渲染Canvas外还会对常经理的UI进行合批处理。</p>\n<p><em><strong>三种模式混合的情况</strong></em></p>\n<p><strong>Camera模式和WorldSpace模式的RenderCamera都是同一相机：</strong></p>\n<p>SortingLayer和Order in Layer相同的情况下</p>\n<p>Overlay→Camera→WorldSpace</p>\n<p>SortingLayer和Order in Layer不同的情况下：</p>\n<p>Overlay→SortingLayer→Order in Layer </p>\n<p>Camera模式的Canvas，会根据上面的顺序，覆盖值比它小的WorldSpace，如果它的值比WorldSpace还小，则会置于WorldSpace的底下作为背景。</p>\n<p>例子：</p>\n<p>下面带有“启动”界面是WorldSpace，背景图是的RenderMode是Camera，而左边包括好友的界面是Overlay。</p>\n<p>其中背景图和WorldSpace的UI所用的渲染相机都是同一个，其中背景图Canvas和WorldSpace的Canvas的SortingLayer都是Default，但是Order in Layer的值是背景图&lt;WorldSpace。</p>\n<p><img src=\"/img/article/UGUI_GEN/0.png\" alt=\"image\"></p>\n<p><strong>Camera和WorldSpace的RenderCamera都是不同相机的情况下：</strong></p>\n<p>渲染相机不同的情况下，Overlay→根据Camera的Depth值，越大越前面。</p>\n<p>RenderMode&#x3D;Overlay模式下， 多个Canvas并列：以Sort Order排列，值越大渲染在越前面。</p>\n<p>RenderMode&#x3D;Camera模式下，渲染相机都不同，多个Canvas并列情况下，以Camera的Depth值排序，越大渲染在越前面。</p>\n<p>RenderMode&#x3D;Camera模式下，渲染相机都是同个相机，多个Canvas并列情况下：先以SortingLayer排序，再以Order in Layer排序，越大渲染在越前面。</p>\n<p>RenderMode&#x3D;WorldSpace模式下，渲染相机都不同，多个Canvas并列的情况下，Camera的Depth无影响，先以SortingLayer排序，再以Order in Layer排序，越大渲染在越前面。</p>\n<p>RenderMode&#x3D;WorldSpace模式下，渲染相机都相同，多个Canvas并列情况下，先以SortingLayer排序，再以Order in Layer排序，越大渲染在越前面。</p>\n<p><img src=\"/img/article/UGUI_GEN/1.png\" alt=\"image\"></p>\n<h3 id=\"2-Canvas-Scaler组件\"><a href=\"#2-Canvas-Scaler组件\" class=\"headerlink\" title=\"2. Canvas-Scaler组件\"></a>2. Canvas-Scaler组件</h3><p>用来指定画布元素的比例大小，有几个重要参数可选。</p>\n<p>1.Constant Pixel Size：当修改屏幕宽高时，该模式下的UI将不会做大小变化。可以通过调整Scale Factor来调整UI的大小。无论屏幕大小如何，UI 元素都保持相同的像素大小。</p>\n<details>\n<summary>相关参数</summary>\n\n<ul>\n<li>比较重要的参数<ul>\n<li><p>Scale Factor</p>\n<p>  调整该值可等比缩放大小。</p>\n</li>\n<li><p>Reference Pixels Per Unit</p>\n<p>  Texture Type为Sprite(2D and UI)的图片中,有Pixels Per Unit参数，与这个值相对应，对照两个值等比缩放大小。</p>\n<p>  Reference Pixels Per Unit &#x3D; 100</p>\n<p>  Pixels Per Unit &#x3D; 10</p>\n<p>  Set Native Size ，image 将等比增加十倍大小。</p>\n<p>  缩放后的大小 &#x3D; 原本的Width和Height*(Reference Pixels Per Unit&#x2F;Pixels Per Unit)</p>\n</li>\n</ul>\n</li>\n</ul>\n</details>\n2.Scale With Screen Size：根据一个参考值来和屏幕分辨率来对UI元素进行缩放的模式。 \n<details>\n<summary> 比较重要的参数 </summary>\n\n<ul>\n<li>Screen Match Mode<ul>\n<li><p>MatchWidth Or Height：<br>当实际设备的分辨率和参考分辨率(Reference Resolution)比例相同时，会等比进行缩放。</p>\n<p>若不同时，则会根据MatchWidth Or Height的值对宽高进行一定的权重缩放，0会让<strong>实机分辨率的宽</strong> 扩充至 <strong>参考分辨率的宽度</strong>，然后</p>\n<p>将 <strong>实机分辨率的高</strong> &#x3D; 原实际分辨率的高&#x2F;（实际分辨率的宽度&#x2F;参考分辨率的宽度）</p>\n<p>为1则反过来，即让分辨率的高扩充至参考分辨率的高度，然后</p>\n<p>将 实际分辨率的宽 &#x3D; 原实际分辨率的高&#x2F;（实际分辨率的高度&#x2F;参考分辨率的高度）</p>\n<p>参考分辨率为 600x600，设备实际分辨率为 180x180时，Canvas 的 ScaleXY 正好等于 180&#x2F;600 为 0.3，此时是<strong>等比缩放。</strong> 此时，matchWidthOrHeight 值的变化不会影响结果。</p>\n<p>设备实际分辨率宽高比和参考分辨率宽高比不同时，matchWidthOrHeight 表示<code>宽和高对于最终 Canvas 的 ScaleXY 以及 width/height 的影响程度</code>。</p>\n<p>当 matchWidthOrHeight 为 0时，保持 Canvas.width 为 Reference Resolution.x 不变，缩放值Canvas.scaleXY &#x3D; Screen.width &#x2F; Canvas.width, </p>\n<p>Canvas.height &#x3D; Screen.height &#x2F; Canvas.scaleXY;</p>\n<p>当 matchWidthOrHeight 为 1 时，保持 Canvas.height 为 Reference Resolution.y 不变，缩放值Canvas.scaleXY &#x3D; Screen.height &#x2F; Canvas.height,<br>Canvas.width &#x3D; Screen.width &#x2F; Canvas.scaleXY;</p>\n<p>当matchWidthOrHeight处于<strong>最左边</strong>时，实际设备的屏幕<strong>高度</strong>对于UI大小<strong>完全没有任何影响</strong>，只有实际设备的屏幕宽度会对UI大小产生影响。<code>假设宽度为Reference Resolution宽度的x倍，则UI整体缩放为Reference Resolution状态下的x倍</code>。也就是说只有宽度等于Reference Resolution宽度时，才能做到pixel perfect，否则像素就会有拉伸</p>\n<p>当处于最右边时，与上述情况正好相反，决定整体缩放值的是高度，而宽度则没有任何影响。</p>\n</li>\n<li><p>Expand：<br>相当于设置 Canvas.scaleXY &#x3D; min(Screen.width &#x2F; ReferenceResolution.x, Screen.height &#x2F; ReferenceResolution.y)</p>\n</li>\n<li><p>Shrink：<br>相当于设置 Canvas.scaleXY &#x3D; max(Screen.width &#x2F; ReferenceResolution.x, Screen.height &#x2F; ReferenceResolution.y)</p>\n</li>\n</ul>\n</li>\n</ul>\n</details>\n\n<p>3.Graphic Raycaster组件<br>基于射线的图形射线投射器，类似的射线组件有Physics Raycaster和Physics Raycaster2D，他们都依赖Camera组件。创建Canvas时一般会自带有这个组件，若没有这个组件则没办法响应点击等事件。Graphic Raycaster本身只会检测Canvas里的元素。因为GraphicRaycaster原本就在Canvas上了，所以在UI挂载的脚本上继承IEventSystemHandler事件接口，就能接收到回调，若要上面的接口运用3D 2D物体元素上，则需要在摄像机上挂载PhysicsRaycaster或者Physics2DRaycaster。</p>\n<p>对于Graphic Raycaster比较重要的一个结构体是PointerEventData，它存在于EventSystems命名空间下，里面存储了当前鼠标（触点）的各项数值，例如鼠标的当前位置，点击的位置等。投射器的Raycast方法根据PointerEventData来发射射线，依靠这项原理可以解决鼠标的穿透问题。<br>例子：</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">CheckGuiRaycastObjects</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">//构建一个关于鼠标点击的结构体</span>\n        <span class=\"token class-name\">PointerEventData</span> eventData <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">PointerEventData</span><span class=\"token punctuation\">(</span>events<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        eventData<span class=\"token punctuation\">.</span>pressPosition <span class=\"token operator\">=</span> Input<span class=\"token punctuation\">.</span>mousePosition<span class=\"token punctuation\">;</span>\n        eventData<span class=\"token punctuation\">.</span>position <span class=\"token operator\">=</span> Input<span class=\"token punctuation\">.</span>mousePosition<span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>RaycastResult<span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>RaycastResult<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        graph<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>GraphicRaycaster<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Raycast</span><span class=\"token punctuation\">(</span>eventData<span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>此外里面还有些可以设置屏蔽对象不参与射线检测的参数，指定阻止对某些layers进行响应等。</p>\n<p>4.EventTrigger</p>\n<p>输入事件触发器，与此脚本绑定的UI物体都可以接受输入事件。这个本身是个类，它的内部继承了所有派生自IEventSystemHandler的接口，并将继承实现的函数写成虚函数。所以需要像上面的所述Canvas挂载Graphic Raycaster。</p>\n<p>5.Image组件,RawImage组件<br>UI系统里的主要组件，可以展示图片和图集。</p>\n","text":"对看过的东西做一个总结。 前言首先UGUI建立在Mesh网格之上，UI元素的实例化都是通过构建网格实现。所以当想显示一个图片，实现按钮等都会构建Mesh，然后Mesh绑定材质球，在材质球里放图片。无论是UI系统还是场景人物模型，都是遵循渲染原理和CPU工作原理，即GPU收集需要渲...","link":"","photos":[],"count_time":{"symbolsCount":"5.3k","symbolsTime":"5 mins."},"categories":[{"name":"Unity","slug":"Unity","count":7,"path":"api/categories/Unity.json"}],"tags":[{"name":"基础","slug":"基础","count":2,"path":"api/tags/基础.json"},{"name":"UI","slug":"UI","count":2,"path":"api/tags/UI.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">组件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-Canvas-%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">1. Canvas 组件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-Canvas-Scaler%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">2. Canvas-Scaler组件</span></a></li></ol></li></ol>","author":{"name":"HalfReunion","slug":"blog-author","avatar":"/img/icon/avatar.jpg","link":"/","description":"如无必要，勿增实体","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Unity的异步编程","uid":"6d90e9563a794d3204e8d9a75ad8b2a9","slug":"Unity的异步编程","date":"2022-07-11T03:27:41.000Z","updated":"2022-07-12T03:46:16.297Z","comments":true,"path":"api/articles/Unity的异步编程.json","keywords":null,"cover":"/img/background/cover.jpg","text":"这里只打算探索一下Unity的协程实现和C#的原生异步实现：async&#x2F;await还有将async&#x2F;await整合进Unity生命周期的第三方库UniTask。 1. Unity的协程Unity的协程依赖于IEnumertor类的迭代原理和Mono的生命周期，...","link":"","photos":[],"count_time":{"symbolsCount":"6.8k","symbolsTime":"6 mins."},"categories":[{"name":"Unity","slug":"Unity","count":7,"path":"api/categories/Unity.json"}],"tags":[{"name":"探索发现","slug":"探索发现","count":3,"path":"api/tags/探索发现.json"},{"name":"C#","slug":"C","count":6,"path":"api/tags/C.json"}],"author":{"name":"HalfReunion","slug":"blog-author","avatar":"/img/icon/avatar.jpg","link":"/","description":"如无必要，勿增实体","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"玩游戏-仁王2","uid":"d128f62f62d268410a7ff9276841ac04","slug":"玩游戏-仁王2","date":"2022-07-04T11:26:58.000Z","updated":"2022-07-04T16:52:52.736Z","comments":true,"path":"api/articles/玩游戏-仁王2.json","keywords":null,"cover":"/img/background/cover.jpg","text":"之前一段时间(半年前)在玩仁王2，实在是很有意思的游戏。有可玩性高的动作系统，换一把武器就能有截然不同体验的感觉和怪猎非常相似，然后还拥有一些刷刷刷，装备build的RPG要素。 游戏里角色操作三段架势还有数种适配架势的技能，结合精力管控系统，再进行一些合理的玩法增添后，让人玩起...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"随笔","slug":"随笔","count":1,"path":"api/categories/随笔.json"}],"tags":[{"name":"玩游戏","slug":"玩游戏","count":1,"path":"api/tags/玩游戏.json"}],"author":{"name":"HalfReunion","slug":"blog-author","avatar":"/img/icon/avatar.jpg","link":"/","description":"如无必要，勿增实体","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}
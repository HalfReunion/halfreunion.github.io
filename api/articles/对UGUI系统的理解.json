{"title":"对UGUI系统的理解","uid":"c0e269d7e765c6c0b1340afdef40bcca","slug":"对UGUI系统的理解","date":"2022-11-22T13:50:59.000Z","updated":"2022-11-23T08:47:02.618Z","comments":true,"path":"api/articles/对UGUI系统的理解.json","keywords":null,"cover":"/img/background/cover.jpg","content":"<p><strong>集合看过的资料，也有混合一些理解，权当个记录的地方。</strong><br><strong>大部分以luzexi大佬的笔记做导引和总结</strong></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>首先UGUI建立在Mesh网格之上，UI元素的实例化都是通过构建网格实现。<br>所以当想显示一个图片，实现按钮等都会构建Mesh，然后Mesh绑定材质球，在材质球里放图片。无论是UI系统还是场景人物模型，都是遵循渲染原理和CPU工作原理，即GPU收集需要渲染的信息交于GPU进行渲染。</p>\n<p>Unity的动态合批原理是将相同的材质球(Material,参数也要一样:Shader和Textrue)进行网格的合并。</p>\n<p>所以这类UI元素的合批遵循就是下面的规则，将相同图片，相同Shader的材质球指向一个材质球，并把网格根据一些合并规则合并起来，这样就生成了几个合并后的网格+几个相同图片相同Shader的材质球，而每次动态合批都有一定代价，比如合批后会new出一个合批后的新材质球。<br>所谓图集概念由此而生，将多张图片放在同一张图片上，使得图片和材质球不需要重复绘制，只要改变Mesh的UV坐标来进行纹理映射即可。</p>\n<p>UGUI会尽量使用动态合批来减少DC对CPU的消耗。</p>\n<p>具体合并规则可以看<a href=\"https://halfreunion.github.io/post/UI%E7%9A%84DrawCall%E8%AE%A1%E7%AE%97%E3%80%82\">https://halfreunion.github.io/post/UI%E7%9A%84DrawCall%E8%AE%A1%E7%AE%97。</a></p>\n<p>Canvas就是渲染UI元素的组件，Canvas执行一次合批操作，会将其子节点的UI元素（不包括Canvas）进行合批，并将信息递交给GPU后生成DC。<br>而当UI元素发生变化时，也会进行一次上面的操作，因为UI元素发生变化而重新去计算Graphic组件（Graphic是UGUI的核心组成部分，是一个抽象类，为 Canvas 系统提供可绘制几何图形的所有 Unity UI C# 类的基类。）的布局和网格情况的过程，被称为Rebuild。</p>\n<p>避免过多Rebuild也是优化的关键。</p>\n<hr>\n<h2 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h2><h3 id=\"1-Canvas-组件\"><a href=\"#1-Canvas-组件\" class=\"headerlink\" title=\"1. Canvas 组件\"></a>1. Canvas 组件</h3><p>Canvas就是渲染UI元素的组件，比较重要的是参数是RenderMode,</p>\n<ol>\n<li>Overlay模式，不以Camera为基准</li>\n<li>Camera模式，以Camera为基准</li>\n<li>WorldSpace，以3D世界为标准</li>\n</ol>\n<p>Overlay通常处于屏幕的最前端，覆盖其他两个模式的UI元素，没有3D效果，多个该模式的Canvas同时存在的情况下，Sort Order参数越大越靠前渲染。</p>\n<p>Camera模式基于Camera的平面透视，渲染布局依赖绑定的Camera，该模式可以让更多非UI元素加入。<br>是实际上UI系统里最常用的模式。<br>UI元素的z轴若不为0，会单独拿出来渲染而不会参与合批。</p>\n<p>WorldSpace，基于Camera的视椎体透视，它将UI元素当做3D物体一样处理，当UI物体出现在Camera视野中时，相当于渲染了一个普通3D物体，除了普通渲染Canvas外还会对常经理的UI进行合批处理。</p>\n<p><em><strong>三种模式混合的情况</strong></em></p>\n<p><strong>Camera模式和WorldSpace模式的RenderCamera都是同一相机：</strong></p>\n<p>SortingLayer和Order in Layer相同的情况下</p>\n<p>Overlay→Camera→WorldSpace</p>\n<p>SortingLayer和Order in Layer不同的情况下：</p>\n<p>Overlay→SortingLayer→Order in Layer </p>\n<p>Camera模式的Canvas，会根据上面的顺序，覆盖值比它小的WorldSpace，如果它的值比WorldSpace还小，则会置于WorldSpace的底下作为背景。</p>\n<p>例子：</p>\n<p>下面带有“启动”界面是WorldSpace，背景图是的RenderMode是Camera，而左边包括好友的界面是Overlay。</p>\n<p>其中背景图和WorldSpace的UI所用的渲染相机都是同一个，其中背景图Canvas和WorldSpace的Canvas的SortingLayer都是Default，但是Order in Layer的值是背景图&lt;WorldSpace。</p>\n<p><img src=\"/img/article/UGUI_GEN/0.png\" alt=\"image\"></p>\n<p><strong>Camera和WorldSpace的RenderCamera都是不同相机的情况下：</strong></p>\n<p>渲染相机不同的情况下，Overlay→根据Camera的Depth值，越大越前面。</p>\n<p>RenderMode&#x3D;Overlay模式下， 多个Canvas并列：以Sort Order排列，值越大渲染在越前面。</p>\n<p>RenderMode&#x3D;Camera模式下，渲染相机都不同，多个Canvas并列情况下，以Camera的Depth值排序，越大渲染在越前面。</p>\n<p>RenderMode&#x3D;Camera模式下，渲染相机都是同个相机，多个Canvas并列情况下：先以SortingLayer排序，再以Order in Layer排序，越大渲染在越前面。</p>\n<p>RenderMode&#x3D;WorldSpace模式下，渲染相机都不同，多个Canvas并列的情况下，Camera的Depth无影响，先以SortingLayer排序，再以Order in Layer排序，越大渲染在越前面。</p>\n<p>RenderMode&#x3D;WorldSpace模式下，渲染相机都相同，多个Canvas并列情况下，先以SortingLayer排序，再以Order in Layer排序，越大渲染在越前面。</p>\n<p><img src=\"/img/article/UGUI_GEN/1.png\" alt=\"image\"></p>\n<h3 id=\"2-Canvas-Scaler组件\"><a href=\"#2-Canvas-Scaler组件\" class=\"headerlink\" title=\"2. Canvas-Scaler组件\"></a>2. Canvas-Scaler组件</h3><p>用来指定画布元素的比例大小，有几个重要参数可选。</p>\n<p>1.Constant Pixel Size：当修改屏幕宽高时，该模式下的UI将不会做大小变化。可以通过调整Scale Factor来调整UI的大小。无论屏幕大小如何，UI 元素都保持相同的像素大小。</p>\n<details>\n<summary>相关参数</summary>\n\n<ul>\n<li>比较重要的参数<ul>\n<li><p>Scale Factor</p>\n<p>  调整该值可等比缩放大小。</p>\n</li>\n<li><p>Reference Pixels Per Unit</p>\n<p>  Texture Type为Sprite(2D and UI)的图片中,有Pixels Per Unit参数，与这个值相对应，对照两个值等比缩放大小。</p>\n<p>  Reference Pixels Per Unit &#x3D; 100</p>\n<p>  Pixels Per Unit &#x3D; 10</p>\n<p>  Set Native Size ，image 将等比增加十倍大小。</p>\n<p>  缩放后的大小 &#x3D; 原本的Width和Height*(Reference Pixels Per Unit&#x2F;Pixels Per Unit)</p>\n</li>\n</ul>\n</li>\n</ul>\n</details>\n2.Scale With Screen Size：根据一个参考值来和屏幕分辨率来对UI元素进行缩放的模式。 \n<details>\n<summary> 比较重要的参数 </summary>\n\n<ul>\n<li>Screen Match Mode<ul>\n<li><p>MatchWidth Or Height：<br>当实际设备的分辨率和参考分辨率(Reference Resolution)比例相同时，会等比进行缩放。</p>\n<p>若不同时，则会根据MatchWidth Or Height的值对宽高进行一定的权重缩放，0会让<strong>实机分辨率的宽</strong> 扩充至 <strong>参考分辨率的宽度</strong>，然后</p>\n<p>将 <strong>实机分辨率的高</strong> &#x3D; 原实际分辨率的高&#x2F;（实际分辨率的宽度&#x2F;参考分辨率的宽度）</p>\n<p>为1则反过来，即让分辨率的高扩充至参考分辨率的高度，然后</p>\n<p>将 实际分辨率的宽 &#x3D; 原实际分辨率的高&#x2F;（实际分辨率的高度&#x2F;参考分辨率的高度）</p>\n<p>参考分辨率为 600x600，设备实际分辨率为 180x180时，Canvas 的 ScaleXY 正好等于 180&#x2F;600 为 0.3，此时是<strong>等比缩放。</strong> 此时，matchWidthOrHeight 值的变化不会影响结果。</p>\n<p>设备实际分辨率宽高比和参考分辨率宽高比不同时，matchWidthOrHeight 表示<code>宽和高对于最终 Canvas 的 ScaleXY 以及 width/height 的影响程度</code>。</p>\n<p>当 matchWidthOrHeight 为 0时，保持 Canvas.width 为 Reference Resolution.x 不变，缩放值Canvas.scaleXY &#x3D; Screen.width &#x2F; Canvas.width, </p>\n<p>Canvas.height &#x3D; Screen.height &#x2F; Canvas.scaleXY;</p>\n<p>当 matchWidthOrHeight 为 1 时，保持 Canvas.height 为 Reference Resolution.y 不变，缩放值Canvas.scaleXY &#x3D; Screen.height &#x2F; Canvas.height,<br>Canvas.width &#x3D; Screen.width &#x2F; Canvas.scaleXY;</p>\n<p>当matchWidthOrHeight处于<strong>最左边</strong>时，实际设备的屏幕<strong>高度</strong>对于UI大小<strong>完全没有任何影响</strong>，只有实际设备的屏幕宽度会对UI大小产生影响。<code>假设宽度为Reference Resolution宽度的x倍，则UI整体缩放为Reference Resolution状态下的x倍</code>。也就是说只有宽度等于Reference Resolution宽度时，才能做到pixel perfect，否则像素就会有拉伸</p>\n<p>当处于最右边时，与上述情况正好相反，决定整体缩放值的是高度，而宽度则没有任何影响。</p>\n</li>\n<li><p>Expand：<br>相当于设置 Canvas.scaleXY &#x3D; min(Screen.width &#x2F; ReferenceResolution.x, Screen.height &#x2F; ReferenceResolution.y)</p>\n</li>\n<li><p>Shrink：<br>相当于设置 Canvas.scaleXY &#x3D; max(Screen.width &#x2F; ReferenceResolution.x, Screen.height &#x2F; ReferenceResolution.y)</p>\n</li>\n</ul>\n</li>\n</ul>\n</details>\n\n<h3 id=\"3-Graphic-Raycaster组件\"><a href=\"#3-Graphic-Raycaster组件\" class=\"headerlink\" title=\"3.Graphic Raycaster组件\"></a>3.Graphic Raycaster组件</h3><p>基于射线的图形射线投射器，类似的射线组件有Physics Raycaster和Physics Raycaster2D，他们都依赖Camera组件。创建Canvas时一般会自带有这个组件，若没有这个组件则没办法响应点击等事件。Graphic Raycaster本身只会检测Canvas里的元素。因为GraphicRaycaster原本就在Canvas上了，所以在UI挂载的脚本上继承IEventSystemHandler事件接口，就能接收到回调，</p>\n<p>对于Graphic Raycaster比较重要的一个结构体是PointerEventData，它存在于EventSystems命名空间下，里面存储了当前鼠标（触点）的各项数值，例如鼠标的当前位置，点击的位置等。投射器的Raycast方法根据PointerEventData来发射射线，依靠这项原理可以解决鼠标的穿透问题。<br>例子：</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">CheckGuiRaycastObjects</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">//构建一个关于鼠标点击的结构体</span>\n        <span class=\"token class-name\">PointerEventData</span> eventData <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">PointerEventData</span><span class=\"token punctuation\">(</span>events<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        eventData<span class=\"token punctuation\">.</span>pressPosition <span class=\"token operator\">=</span> Input<span class=\"token punctuation\">.</span>mousePosition<span class=\"token punctuation\">;</span>\n        eventData<span class=\"token punctuation\">.</span>position <span class=\"token operator\">=</span> Input<span class=\"token punctuation\">.</span>mousePosition<span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>RaycastResult<span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>RaycastResult<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        graph<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>GraphicRaycaster<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Raycast</span><span class=\"token punctuation\">(</span>eventData<span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>此外里面还有些可以设置屏蔽对象不参与射线检测的参数，指定阻止对某些layers进行响应等。</p>\n<h3 id=\"4-EventTrigger\"><a href=\"#4-EventTrigger\" class=\"headerlink\" title=\"4.EventTrigger\"></a>4.EventTrigger</h3><p>输入事件触发器，与此脚本绑定的UI物体都可以接受输入事件。<br>这个本身也是个类，它的内部继承了所有派生自IEventSystemHandler的接口，并将继承实现的函数写成虚函数。所以需要像上面的所述Canvas挂载Graphic Raycaster。<br>若要上面的接口运用3D 2D物体元素上，则需要在摄像机上挂载PhysicsRaycaster或者Physics2DRaycaster。</p>\n<h3 id=\"5-Image组件-RawImage组件\"><a href=\"#5-Image组件-RawImage组件\" class=\"headerlink\" title=\"5.Image组件,RawImage组件\"></a>5.Image组件,RawImage组件</h3><p>两个都是UI系统里的主要组件，可以展示图片和图集。<br>Image组件只能展示图集里的图元，因为是图集里的图片可以进行合批。<br>RawImage可以展示单张图片，不能参与合批。<br>一般来说使用RawImage的图片都是因为尺寸过大，参与图集合并会把图集也撑得很大，效率不高，所以干脆直接用RawImage来展示。</p>\n<h3 id=\"6-Mask组件和RectMask2D组件\"><a href=\"#6-Mask组件和RectMask2D组件\" class=\"headerlink\" title=\"6.Mask组件和RectMask2D组件\"></a>6.Mask组件和RectMask2D组件</h3><p>遮挡组件，可以将其子节点下矩形区域外的内容剔除，是滚动窗口中最常用的组件。</p>\n<p>这两种方式的主要是在剔除的方法上有所区别，在实现效果上都是一样的，<br>其中Mask 使用顶点重构的方式剔除矩形区域外的部分（使用了模板测试）<br>而RectMask2D则采用Shader的剔除方式，每个元素都有自己的材质球实例和实例参数。</p>\n<h2 id=\"源码部分\"><a href=\"#源码部分\" class=\"headerlink\" title=\"源码部分\"></a>源码部分</h2><p>UGUI系统大致可以分为3类，分别是输入检测模块，动画，核心渲染。</p>\n<h3 id=\"输入检测模块\"><a href=\"#输入检测模块\" class=\"headerlink\" title=\"输入检测模块\"></a>输入检测模块</h3><p>输入事件可以分为<strong>事件数据模块</strong>，<strong>输入事件捕获模块</strong>，<strong>射线碰撞检测模块</strong>，<strong>事件逻辑处理及回调模块</strong>。<br>EventSystem管理 所有的<strong>输入事件捕获模块</strong>（InputModule）并帧调用Module的执行（Process）</p>\n<p>​调动<strong>射线碰撞检测模块</strong>（Raycasters），为InputModule提供结果（具体的触点所穿透的对象信息）</p>\n<p>​InputModule管理更新EventData判断当前的操作事件，并通知具体的EventSystemHandler 进行逻辑处理。</p>\n<h4 id=\"事件数据模块\"><a href=\"#事件数据模块\" class=\"headerlink\" title=\"事件数据模块\"></a>事件数据模块</h4><p>这部分模块用于存储用户输入信息，包含事件发生时的位置、和事件对应的物体，事件的位移大小，触发事件的输入类型，以及事件的设备信息等。<br>模块的主要作用就是获取数据，提供数据服务。</p>\n<p>这部分模块的基类是<strong>AbstractEventData</strong>，这个抽象基类内容不多，主要是围绕事件数据是否被使用过，有方法和变量描述是否已使用的状态。<br>由它派生出</p>\n<ol>\n<li><strong>BaseEventData</strong>：基础的事件数据基类，提供对事件系统角色的引用(绑定EventSystem)，和使用EventSystem的捕获模块获得当前选中的对象(BaseInputModule)的方法。</li>\n<li><strong>PointerEventData</strong>：点位(指针)事件类型类，这个用处较多。Unity将按下的点位，鼠标或者触摸的点位，是否拖拽，是否移动，接收响应的物体等都存在里面。</li>\n<li><strong>AxisEventData</strong>：滚轮事件数据类，这个代码量较少，只提供滚轮的方向信息。</li>\n</ol>\n<h4 id=\"输入事件捕获模块\"><a href=\"#输入事件捕获模块\" class=\"headerlink\" title=\"输入事件捕获模块\"></a>输入事件捕获模块</h4><p>输入事件捕获模块由四个类组成，BaseInputModule，PointerInputModule，StandaloneInputModule，TouchInputModule，负责引发事件并将其发送到 GameObjects 进行处理。<br>在我看来这部分的理解，应该是</p>\n<p>认识基类拓展出去的方法<br>理清触摸-&gt; 点击 这套流程里输入事件捕获模块做过什么事情。</p>\n<p>一般来说EventSystem下会挂载StandaloneInputModule或者TouchInputModule。</p>\n<p>捕获模块的基类是<strong>BaseInputModule</strong>，继承自EventSystems.UIBehaviour<br>这个基类强依赖于EventSystem类，需要对象挂载EventSystem。提供了一些必要的接口和成员变量。</p>\n<p>里面有几个较为重要的方法可以一提，</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//update每帧都会调用它，最主要的方法，派生类在 Progress 方法中，</span>\n<span class=\"token comment\">//因为鼠标模拟层的原因，触摸需要先进行判断，然后根据判断是否有鼠标（input.mousePresent），进行鼠标事件处理。</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Process</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//可用于返回第一个合法的RaycastResult,接收射线检测到的物体各类信息。</span>\n<span class=\"token keyword\">protected</span> <span class=\"token return-type class-name\">RaycastResult</span> <span class=\"token function\">FindFirstRaycast</span><span class=\"token punctuation\">(</span>List<span class=\"token operator\">&lt;</span>RaycastResult<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//给定两个对象，返回他们最近的共同根物体。</span>\n<span class=\"token return-type class-name\">GameObject</span> <span class=\"token function\">FindCommonRoot</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GameObject</span> g1<span class=\"token punctuation\">,</span><span class=\"token class-name\">GameObject</span> g2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//当发现新的输入目标时处理正在发送的进入和退出事件，会从PointerEventData参数里找到响应的对象，</span>\n<span class=\"token comment\">//并使用ExecuteEvents.Execute传递事件到对象里执行</span>\n<span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">HandlePointerExitAndEnter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PointerEventData</span> currentPointerData<span class=\"token punctuation\">,</span> <span class=\"token class-name\">GameObject</span> newEnterTarget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//具有给定 ID 的指针是否位于 EventSystem 对象上，这个方法主要由EventSystem.IsPointerOverGameObject调用过来。</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">IsPointerOverGameObject</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> pointerId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>由它派生出</p>\n<ol>\n<li><strong>PointerInputModule</strong>：<br>  这部分主要在其基础上扩展了对与点位的输入逻辑，增加了输入类型和状态，也是个抽象类。<br>  比较重要的是定义了鼠标指针的ID，这样可以通过ID来判断是左键还是右键。<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\">\n<span class=\"token comment\">//建立指针id与PointerEventData数据处理的字典</span>\n<span class=\"token keyword\">protected</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">GetPointerData</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> id<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token class-name\">PointerEventData</span> data<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> create<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//获得触摸的PointerEventData信息，触发EventSystem.RaycastAll，将射线信息存入PointerEventData返回</span>\n<span class=\"token keyword\">protected</span> <span class=\"token return-type class-name\">PointerEventData</span> <span class=\"token function\">GetTouchPointerEventData</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Touch</span> input<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> pressed<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> released<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//使用EventSystem的RaycastAll射线，获得射线碰撞的对象，并且返回保存按键数据的MouseState类</span>\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">virtual</span> <span class=\"token return-type class-name\">MouseState</span> <span class=\"token function\">GetMousePointerEventData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//还有ProcessDrag等，判断指针的状态(移动还是拖拽),执行对应方法(HandlePointerExitAndEnter或者直接ExecuteEvents.Execute)</span>\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">virtual</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ProcessMove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PointerEventData</span> pointerEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<p>由<strong>PointerInputModule</strong>又派生出下面几个部分</p>\n<ol>\n<li><strong>StandaloneInputModule</strong>：<br>最直接的与EventSystem交流的类，EventSystem通过调用同对象下的Module类来调用功能。<br>里面定义了鼠标&#x2F;键盘的输入。</li>\n</ol>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\">\n<span class=\"token comment\">//EventSystem每帧都会调用这个函数</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Process</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//检测触点，会在对象下挂载一个BaseInput类，这个检测类会调用Input里的各种函数，来得到触点或者鼠标位置之类的东西。</span>\n<span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">ProcessTouchEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//处理所有的鼠标事件,先调用GetMousePointerEventData,调用了各种ProcessXXX函数</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ProcessMouseEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"2\">\n<li><strong>TouchInputModule</strong>：<br>和上面的差不多</li>\n</ol>\n<p>期间大量使用了ExecuteEvents.ExecuteHierarchy，ExecuteEvents.Execute，用以传输事件到相应对象里。</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">GameObject</span> <span class=\"token generic-method\"><span class=\"token function\">ExecuteHierarchy</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GameObject</span> root<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BaseEventData</span> eventData<span class=\"token punctuation\">,</span> <span class=\"token class-name\">EventFunction<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span> callbackFunction<span class=\"token punctuation\">)</span> <span class=\"token keyword\">where</span> <span class=\"token class-name\">T</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IEventSystemHandler</span></span>\n<span class=\"token punctuation\">&#123;</span>\n <span class=\"token comment\">// 获取物体的所有父节点，包括它自己</span>\n    <span class=\"token function\">GetEventChain</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> s_InternalTransformList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s_InternalTransformList<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> transform <span class=\"token operator\">=</span> s_InternalTransformList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 对每个父节点包括自己依次执行句柄响应</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Execute</span><span class=\"token punctuation\">(</span>transform<span class=\"token punctuation\">.</span>gameObject<span class=\"token punctuation\">,</span> eventData<span class=\"token punctuation\">,</span> callbackFunction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> transform<span class=\"token punctuation\">.</span>gameObject<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h4 id=\"射线碰撞检测模块\"><a href=\"#射线碰撞检测模块\" class=\"headerlink\" title=\"射线碰撞检测模块\"></a>射线碰撞检测模块</h4><p>射线碰撞检测模块主要工作是从摄像机的屏幕位置上，做射线碰撞检测并获取碰撞结果，把结果返回给事件处理逻辑类，交由事件处理模块处理事件。<br>射线碰撞检测模块主要为3个类，分别作用于2D射线碰撞检测，3D射线碰撞检测，GraphicRaycaster图形射线碰撞测试。</p>\n<h4 id=\"事件逻辑处理及回调模块\"><a href=\"#事件逻辑处理及回调模块\" class=\"headerlink\" title=\"事件逻辑处理及回调模块\"></a>事件逻辑处理及回调模块</h4><h3 id=\"核心渲染模块\"><a href=\"#核心渲染模块\" class=\"headerlink\" title=\"核心渲染模块\"></a>核心渲染模块</h3><h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3>","text":"集合看过的资料，也有混合一些理解，权当个记录的地方。大部分以luzexi大佬的笔记做导引和总结 前言首先UGUI建立在Mesh网格之上，UI元素的实例化都是通过构建网格实现。所以当想显示一个图片，实现按钮等都会构建Mesh，然后Mesh绑定材质球，在材质球里放图片。无论是UI系统...","link":"","photos":[],"count_time":{"symbolsCount":"9.3k","symbolsTime":"8 mins."},"categories":[{"name":"Unity","slug":"Unity","count":7,"path":"api/categories/Unity.json"}],"tags":[{"name":"UI","slug":"UI","count":2,"path":"api/tags/UI.json"},{"name":"基础","slug":"基础","count":2,"path":"api/tags/基础.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">组件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-Canvas-%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">1. Canvas 组件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-Canvas-Scaler%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">2. Canvas-Scaler组件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-Graphic-Raycaster%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">3.Graphic Raycaster组件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-EventTrigger\"><span class=\"toc-text\">4.EventTrigger</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-Image%E7%BB%84%E4%BB%B6-RawImage%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">5.Image组件,RawImage组件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-Mask%E7%BB%84%E4%BB%B6%E5%92%8CRectMask2D%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">6.Mask组件和RectMask2D组件</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%BA%90%E7%A0%81%E9%83%A8%E5%88%86\"><span class=\"toc-text\">源码部分</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5%E6%A3%80%E6%B5%8B%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">输入检测模块</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E4%BB%B6%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">事件数据模块</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5%E4%BA%8B%E4%BB%B6%E6%8D%95%E8%8E%B7%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">输入事件捕获模块</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B0%84%E7%BA%BF%E7%A2%B0%E6%92%9E%E6%A3%80%E6%B5%8B%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">射线碰撞检测模块</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E4%BB%B6%E9%80%BB%E8%BE%91%E5%A4%84%E7%90%86%E5%8F%8A%E5%9B%9E%E8%B0%83%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">事件逻辑处理及回调模块</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%B8%E5%BF%83%E6%B8%B2%E6%9F%93%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">核心渲染模块</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\"></span></a></li></ol></li></ol>","author":{"name":"HalfReunion","slug":"blog-author","avatar":"/img/icon/avatar.jpg","link":"/","description":"如无必要，勿增实体","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"Unity的异步编程","uid":"6d90e9563a794d3204e8d9a75ad8b2a9","slug":"Unity的异步编程","date":"2022-07-12T16:36:41.000Z","updated":"2022-07-13T08:20:03.232Z","comments":true,"path":"api/articles/Unity的异步编程.json","keywords":null,"cover":"/img/background/cover.jpg","text":"这里只打算探索一下Unity的协程实现和C#的原生异步实现：async&#x2F;await还有将async&#x2F;await整合进Unity生命周期的第三方库UniTask。 1. Unity的协程Unity的协程依赖于IEnumertor类的迭代原理和Mono的生命周期，...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"Unity","slug":"Unity","count":7,"path":"api/categories/Unity.json"}],"tags":[{"name":"探索发现","slug":"探索发现","count":3,"path":"api/tags/探索发现.json"},{"name":"C#","slug":"C","count":6,"path":"api/tags/C.json"}],"author":{"name":"HalfReunion","slug":"blog-author","avatar":"/img/icon/avatar.jpg","link":"/","description":"如无必要，勿增实体","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}
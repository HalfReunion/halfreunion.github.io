{"title":"UI的DrawCall计算","uid":"1350894a588790266d2094e5ec7bddd0","slug":"UI的DrawCall计算","date":"2022-06-28T08:25:28.000Z","updated":"2022-06-28T09:12:09.631Z","comments":true,"path":"api/articles/UI的DrawCall计算.json","keywords":null,"cover":"/img/background/cover.jpg","content":"<p>总结提取自uwa4d的文章：<a href=\"https://edu.uwa4d.com/course-intro/0/126\">https://edu.uwa4d.com/course-intro/0/126</a></p>\n<p>影响DrawCall的元素有三点：Depth值，Material，Texture。</p>\n<p>Depth值：</p>\n<ol>\n<li><p>需要按照Hierarchy面板的节点顺序，从上到下进行Depth分析。（使用深度优先原则）</p>\n</li>\n<li><p>跳过不渲染的节点，比如active&#x3D;false，Canvas不渲染的Layer等（使其depth为-1）。</p>\n</li>\n<li><p>如果处于渲染状态，但是Hierarchy面板的他<strong>下面</strong>没有其他元素跟他相交，其Depth值为0。</p>\n</li>\n</ol>\n<p><strong>不是RectTransform的Rect相交，而是渲染元素有没有重叠。</strong></p>\n<p><img src=\"/img/article/UI_DRAWCALL_CAL/0.png\" alt=\"img\"></p>\n<ol start=\"4\">\n<li>如果有相交，找到其中最大depth值(把值记作MaxLowerDepth)的元素，判断是否能与相交的合批</li>\n</ol>\n<p>（即<strong>Batch</strong>，条件为Material和Textrue相同），如果能，则当前depth值&#x3D;MaxLowerDepth。</p>\n<p>若不能Batch，则相交的depth值&#x3D;MaxLowerDepth+1。（计算可从最底层往上算）</p>\n<p><img src=\"/img/article/UI_DRAWCALL_CAL/1.png\" alt=\"img\"></p>\n<p><img src=\"/img/article/UI_DRAWCALL_CAL/2.png\" alt=\"img\"></p>\n<p>计算完Depth值后，获得材质球Material的InstanceID先进行升序排序，得出以下顺序的List</p>\n<p><img src=\"/img/article/UI_DRAWCALL_CAL/3.png\" alt=\"img\"></p>\n<p>之后获取TextTure ID的InstanceId，并再进行一次升序排序，最终得到下面顺序的List。</p>\n<p>使用SpriteAltas的图集或者使用Tp打包的图集，TextTure ID就是图集的ID。</p>\n<p>使用单个图片没有图集，TextTrueID就是其本身的ID，说明打包图集可以让元素拥有同一纹理。</p>\n<p><img src=\"/img/article/UI_DRAWCALL_CAL/4.png\" alt=\"img\"></p>\n<p>决定1次DrawCall就是List中相邻相同的Depth，MaterialID和TextureID，上图的DrawCall是638&#x2F;10138&#x2F;10414&#x2F;638，4个DrawCall。</p>\n<p>如果出现这种情况，就优先从Hieraphy上往上搜寻。</p>\n<p><img src=\"/img/article/UI_DRAWCALL_CAL/5.png\" alt=\"img\"></p>\n<p>另一情况：<strong>PosZ不为0</strong></p>\n<p>当父节点Pos Z 不为0，子节点Pos Z为0时，子节点满足以下条件可合批：</p>\n<ol>\n<li>满足图集一致，材质一致等基本条件。</li>\n<li>在Hierarchy相邻。</li>\n<li>跟Depth值以及其他节点是否相交没关系。</li>\n</ol>\n<p>当父节点Pos Z为 0，子节点Pos Z不为0时：</p>\n<ol>\n<li><p>父节点下所有子节点都满足合批条件，无论子节点PosZ都可以合批。</p>\n</li>\n<li><p>父节点下所有子节点都满足基本合批条件（部分图集和材质一致），则合批受Hierarchy的节点顺序影响。</p>\n</li>\n</ol>\n<p><img src=\"/img/article/UI_DRAWCALL_CAL/6.png\" alt=\"img\"></p>\n<p>根据以上规则，就可以得出一些“摆UI”的技巧：</p>\n<ul>\n<li>有相同材质和纹理的UI元素是可以Batch的，可以Batch的UI上下叠在一块不会影响性能，但是如果不能Batch的UI元素叠在一块，就会增加Drawcall开销。</li>\n<li>要注意UI元素间的层叠关系，建议用“T”工具查看其矩形大小，因为有些图片透明，但是却叠在其它UI上面了，然后又无法Batch的话，就会无故多许多Drawcall；</li>\n<li>UI中出现最多的就是img与Text组件，当Text叠在img上面（如Button)，然后Text上又叠了一个图片时，就会至少多2个Drawcall，可以考虑将字体直接印在下面的图片上；</li>\n<li>有些情况可以考虑人为增加层级从而减少Drawcall，比如一个Text的层级为0，另一个可Batch的Text叠在一个图片A上，层级为1，那此时2个Text因为层级不同会安排2个Drawcall，但如果在第一个Text下放一个透明的图片（与图片A可Batch），那两个Text的层级就一致了，Drawcall就可以减少一个。</li>\n</ul>\n","text":"总结提取自uwa4d的文章：https://edu.uwa4d.com/course-intro/0/126 影响DrawCall的元素有三点：Depth值，Material，Texture。 Depth值： 需要按照Hierarchy面板的节点顺序，从上到下进行Depth分析。...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"Unity","slug":"Unity","count":5,"path":"api/categories/Unity.json"}],"tags":[{"name":"UI","slug":"UI","count":1,"path":"api/tags/UI.json"},{"name":"优化","slug":"优化","count":1,"path":"api/tags/优化.json"}],"toc":"","author":{"name":"HalfReunion","slug":"blog-author","avatar":"/img/icon/avatar.jpg","link":"/","description":"如无必要，勿增实体","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"小技巧_u3d_C#","uid":"9f9e7828b8716ddb566b45d44fabc1de","slug":"小技巧_u3d_C#","date":"2022-06-28T09:02:08.000Z","updated":"2022-06-28T09:06:21.788Z","comments":true,"path":"api/articles/小技巧_u3d_C#.json","keywords":null,"cover":"/img/background/cover.jpg","text":"1，使用Physics.OverlapSphereNonAlloc，不会像Physics.OverlapSphere那样创建出Collider[]数组出来，它生成的是一个int值类型，这意味着就不会分配内存空间，不会产生GC，很多检测都有NonAlloc，有些情况可以考虑使用这些...","link":"","photos":[],"count_time":{"symbolsCount":898,"symbolsTime":"1 mins."},"categories":[{"name":"Unity","slug":"Unity","count":5,"path":"api/categories/Unity.json"}],"tags":[{"name":"C#","slug":"C","count":5,"path":"api/tags/C.json"}],"author":{"name":"HalfReunion","slug":"blog-author","avatar":"/img/icon/avatar.jpg","link":"/","description":"如无必要，勿增实体","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"ET框架学习_ETBook阅览","uid":"6724ada40863aa20046f27eaed957b7c","slug":"ET框架学习-ETBook阅览","date":"2022-06-28T05:35:40.000Z","updated":"2022-06-29T04:00:27.118Z","comments":true,"path":"api/articles/ET框架学习-ETBook阅览.json","keywords":null,"cover":"/img/background/cover.jpg","text":"加了ET群很久，一直只是看群里的人聊天谈地，clone了ET框架很长时间，也没有怎么看过，所以这次想先从ETBook开始看起，认识一下这个框架。 ETBook地址:http://etgame.cn/pages/a2f161/ 在这次的ETBook阅读的同时，我也会同步看烟雨迷离半...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[{"name":"通用","slug":"通用","count":1,"path":"api/categories/通用.json"}],"tags":[{"name":"探索发现","slug":"探索发现","count":2,"path":"api/tags/探索发现.json"},{"name":"C#","slug":"C","count":5,"path":"api/tags/C.json"},{"name":"ET框架","slug":"ET框架","count":1,"path":"api/tags/ET框架.json"}],"author":{"name":"HalfReunion","slug":"blog-author","avatar":"/img/icon/avatar.jpg","link":"/","description":"如无必要，勿增实体","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}
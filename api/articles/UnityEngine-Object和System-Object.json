{"title":"UnityEngine.Object和System.Object","uid":"0eeec1440f5c3f42f857474d88fef113","slug":"UnityEngine-Object和System-Object","date":"2022-06-29T03:32:19.000Z","updated":"2022-06-29T03:35:50.893Z","comments":true,"path":"api/articles/UnityEngine-Object和System-Object.json","keywords":null,"cover":"/img/background/cover.jpg","content":"<p>引子</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span>Empty<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> go <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">GameObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"goodBoy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n<span class=\"token function\">DestroyImmediate</span><span class=\"token punctuation\">(</span>go<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngo <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>go<span class=\"token punctuation\">)</span> s <span class=\"token operator\">+=</span> <span class=\"token string\">\"A\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>go <span class=\"token keyword\">is</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> s <span class=\"token operator\">+=</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">;</span>\n        \n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>go <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> s <span class=\"token operator\">+=</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>System<span class=\"token punctuation\">.</span>Object<span class=\"token punctuation\">)</span>go <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> s <span class=\"token operator\">+=</span> <span class=\"token string\">\"D\"</span><span class=\"token punctuation\">;</span>\n\nDebug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>最后输出AC。</p>\n<p>首先而System.Object的&#x3D;&#x3D;null是判断是否为空指针，</p>\n<p>而UnityEngine.Object的”&#x3D;&#x3D;”是做过操作符重载的，当然也重载了≠。</p>\n<p>UnityEngine.Object的&#x3D;&#x3D;会调用以下的片段。</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">CompareBaseObjects</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> lhs<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> rhs<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//强转为System.object</span>\n\t<span class=\"token comment\">//操作符左边的值是否为null</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> flag <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">object</span><span class=\"token punctuation\">)</span>lhs <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//操作符右边的值是否为null</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> flag2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">object</span><span class=\"token punctuation\">)</span>rhs <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//都为null 返回true</span>\n\t<span class=\"token comment\">//此处说明，如果C#方面的引用已被置为空引用,那游戏对象肯定不存在.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag2 <span class=\"token operator\">&amp;&amp;</span> flag<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\t\t\t\t\t\t\n\t\t\t\t\t\t \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag2<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token function\">IsNativeObjectAlive</span><span class=\"token punctuation\">(</span>lhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token function\">IsNativeObjectAlive</span><span class=\"token punctuation\">(</span>rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\t\t\t\t\t  \n\t<span class=\"token comment\">//（通过对GUID和LocalID的计算，得到全局唯一的m_InstanceID）</span>\n\t<span class=\"token comment\">// 对比二者的m_InstanceID</span>\n    <span class=\"token keyword\">return</span> lhs<span class=\"token punctuation\">.</span>m_InstanceID <span class=\"token operator\">==</span> rhs<span class=\"token punctuation\">.</span>m_InstanceID<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>另一段是</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">IsNativeObjectAlive</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span><span class=\"token function\">GetCachedPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> IntPtr<span class=\"token punctuation\">.</span>Zero<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//判断对象是否派生自MonoBehaviour 或者 ScriptableObject</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o <span class=\"token keyword\">is</span> <span class=\"token class-name\">MonoBehaviour</span> <span class=\"token operator\">||</span> o <span class=\"token keyword\">is</span> <span class=\"token class-name\">ScriptableObject</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//判断InstanceID还存不存在</span>\n<span class=\"token keyword\">return</span> <span class=\"token function\">DoesObjectWithInstanceIDExist</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span><span class=\"token function\">GetInstanceID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>得出结论：对于被Destory掉了的UnityEngine.Object对象（底层C++对象），上面挂载的代码已经不会继续执行，C#方面的引用变量是否置为空引用已经无关紧要。</p>\n<p>所以Unity重写了UnityEngine.Object的判空，只判断UnityEngine.Object是否被销毁（注意这个销毁让UnityEngine.Object不能继续执行它上面的代码），而不是C#引用是否被置为null。</p>\n<p>题外话：像是？和？？都是跟System.Object靠边的，慎用在UnityEngine.Object上。</p>\n<p>对于UnityEngine.Object被销毁后，C#层面的引用几时会置为空引用和实例几时被GC掉，这个有待考据。</p>\n","text":"引子 string s = string.Empty; var go = new GameObject(\"goodBoy\"); DestroyImmediate(go); go = null; if (!go) s += \"A\"; if (go is null) s += \"B\"...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"Unity","slug":"Unity","count":5,"path":"api/categories/Unity.json"}],"tags":[{"name":"C#","slug":"C","count":5,"path":"api/tags/C.json"},{"name":"基础","slug":"基础","count":1,"path":"api/tags/基础.json"}],"toc":"","author":{"name":"HalfReunion","slug":"blog-author","avatar":"/img/icon/avatar.jpg","link":"/","description":"如无必要，勿增实体","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"ET框架学习_ETBook阅览(慢慢更)","uid":"ce2b5aade03ea809a40872ba12728878","slug":"ET框架学习-ETBook阅览","date":"2022-06-30T04:24:40.000Z","updated":"2022-06-30T04:25:00.655Z","comments":true,"path":"api/articles/ET框架学习-ETBook阅览.json","keywords":null,"cover":"/img/background/cover.jpg","text":"加了ET群很久，一直只是看群里的人聊天谈地，clone了ET框架很长时间，也没有怎么看过，所以这次想先从ETBook开始看起，认识一下这个框架。 ETBook地址:http://etgame.cn/pages/a2f161/ 在这次的ETBook阅读的同时，我也会同步看烟雨迷离半...","link":"","photos":[],"count_time":{"symbolsCount":"9.8k","symbolsTime":"9 mins."},"categories":[{"name":"通用","slug":"通用","count":1,"path":"api/categories/通用.json"}],"tags":[{"name":"探索发现","slug":"探索发现","count":2,"path":"api/tags/探索发现.json"},{"name":"C#","slug":"C","count":5,"path":"api/tags/C.json"},{"name":"ET框架","slug":"ET框架","count":1,"path":"api/tags/ET框架.json"}],"author":{"name":"HalfReunion","slug":"blog-author","avatar":"/img/icon/avatar.jpg","link":"/","description":"如无必要，勿增实体","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"小技巧_u3d_C#","uid":"9f9e7828b8716ddb566b45d44fabc1de","slug":"小技巧_u3d_C#","date":"2022-06-28T09:02:08.000Z","updated":"2022-06-28T09:06:21.788Z","comments":true,"path":"api/articles/小技巧_u3d_C#.json","keywords":null,"cover":"/img/background/cover.jpg","text":"1，使用Physics.OverlapSphereNonAlloc，不会像Physics.OverlapSphere那样创建出Collider[]数组出来，它生成的是一个int值类型，这意味着就不会分配内存空间，不会产生GC，很多检测都有NonAlloc，有些情况可以考虑使用这些...","link":"","photos":[],"count_time":{"symbolsCount":898,"symbolsTime":"1 mins."},"categories":[{"name":"Unity","slug":"Unity","count":5,"path":"api/categories/Unity.json"}],"tags":[{"name":"C#","slug":"C","count":5,"path":"api/tags/C.json"}],"author":{"name":"HalfReunion","slug":"blog-author","avatar":"/img/icon/avatar.jpg","link":"/","description":"如无必要，勿增实体","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}
{"title":"制作一个跑酷系统","uid":"0b6ba2c8e01bb1370597130d76cb280b","slug":"制作一个跑酷系统","date":"2022-06-26T11:44:10.000Z","updated":"2022-06-26T11:47:01.804Z","comments":true,"path":"api/articles/制作一个跑酷系统.json","keywords":null,"cover":null,"content":"<h1 id=\"制作跑酷系统\"><a href=\"#制作跑酷系统\" class=\"headerlink\" title=\"制作跑酷系统\"></a>制作跑酷系统</h1><p>1，人物控制和相机控制</p>\n<p>1：控制相机与角色的偏移</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\">transform<span class=\"token punctuation\">.</span>position <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vector3</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span> followTarget<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>2：让相机以角色为中心点，以一个圆为周期转动。</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\">\ntransform<span class=\"token punctuation\">.</span>position <span class=\"token operator\">=</span> Quaternion<span class=\"token punctuation\">.</span><span class=\"token function\">Euler</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vector3</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> followTarget<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">;</span>\ntransform<span class=\"token punctuation\">.</span>rotation <span class=\"token operator\">=</span> Quaternion<span class=\"token punctuation\">.</span><span class=\"token function\">Euler</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>3：移动和根据相机位置调整方位</p>\n<p>知识点 : 四元数 * 向量 &#x3D; 旋转后的向量</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//监控按键 0渐变为1或者-1</span>\n<span class=\"token class-name\"><span class=\"token keyword\">float</span></span> h <span class=\"token operator\">=</span> Input<span class=\"token punctuation\">.</span><span class=\"token function\">GetAxis</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Horizontal\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">float</span></span> v <span class=\"token operator\">=</span> Input<span class=\"token punctuation\">.</span><span class=\"token function\">GetAxis</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Vertical\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//监控按键的量，有值说明有按键</span>\n<span class=\"token class-name\"><span class=\"token keyword\">float</span></span> moveAmount <span class=\"token operator\">=</span> Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">Clamp01</span><span class=\"token punctuation\">(</span>Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">Abs</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">Abs</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//构建移动向量，注意椭圆映射</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> moveInput <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vector3</span><span class=\"token punctuation\">(</span>\n            h <span class=\"token operator\">*</span> Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">Sqrt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span> Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">Pow</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n            <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> \n            v <span class=\"token operator\">*</span> Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">Sqrt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span> Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">Pow</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>normalized<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//获得相机的旋转量 并乘上移动向量，获得旋转后向量</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> moveDir <span class=\"token operator\">=</span> cameraController<span class=\"token punctuation\">.</span>PlanarRotation <span class=\"token operator\">*</span> moveInput<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//若有按键</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>moveAmount <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> \n        <span class=\"token punctuation\">&#123;</span>   <span class=\"token comment\">//移动</span>\n            transform<span class=\"token punctuation\">.</span>position <span class=\"token operator\">+=</span> moveDir <span class=\"token operator\">*</span> moveSpeed <span class=\"token operator\">*</span> Time<span class=\"token punctuation\">.</span>deltaTime<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//保存转动方向</span>\n\t\t\t\t\t\ttargetRotation <span class=\"token operator\">=</span> Quaternion<span class=\"token punctuation\">.</span><span class=\"token function\">LookRotation</span><span class=\"token punctuation\">(</span>moveDir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         \n        <span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//转动角色朝向</span>\ntransform<span class=\"token punctuation\">.</span>rotation<span class=\"token operator\">=</span> Quaternion<span class=\"token punctuation\">.</span><span class=\"token function\">RotateTowards</span><span class=\"token punctuation\">(</span>\ntransform<span class=\"token punctuation\">.</span>rotation<span class=\"token punctuation\">,</span> targetRotation<span class=\"token punctuation\">,</span> rotationSpeed <span class=\"token operator\">*</span> Time<span class=\"token punctuation\">.</span>deltaTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n<span class=\"token comment\">//设置混合树 </span>\n<span class=\"token comment\">//dampTime: 用 dampTime 长的时间，将 我们设置的叫做  name 的 float类型 的值由 原本的值 改变到给定的 　value 值。</span>\n<span class=\"token comment\">//deltaTime：两次执行该方法的时间间隔。（因为这个方法会每 deltaTime 执行一次，直到 name = value）</span>\nanimator<span class=\"token punctuation\">.</span><span class=\"token function\">SetFloat</span><span class=\"token punctuation\">(</span>Animator<span class=\"token punctuation\">.</span><span class=\"token function\">StringToHash</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NormalAmount\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> moveAmount<span class=\"token punctuation\">,</span><span class=\"token number\">0.2f</span><span class=\"token punctuation\">,</span>Time<span class=\"token punctuation\">.</span>deltaTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre><code> 4：转用CharacterController来控制角色移动，CC自带有胶囊碰撞体。一般来说这类东西的组合是Rb+Collider或者单独一个CC。CC适用于第一人称或者第三人称人物角色控制，但是需要自己写一些东西比如重力。\n</code></pre>\n<ul>\n<li><p>CharacterController和Rb</p>\n<p>  1.Character Controller不是基于物理，没有重力，没有阻力，没有加速度，所有移动都是精确的</p>\n<p>  2.Character Controller可以跨过物体，也就是上台阶，不过会一顿一顿，同是下楼梯需要自己写重力</p>\n<p>  3.Character Controller 不会对 Rigidbody产生反应</p>\n<p>  4.Character Controller自带地面监测，不过好像有BUG，一般还是自己写</p>\n<p>  5Character Controller的移动通过向量控制，自带碰撞监测</p>\n<p>  接着是Rigidbody</p>\n<p>  1.Rigidbody是基于物理的，所以移动会比较平滑自然，但是因为有各种力，所以很难保证精确度</p>\n<p>  2.Rigidbody会对Rigidbody产生反应</p>\n<p>  3.Rigidbody的移动通过力或者速度控制，不加碰撞体就不会产生碰撞</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\">\n<span class=\"token comment\">//transform.position += moveDir * moveSpeed * Time.deltaTime;</span>\n<span class=\"token comment\">//改成</span>\ncharacterController<span class=\"token punctuation\">.</span><span class=\"token function\">Move</span><span class=\"token punctuation\">(</span>moveDir <span class=\"token operator\">*</span> moveSpeed <span class=\"token operator\">*</span> Time<span class=\"token punctuation\">.</span>deltaTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>5：使用Physics物理检测，来检测是否踩在地板上，并且添加重力影响。</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">SerializeField</span></span><span class=\"token punctuation\">]</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> groundCheckRadius<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">SerializeField</span></span><span class=\"token punctuation\">]</span> <span class=\"token class-name\">Vector3</span> groundCheckOffset<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">SerializeField</span></span><span class=\"token punctuation\">]</span> <span class=\"token class-name\">LayerMask</span> groundLayer<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">SerializeField</span></span><span class=\"token punctuation\">]</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> isGround<span class=\"token punctuation\">;</span>\n<span class=\"token function\">GroundCheck</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">//如果踩在地板上</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isGround<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">&#123;</span>\n   ySpeed <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">0.5f</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//添加一个向下的量，用以模拟重力掉落。</span>\n   ySpeed <span class=\"token operator\">+=</span> Physics<span class=\"token punctuation\">.</span>gravity<span class=\"token punctuation\">.</span>y <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> velocity <span class=\"token operator\">=</span> moveDir <span class=\"token operator\">*</span> moveSpeed<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//添加向下的量</span>\nvelocity<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> ySpeed<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//</span>\ncharacterController<span class=\"token punctuation\">.</span><span class=\"token function\">Move</span><span class=\"token punctuation\">(</span>velocity <span class=\"token operator\">*</span> Time<span class=\"token punctuation\">.</span>deltaTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">GroundCheck</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">//射线检测，创建一个球体用来检测</span>\nisGround <span class=\"token operator\">=</span> Physics<span class=\"token punctuation\">.</span><span class=\"token function\">CheckSphere</span><span class=\"token punctuation\">(</span>transform<span class=\"token punctuation\">.</span><span class=\"token function\">TransformPoint</span><span class=\"token punctuation\">(</span>groundCheckOffset<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span>\ngroundCheckRadius<span class=\"token punctuation\">,</span> \ngroundLayer<span class=\"token punctuation\">.</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>2，墙面扫描</p>\n<p>对于不同高度的障碍体，需要使用射线扫描面前的</p>\n<p>3，<strong>Target Matching 目标匹配</strong></p>\n<p>未完待续</p>\n","text":"制作跑酷系统1，人物控制和相机控制 1：控制相机与角色的偏移 transform.position = new Vector3(x,x,x)+ followTarget.position; 2：让相机以角色为中心点，以一个圆为周期转动。 transform.position = ...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"Unity","slug":"Unity","count":2,"path":"api/categories/Unity.json"}],"tags":[{"name":"制作实例","slug":"制作实例","count":1,"path":"api/tags/制作实例.json"},{"name":"动画系统","slug":"动画系统","count":1,"path":"api/tags/动画系统.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%88%B6%E4%BD%9C%E8%B7%91%E9%85%B7%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\">制作跑酷系统</span></a></li></ol>","author":{"name":"HalfReunion","slug":"blog-author","avatar":"/img/icon/avatar.jpg","link":"/","description":"如无必要，勿增实体","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{}}
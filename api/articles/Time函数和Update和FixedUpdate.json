{"title":"Time函数和Update和FixedUpdate","uid":"df72ebc7475da7a2a818b4e6f4f94099","slug":"Time函数和Update和FixedUpdate","date":"2022-06-26T08:17:29.000Z","updated":"2022-06-27T10:54:51.642Z","comments":true,"path":"api/articles/Time函数和Update和FixedUpdate.json","keywords":null,"cover":"/img/background/cover.jpg","content":"<p>Time.timeScale 不会影响Update和LateUpdate的执行速度。</p>\n<p>FixedUpdate是根据Time.time来执行的，所以Time.timeScale会影响到FixedUpdate的执行。</p>\n<p>FixedTimeStep中的设置是指<strong>Time.time的时间变化，如果设置为0.02s，则意味着</strong>Time.timeScale&#x3D;1的情况下，<br><strong>Time.time的值每过0.02秒就调用一次FixedUpdate。</strong></p>\n<p>Time.deltaTime：表示当前时刻到上一帧所经过的秒数，具体值和当前游戏的帧数有关。<br>Time.deltaTime的值在update上 &#x3D; 1&#x2F;帧率 * Time.timeScale。同时也是Time.time的增量值。 </p>\n<p>所以在Update中进行物体移动的话，需要Time.deltaTime * speed * Vector3方向向量,相当于每秒往Vector3方向移动speed距离。</p>\n<hr>\n<p>FixedUpdate，固定的一个时间频率去调整； </p>\n<p>Update，根据系统性能的FPS速率有影响关系；</p>\n<p>关于上两条的一些证明</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">FixedUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这在是第\"</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">\"帧\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        time <span class=\"token operator\">+=</span> Time<span class=\"token punctuation\">.</span>deltaTime<span class=\"token punctuation\">;</span>\n        Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"时间：\"</span> <span class=\"token operator\">+</span> time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面的time值始终是以0.02的量去增长。</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">FixedUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tDebug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"FixedUpdate realTime: \"</span> <span class=\"token operator\">+</span> Time<span class=\"token punctuation\">.</span>realtimeSinceStartup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tDebug<span class=\"token punctuation\">.</span><span class=\"token function\">LogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Update realTime: \"</span> <span class=\"token operator\">+</span> Time<span class=\"token punctuation\">.</span>realtimeSinceStartup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>经此测试可发现，在帧率较低的情况下，FixedUpdate并不是间隔0.02秒才调用一次，有可能在Update前调用多次，间隔的时间也不一定，当我们设置FixedUpdate的步长为0.02秒（50FPS）时，设置刷新的频率为30FPS，FixedUpdate每秒的调用次数势必要多于Update。</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">SerializeField</span></span><span class=\"token punctuation\">]</span>\n <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> time <span class=\"token operator\">=</span> <span class=\"token number\">0f</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">SerializeField</span></span><span class=\"token punctuation\">]</span>\n <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> Fixedtime <span class=\"token operator\">=</span> <span class=\"token number\">0f</span><span class=\"token punctuation\">;</span>\n<span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">FixedUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>time <span class=\"token operator\">>=</span> <span class=\"token number\">1.0f</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"FixedUpdate realTime: \"</span> <span class=\"token operator\">+</span> Time<span class=\"token punctuation\">.</span>realtimeSinceStartup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"FixedUpdate deltaTime: \"</span> <span class=\"token operator\">+</span> Time<span class=\"token punctuation\">.</span>deltaTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Fixedtime <span class=\"token operator\">+=</span> Time<span class=\"token punctuation\">.</span>deltaTime<span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>time <span class=\"token operator\">>=</span> <span class=\"token number\">1.0f</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        time <span class=\"token operator\">+=</span> Time<span class=\"token punctuation\">.</span>deltaTime<span class=\"token punctuation\">;</span>\n        \n        Debug<span class=\"token punctuation\">.</span><span class=\"token function\">LogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Update realTime: \"</span> <span class=\"token operator\">+</span> Time<span class=\"token punctuation\">.</span>realtimeSinceStartup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>验证两者对于真实时间的联系，设置游戏帧率为10帧，在经过1秒后，二者的增量几乎一致。</p>\n<p><img src=\"/img/article/API_TIME_FIX_UPDATE/1.png\" alt=\"image\"></p>\n<p>已知，Update的调用次数为1秒钟调用帧数次，FixedUpdate设置的步长为0.02。则1&#x2F;0.02 &#x3D; 50FPS。</p>\n<p><img src=\"/img/article/API_TIME_FIX_UPDATE/2.png\" alt=\"image\"></p>\n<p>所以说FixedUpdate固定时间频率是指，会在1秒内调用 （<strong>1&#x2F;设置的步长）</strong> 次FixedUpdate，而不一定是经过真实时间里 <strong>设置的Fixed Step</strong>  秒就调用1次，两次FixedUpdate调用的间隔其实是Time.time经过 <strong>设置的步长</strong>。</p>\n<p>而Update则是根据游戏内的帧率时刻浮动来决定执行次数。</p>\n<p>所以，FixedUpdate除了用来处理物理逻辑之外并不适合处理其他模块的逻辑。</p>\n<p>因为它是用来处理物理模拟的，更重要的是它并非根据真实时间的间隔执行，而只是有一个固定的量。</p>\n<h2 id=\"关于为何要推荐在FixedUpdate处理物理逻辑：\"><a href=\"#关于为何要推荐在FixedUpdate处理物理逻辑：\" class=\"headerlink\" title=\"关于为何要推荐在FixedUpdate处理物理逻辑：\"></a>关于为何要推荐在FixedUpdate处理物理逻辑：</h2><p>在物理模拟中，保证一个固定的增量时间是十分重要的。这是因为在游戏引擎进行物理模拟时要使用数值积分，而作为最简单的数值积分方法——欧拉法在游戏引擎中大量使用。而在游戏引擎的物理模拟中，一个不稳定的增量时间可能导致很多和预期相悖的结果。</p>\n<p>固定的增量时间作为一个常量参数传递给物理模拟模块，这样我们就能够保证物理模拟的增量时间固定，同时还能将物理模拟的更新频率和游戏引擎的更新频率进行解耦——物理的模拟不受引擎的更新频率影响，无论游戏的更新频率是多少，传递给物理模拟的增量时间都是一个常量。</p>\n<p>OnTrigger，OnCollision系列和FixedUpdate都依赖物理步，也就是<strong>Fixed Step</strong>来触发。</p>\n<p>而如果将输入检测或者需要每帧检测的逻辑放入物理步中判断就会出错。</p>\n<hr>\n<p>Time.timeScale 会影响Time.Time，比如Time.timeScale ＝ 2的话，那么Time.time的增长速度也会变成2倍速度。</p>\n<p>如果你想取到游戏的实际时间，那么使用Time.timeSinceLevelLoad就可以，前提是必须在**Awake()<strong>方法以后再取，如果在</strong>Awake()**方法里面取Time.realtimeSinceStartup会取出一个错误的值，在Start方法里面取的话就正常了。</p>\n<p><strong>总之一句话Time.timeScale影响的是Unity的游戏时间缩放比例。</strong></p>\n<p><strong>Unity里面所有跟时间有关系的东西都是根据timeScale来演算的。</strong></p>\n<p>仔细想想现在的手游就是个 动画 和 粒子技能特效 还有UI位移特效，所以改他们的速度直接用Time.timeScale就可以完成。还有一个重要的东西就是人物移动 或者 技能移动的速度了，</p>\n<p> 根据时间的公式，时间 ＝ 路程\\速度 ，比如角色从起点跑到中间的一个预期时间， 或者一个技能的火球从攻击到打中目标的预期时间。 凡是处理时间的东东全用Time.time 这样就可以完美让Time.timeScale控制你的游戏了。</p>\n<hr>\n<p>有关于LateUpdate的操作，事关摄像机跟随游戏对象时会发生抖动的阐述。</p>\n<p>画面抖动的原因是因为摄像机位置更新与目标(抖动对象)位置更新不同步造成的.</p>\n<h1 id=\"结论：\"><a href=\"#结论：\" class=\"headerlink\" title=\"结论：\"></a>结论：</h1><p>1）Time.time的每帧的增量即为Time.deltaTime</p>\n<p>2）<strong>Time.deltaTime和Time.time</strong>都受Time.timeScale影响，且是正比的关系</p>\n<p>3）Time.deltaTime的最大调用时间间隔为Time面板的 <strong>Maximum Allowed Timestep</strong> 值</p>\n<p>4）Time.realtimeSinceStartup不受Time.timeScale影响，它为真实的游戏时间</p>\n<p>5）Update的调用不受Time.timeScale影响，它的调用间隔和真实的上一帧调用时间有关</p>\n<p>6）LateUpdate的调用同Update，不受Time.timeScale影响（截图时忘了开打印，实际同Update）</p>\n<p>7）FixedUpdate的调用受Time.timeScale影响，且成正比，当Time.timeScale &#x3D; 0时，FixedUpdate不被调用</p>\n<p>8）FixedUpdate的调用时间间隔为Time面板的 Fixed Timestep 值，受Time.time影响。</p>\n<ol start=\"9\">\n<li>FixedUpdate在每帧的调用不固定，有可能执行多次，有可能不执行。</li>\n</ol>\n<h1 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h1><p>1）想让游戏对象受Time.timeScale（子弹时间）影响时，则将游戏对象和 <strong>Time.time &#x2F; Time.deltaTime</strong> 做关联计算并放在Update中更新，或者将它放在<strong>FixedUpdate中做更新（使用Time.fixeddeltaTime，或按帧计算</strong>）</p>\n<p>2）想让游戏对象不受Time.timeScale（子弹时间）影响时，则将游戏对象和 <strong>Time.realtimeSinceStartup</strong> 做关联计算并放在Update中更新</p>\n<p>3）Unity中默认<strong>Animation、Animator和粒子特效</strong>都是受Time.timeScale（子弹时间）影响的</p>\n<p>4）想让Animator不受Time.timeScale（子弹时间）影响时，可以将它的更新模式改为：<strong>animator.updateMode &#x3D; AnimatorUpdateMode.UnscaledTime;</strong></p>\n<p>5）想让Animation或粒子特效不受Time.timeScale（子弹时间）影响时，要用Time.realtimeSinceStartup做采样计算，并对它们做更新</p>\n<hr>\n<h3 id=\"额外\"><a href=\"#额外\" class=\"headerlink\" title=\"额外\"></a>额外</h3><p>部分内容的链接<br><a href=\"https://blog.csdn.net/cube454517408/article/details/107496353\">https://blog.csdn.net/cube454517408/article/details/107496353</a></p>\n<p>关于Time相关的例子：</p>\n<p>1，子弹时间（缓慢的粒子特效 或者 只有自己不受影响</p>\n<p>2，定时回调系统</p>\n<p>3，暂停游戏</p>\n<p>设置 Time.timeScale ＝ 0；即可让游戏暂停。 其实我们暂停的主要是 人物动画，还有技能特效，比如一个火球打了一半。</p>\n<p>UI方面往往我们不希望暂停，比如暂停界面 有一些UI位移动画或者帧动画， 或者最起码要有个“取消暂停的按钮” 吧。 总不能游戏暂停了我点击按钮，按钮的点击动画或者特效也暂停了吧。</p>\n<p>所有的动画都是基于时间来的，因为Time.timeScale ＝ 0了，所以Time.time也就不会在变化了。换句话来说如果游戏暂停以后想在暂停界面上继续播放一些不受Time.timeScale 影响的动画，那么我们就需要用到Time.realtimeSinceStartup。</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">AnimationState</span> animState <span class=\"token operator\">=</span> animation<span class=\"token punctuation\">[</span>clipName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当前动画状态</span>\nanimation<span class=\"token punctuation\">.</span><span class=\"token function\">Play</span><span class=\"token punctuation\">(</span>clipName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//播放动画</span>\ncurTime <span class=\"token operator\">=</span> Time<span class=\"token punctuation\">.</span>realtimeSinceStartup<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当前真实时间</span>\ndeltaTime <span class=\"token operator\">=</span> curTime <span class=\"token operator\">-</span> lastFrameTime<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 此帧与上一帧的时间间隔</span>\nlastFrameTime <span class=\"token operator\">=</span> curTime<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 记录此帧时间，下一帧用</span>\nprogressTime <span class=\"token operator\">+=</span> deltaTime<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 动画已播放时间</span>\nanimState<span class=\"token punctuation\">.</span>normalizedTime <span class=\"token operator\">=</span> progressTime <span class=\"token operator\">/</span> currState<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 动画规范化时间[0-1]</span>\nanimation<span class=\"token punctuation\">.</span><span class=\"token function\">Sample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 在当前状态对动画进行采样，当你想显式设置动画状态并且对它取样的时候使用</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"附录：\"><a href=\"#附录：\" class=\"headerlink\" title=\"附录：\"></a>附录：</h2><p> <strong>只读</strong>:</p>\n<p>Time.time：表示从游戏开发到现在的时间，会随着游戏的暂停而停止计算。<br>Time.deltaTime：表示从上一帧到当前帧的时间，以秒为单位。<br>Time.unscaleddeltaTime：不考虑timescale时候与deltaTime相同，若timescale被设置，则无效。<br>Time.timeSinceLevelLoad：表示从当前Scene开始到目前为止的时间，也会随着暂停操作而停止。<br>Time.unscaledTime：不考虑timescale时候与time相同，若timescale被设置，则无效。<br>Time.fixeddeltaTime：表示以秒计间隔，在物理和其他固定帧率进行更新，在Edit-&gt;ProjectSettings-&gt;Time的Fixed Timestep可以自行设置。<br>Time.realtimeSinceStartup： 表示自游戏开始后的总时间，即使暂停也会不断的增加。<br>Time.frameCount：总帧数</p>\n<p> <strong>可读可写</strong>:</p>\n<p>Time.fixedTime：表示以秒计游戏开始的时间，固定时间以定期间隔更新（相当于fixeddeltaTime）直到达到time属性。<br>Time.SmoothdeltaTime：表示一个平稳的deltaTime，根据前 N帧的时间加权平均的值。<br>Time.timeScale：时间缩放，默认值为1，若设置&lt;1，表示时间减慢，若设置&gt;1,表示时间加快，可以用来加速和减速游戏，非常有用。<br>Time.captureFramerate：表示设置每秒的帧率，然后不考虑真实时间。 </p>\n<hr>\n<p>帧数显示器和设置游戏整体帧率的代码：</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FPS</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> m_LastUpdateShowTime <span class=\"token operator\">=</span> <span class=\"token number\">0f</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//上一次更新帧率的时间;  </span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> m_UpdateShowdeltaTime <span class=\"token operator\">=</span> <span class=\"token number\">0.01f</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//更新帧率的时间间隔;  </span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> m_FrameUpdate <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//帧数;  </span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> m_FPS <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Awake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token comment\">//设置帧率</span>\n        Application<span class=\"token punctuation\">.</span>targetFrameRate <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// Use this for initialization  </span>\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        m_LastUpdateShowTime <span class=\"token operator\">=</span> Time<span class=\"token punctuation\">.</span>realtimeSinceStartup<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// Update is called once per frame  </span>\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        m_FrameUpdate<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Time<span class=\"token punctuation\">.</span>realtimeSinceStartup <span class=\"token operator\">-</span> m_LastUpdateShowTime <span class=\"token operator\">>=</span> m_UpdateShowdeltaTime<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            m_FPS <span class=\"token operator\">=</span> m_FrameUpdate <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>Time<span class=\"token punctuation\">.</span>realtimeSinceStartup <span class=\"token operator\">-</span> m_LastUpdateShowTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            m_FrameUpdate <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            m_LastUpdateShowTime <span class=\"token operator\">=</span> Time<span class=\"token punctuation\">.</span>realtimeSinceStartup<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnGUI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">GUIStyle</span> labelFont <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">GUIStyle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        labelFont<span class=\"token punctuation\">.</span>fontSize <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n        GUI<span class=\"token punctuation\">.</span><span class=\"token function\">Label</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Rect</span><span class=\"token punctuation\">(</span>Screen<span class=\"token punctuation\">.</span>width <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"FPS: \"</span> <span class=\"token operator\">+</span> m_FPS<span class=\"token punctuation\">,</span> labelFont<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>关于deltaTime比较粗浅的解释：<a href=\"https://www.cnblogs.com/jiangxiaoming/p/12983807.html\">https://www.cnblogs.com/jiangxiaoming/p/12983807.html</a></p>\n","feature":false,"text":"Time.timeScale 不会影响Update和LateUpdate的执行速度。 FixedUpdate是根据Time.time来执行的，所以Time.timeScale会影响到FixedUpdate的执行。 FixedTimeStep中的设置是指Time.time的时间变化...","link":"","photos":[],"count_time":{"symbolsCount":"6.7k","symbolsTime":"6 mins."},"categories":[{"name":"Unity","slug":"Unity","count":5,"path":"api/categories/Unity.json"}],"tags":[{"name":"Api","slug":"Api","count":1,"path":"api/tags/Api.json"},{"name":"探索发现","slug":"探索发现","count":2,"path":"api/tags/探索发现.json"},{"name":"C#","slug":"C","count":5,"path":"api/tags/C.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B3%E4%BA%8E%E4%B8%BA%E4%BD%95%E8%A6%81%E6%8E%A8%E8%8D%90%E5%9C%A8FixedUpdate%E5%A4%84%E7%90%86%E7%89%A9%E7%90%86%E9%80%BB%E8%BE%91%EF%BC%9A\"><span class=\"toc-text\">关于为何要推荐在FixedUpdate处理物理逻辑：</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%BB%93%E8%AE%BA%EF%BC%9A\"><span class=\"toc-text\">结论：</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93%EF%BC%9A\"><span class=\"toc-text\">总结：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%9D%E5%A4%96\"><span class=\"toc-text\">额外</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%99%84%E5%BD%95%EF%BC%9A\"><span class=\"toc-text\">附录：</span></a></li></ol>","author":{"name":"HalfReunion","slug":"blog-author","avatar":"/img/icon/avatar.jpg","link":"/","description":"如无必要，勿增实体","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"制作一个跑酷系统","uid":"0b6ba2c8e01bb1370597130d76cb280b","slug":"制作一个跑酷系统","date":"2022-06-26T11:44:10.000Z","updated":"2022-06-28T08:47:34.157Z","comments":true,"path":"api/articles/制作一个跑酷系统.json","keywords":null,"cover":"/img/background/cover.jpg","text":"1，人物控制和相机控制1：控制相机与角色的偏移transform.position = new Vector3(x,x,x)+ followTarget.position; 2：让相机以角色为中心点，以一个圆为周期转动。 transform.position = Quaterni...","link":"","photos":[],"count_time":{"symbolsCount":"8.4k","symbolsTime":"8 mins."},"categories":[{"name":"Unity","slug":"Unity","count":5,"path":"api/categories/Unity.json"}],"tags":[{"name":"C#","slug":"C","count":5,"path":"api/tags/C.json"},{"name":"制作实例","slug":"制作实例","count":1,"path":"api/tags/制作实例.json"},{"name":"动画系统","slug":"动画系统","count":1,"path":"api/tags/动画系统.json"}],"author":{"name":"HalfReunion","slug":"blog-author","avatar":"/img/icon/avatar.jpg","link":"/","description":"如无必要，勿增实体","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{}}
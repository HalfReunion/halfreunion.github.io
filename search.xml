<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>对UGUI系统的理解</title>
      <link href="//post/%E5%AF%B9UGUI%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%90%86%E8%A7%A3.html"/>
      <url>//post/%E5%AF%B9UGUI%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%90%86%E8%A7%A3.html</url>
      
        <content type="html"><![CDATA[<p><strong>集合看过的资料，也有混合一些理解，权当个记录的地方。</strong><br><strong>大部分以luzexi大佬的笔记做导引和总结</strong></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>首先UGUI建立在Mesh网格之上，UI元素的实例化都是通过构建网格实现。<br>所以当想显示一个图片，实现按钮等都会构建Mesh，然后Mesh绑定材质球，在材质球里放图片。无论是UI系统还是场景人物模型，都是遵循渲染原理和CPU工作原理，即GPU收集需要渲染的信息交于GPU进行渲染。</p><p>Unity的动态合批原理是将相同的材质球(Material,参数也要一样:Shader和Textrue)进行网格的合并。</p><p>所以这类UI元素的合批遵循就是下面的规则，将相同图片，相同Shader的材质球指向一个材质球，并把网格根据一些合并规则合并起来，这样就生成了几个合并后的网格+几个相同图片相同Shader的材质球，而每次动态合批都有一定代价，比如合批后会new出一个合批后的新材质球。<br>所谓图集概念由此而生，将多张图片放在同一张图片上，使得图片和材质球不需要重复绘制，只要改变Mesh的UV坐标来进行纹理映射即可。</p><p>UGUI会尽量使用动态合批来减少DC对CPU的消耗。</p><p>具体合并规则可以看<a href="https://halfreunion.github.io/post/UI%E7%9A%84DrawCall%E8%AE%A1%E7%AE%97%E3%80%82">https://halfreunion.github.io/post/UI%E7%9A%84DrawCall%E8%AE%A1%E7%AE%97。</a></p><p>Canvas就是渲染UI元素的组件，Canvas执行一次合批操作，会将其子节点的UI元素（不包括Canvas）进行合批，并将信息递交给GPU后生成DC。<br>而当UI元素发生变化时，也会进行一次上面的操作，因为UI元素发生变化而重新去计算Graphic组件（Graphic是UGUI的核心组成部分，是一个抽象类，为 Canvas 系统提供可绘制几何图形的所有 Unity UI C# 类的基类。）的布局和网格情况的过程，被称为Rebuild。</p><p>避免过多Rebuild也是优化的关键。</p><hr><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h3 id="1-Canvas-组件"><a href="#1-Canvas-组件" class="headerlink" title="1. Canvas 组件"></a>1. Canvas 组件</h3><p>Canvas就是渲染UI元素的组件，比较重要的是参数是RenderMode,</p><ol><li>Overlay模式，不以Camera为基准</li><li>Camera模式，以Camera为基准</li><li>WorldSpace，以3D世界为标准</li></ol><p>Overlay通常处于屏幕的最前端，覆盖其他两个模式的UI元素，没有3D效果，多个该模式的Canvas同时存在的情况下，Sort Order参数越大越靠前渲染。</p><p>Camera模式基于Camera的平面透视，渲染布局依赖绑定的Camera，该模式可以让更多非UI元素加入。<br>是实际上UI系统里最常用的模式。<br>UI元素的z轴若不为0，会单独拿出来渲染而不会参与合批。</p><p>WorldSpace，基于Camera的视椎体透视，它将UI元素当做3D物体一样处理，当UI物体出现在Camera视野中时，相当于渲染了一个普通3D物体，除了普通渲染Canvas外还会对常经理的UI进行合批处理。</p><p><em><strong>三种模式混合的情况</strong></em></p><p><strong>Camera模式和WorldSpace模式的RenderCamera都是同一相机：</strong></p><p>SortingLayer和Order in Layer相同的情况下</p><p>Overlay→Camera→WorldSpace</p><p>SortingLayer和Order in Layer不同的情况下：</p><p>Overlay→SortingLayer→Order in Layer </p><p>Camera模式的Canvas，会根据上面的顺序，覆盖值比它小的WorldSpace，如果它的值比WorldSpace还小，则会置于WorldSpace的底下作为背景。</p><p>例子：</p><p>下面带有“启动”界面是WorldSpace，背景图是的RenderMode是Camera，而左边包括好友的界面是Overlay。</p><p>其中背景图和WorldSpace的UI所用的渲染相机都是同一个，其中背景图Canvas和WorldSpace的Canvas的SortingLayer都是Default，但是Order in Layer的值是背景图&lt;WorldSpace。</p><p><img src="/img/article/UGUI_GEN/0.png" alt="image"></p><p><strong>Camera和WorldSpace的RenderCamera都是不同相机的情况下：</strong></p><p>渲染相机不同的情况下，Overlay→根据Camera的Depth值，越大越前面。</p><p>RenderMode&#x3D;Overlay模式下， 多个Canvas并列：以Sort Order排列，值越大渲染在越前面。</p><p>RenderMode&#x3D;Camera模式下，渲染相机都不同，多个Canvas并列情况下，以Camera的Depth值排序，越大渲染在越前面。</p><p>RenderMode&#x3D;Camera模式下，渲染相机都是同个相机，多个Canvas并列情况下：先以SortingLayer排序，再以Order in Layer排序，越大渲染在越前面。</p><p>RenderMode&#x3D;WorldSpace模式下，渲染相机都不同，多个Canvas并列的情况下，Camera的Depth无影响，先以SortingLayer排序，再以Order in Layer排序，越大渲染在越前面。</p><p>RenderMode&#x3D;WorldSpace模式下，渲染相机都相同，多个Canvas并列情况下，先以SortingLayer排序，再以Order in Layer排序，越大渲染在越前面。</p><p><img src="/img/article/UGUI_GEN/1.png" alt="image"></p><h3 id="2-Canvas-Scaler组件"><a href="#2-Canvas-Scaler组件" class="headerlink" title="2. Canvas-Scaler组件"></a>2. Canvas-Scaler组件</h3><p>用来指定画布元素的比例大小，有几个重要参数可选。</p><p>1.Constant Pixel Size：当修改屏幕宽高时，该模式下的UI将不会做大小变化。可以通过调整Scale Factor来调整UI的大小。无论屏幕大小如何，UI 元素都保持相同的像素大小。</p><details><summary>相关参数</summary><ul><li>比较重要的参数<ul><li><p>Scale Factor</p><p>  调整该值可等比缩放大小。</p></li><li><p>Reference Pixels Per Unit</p><p>  Texture Type为Sprite(2D and UI)的图片中,有Pixels Per Unit参数，与这个值相对应，对照两个值等比缩放大小。</p><p>  Reference Pixels Per Unit &#x3D; 100</p><p>  Pixels Per Unit &#x3D; 10</p><p>  Set Native Size ，image 将等比增加十倍大小。</p><p>  缩放后的大小 &#x3D; 原本的Width和Height*(Reference Pixels Per Unit&#x2F;Pixels Per Unit)</p></li></ul></li></ul></details>2.Scale With Screen Size：根据一个参考值来和屏幕分辨率来对UI元素进行缩放的模式。 <details><summary> 比较重要的参数 </summary><ul><li>Screen Match Mode<ul><li><p>MatchWidth Or Height：<br>当实际设备的分辨率和参考分辨率(Reference Resolution)比例相同时，会等比进行缩放。</p><p>若不同时，则会根据MatchWidth Or Height的值对宽高进行一定的权重缩放，0会让<strong>实机分辨率的宽</strong> 扩充至 <strong>参考分辨率的宽度</strong>，然后</p><p>将 <strong>实机分辨率的高</strong> &#x3D; 原实际分辨率的高&#x2F;（实际分辨率的宽度&#x2F;参考分辨率的宽度）</p><p>为1则反过来，即让分辨率的高扩充至参考分辨率的高度，然后</p><p>将 实际分辨率的宽 &#x3D; 原实际分辨率的高&#x2F;（实际分辨率的高度&#x2F;参考分辨率的高度）</p><p>参考分辨率为 600x600，设备实际分辨率为 180x180时，Canvas 的 ScaleXY 正好等于 180&#x2F;600 为 0.3，此时是<strong>等比缩放。</strong> 此时，matchWidthOrHeight 值的变化不会影响结果。</p><p>设备实际分辨率宽高比和参考分辨率宽高比不同时，matchWidthOrHeight 表示<code>宽和高对于最终 Canvas 的 ScaleXY 以及 width/height 的影响程度</code>。</p><p>当 matchWidthOrHeight 为 0时，保持 Canvas.width 为 Reference Resolution.x 不变，缩放值Canvas.scaleXY &#x3D; Screen.width &#x2F; Canvas.width, </p><p>Canvas.height &#x3D; Screen.height &#x2F; Canvas.scaleXY;</p><p>当 matchWidthOrHeight 为 1 时，保持 Canvas.height 为 Reference Resolution.y 不变，缩放值Canvas.scaleXY &#x3D; Screen.height &#x2F; Canvas.height,<br>Canvas.width &#x3D; Screen.width &#x2F; Canvas.scaleXY;</p><p>当matchWidthOrHeight处于<strong>最左边</strong>时，实际设备的屏幕<strong>高度</strong>对于UI大小<strong>完全没有任何影响</strong>，只有实际设备的屏幕宽度会对UI大小产生影响。<code>假设宽度为Reference Resolution宽度的x倍，则UI整体缩放为Reference Resolution状态下的x倍</code>。也就是说只有宽度等于Reference Resolution宽度时，才能做到pixel perfect，否则像素就会有拉伸</p><p>当处于最右边时，与上述情况正好相反，决定整体缩放值的是高度，而宽度则没有任何影响。</p></li><li><p>Expand：<br>相当于设置 Canvas.scaleXY &#x3D; min(Screen.width &#x2F; ReferenceResolution.x, Screen.height &#x2F; ReferenceResolution.y)</p></li><li><p>Shrink：<br>相当于设置 Canvas.scaleXY &#x3D; max(Screen.width &#x2F; ReferenceResolution.x, Screen.height &#x2F; ReferenceResolution.y)</p></li></ul></li></ul></details><h3 id="3-Graphic-Raycaster组件"><a href="#3-Graphic-Raycaster组件" class="headerlink" title="3.Graphic Raycaster组件"></a>3.Graphic Raycaster组件</h3><p>基于射线的图形射线投射器，类似的射线组件有Physics Raycaster和Physics Raycaster2D，他们都依赖Camera组件。创建Canvas时一般会自带有这个组件，若没有这个组件则没办法响应点击等事件。Graphic Raycaster本身只会检测Canvas里的元素。因为GraphicRaycaster原本就在Canvas上了，所以在UI挂载的脚本上继承IEventSystemHandler事件接口，就能接收到回调，</p><p>对于Graphic Raycaster比较重要的一个结构体是PointerEventData，它存在于EventSystems命名空间下，里面存储了当前鼠标（触点）的各项数值，例如鼠标的当前位置，点击的位置等。投射器的Raycast方法根据PointerEventData来发射射线，依靠这项原理可以解决鼠标的穿透问题。<br>例子：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">CheckGuiRaycastObjects</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span><span class="token comment">//构建一个关于鼠标点击的结构体</span>        <span class="token class-name">PointerEventData</span> eventData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PointerEventData</span><span class="token punctuation">(</span>events<span class="token punctuation">)</span><span class="token punctuation">;</span>        eventData<span class="token punctuation">.</span>pressPosition <span class="token operator">=</span> Input<span class="token punctuation">.</span>mousePosition<span class="token punctuation">;</span>        eventData<span class="token punctuation">.</span>position <span class="token operator">=</span> Input<span class="token punctuation">.</span>mousePosition<span class="token punctuation">;</span>        <span class="token class-name">List<span class="token punctuation">&lt;</span>RaycastResult<span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>RaycastResult<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>GraphicRaycaster<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Raycast</span><span class="token punctuation">(</span>eventData<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>        Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span>Count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> list<span class="token punctuation">.</span>Count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此外里面还有些可以设置屏蔽对象不参与射线检测的参数，指定阻止对某些layers进行响应等。</p><h3 id="4-EventTrigger"><a href="#4-EventTrigger" class="headerlink" title="4.EventTrigger"></a>4.EventTrigger</h3><p>输入事件触发器，与此脚本绑定的UI物体都可以接受输入事件。<br>这个本身也是个类，它的内部继承了所有派生自IEventSystemHandler的接口，并将继承实现的函数写成虚函数。所以需要像上面的所述Canvas挂载Graphic Raycaster。<br>若要上面的接口运用3D 2D物体元素上，则需要在摄像机上挂载PhysicsRaycaster或者Physics2DRaycaster。</p><h3 id="5-Image组件-RawImage组件"><a href="#5-Image组件-RawImage组件" class="headerlink" title="5.Image组件,RawImage组件"></a>5.Image组件,RawImage组件</h3><p>两个都是UI系统里的主要组件，可以展示图片和图集。<br>Image组件只能展示图集里的图元，因为是图集里的图片可以进行合批。<br>RawImage可以展示单张图片，不能参与合批。<br>一般来说使用RawImage的图片都是因为尺寸过大，参与图集合并会把图集也撑得很大，效率不高，所以干脆直接用RawImage来展示。</p><h3 id="6-Mask组件和RectMask2D组件"><a href="#6-Mask组件和RectMask2D组件" class="headerlink" title="6.Mask组件和RectMask2D组件"></a>6.Mask组件和RectMask2D组件</h3><p>遮挡组件，可以将其子节点下矩形区域外的内容剔除，是滚动窗口中最常用的组件。</p><p>这两种方式的主要是在剔除的方法上有所区别，在实现效果上都是一样的，<br>其中Mask 使用顶点重构的方式剔除矩形区域外的部分（使用了模板测试）<br>而RectMask2D则采用Shader的剔除方式，每个元素都有自己的材质球实例和实例参数。</p><h2 id="源码部分"><a href="#源码部分" class="headerlink" title="源码部分"></a>源码部分</h2><p>UGUI系统大致可以分为3类，分别是输入检测模块，动画，核心渲染。</p><h3 id="输入检测模块"><a href="#输入检测模块" class="headerlink" title="输入检测模块"></a>输入检测模块</h3><p>输入事件可以分为<strong>事件数据模块</strong>，<strong>输入事件捕获模块</strong>，<strong>射线碰撞检测模块</strong>，<strong>事件逻辑处理及回调模块</strong>。<br>EventSystem管理 所有的<strong>输入事件捕获模块</strong>（InputModule）并帧调用Module的执行（Process）</p><p>​调动<strong>射线碰撞检测模块</strong>（Raycasters），为InputModule提供结果（具体的触点所穿透的对象信息）</p><p>​InputModule管理更新EventData判断当前的操作事件，并通知具体的EventSystemHandler 进行逻辑处理。</p><h4 id="事件数据模块"><a href="#事件数据模块" class="headerlink" title="事件数据模块"></a>事件数据模块</h4><p>这部分模块用于存储用户输入信息，包含事件发生时的位置、和事件对应的物体，事件的位移大小，触发事件的输入类型，以及事件的设备信息等。<br>模块的主要作用就是获取数据，提供数据服务。</p><p>这部分模块的基类是<strong>AbstractEventData</strong>，这个抽象基类内容不多，主要是围绕事件数据是否被使用过，有方法和变量描述是否已使用的状态。<br>由它派生出</p><ol><li><strong>BaseEventData</strong>：基础的事件数据基类，提供对事件系统角色的引用(绑定EventSystem)，和使用EventSystem的捕获模块获得当前选中的对象(BaseInputModule)的方法。</li><li><strong>PointerEventData</strong>：点位(指针)事件类型类，这个用处较多。Unity将按下的点位，鼠标或者触摸的点位，是否拖拽，是否移动，接收响应的物体等都存在里面。</li><li><strong>AxisEventData</strong>：滚轮事件数据类，这个代码量较少，只提供滚轮的方向信息。</li></ol><h4 id="输入事件捕获模块"><a href="#输入事件捕获模块" class="headerlink" title="输入事件捕获模块"></a>输入事件捕获模块</h4><p>输入事件捕获模块由四个类组成，BaseInputModule，PointerInputModule，StandaloneInputModule，TouchInputModule，负责引发事件并将其发送到 GameObjects 进行处理。<br>在我看来这部分的理解，应该是</p><p>认识基类拓展出去的方法<br>理清触摸-&gt; 点击 这套流程里输入事件捕获模块做过什么事情。</p><p>一般来说EventSystem下会挂载StandaloneInputModule或者TouchInputModule。</p><p>捕获模块的基类是<strong>BaseInputModule</strong>，继承自EventSystems.UIBehaviour<br>这个基类强依赖于EventSystem类，需要对象挂载EventSystem。提供了一些必要的接口和成员变量。</p><p>里面有几个较为重要的方法可以一提，</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//update每帧都会调用它，最主要的方法，派生类在 Progress 方法中，</span><span class="token comment">//因为鼠标模拟层的原因，触摸需要先进行判断，然后根据判断是否有鼠标（input.mousePresent），进行鼠标事件处理。</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//可用于返回第一个合法的RaycastResult,接收射线检测到的物体各类信息。</span><span class="token keyword">protected</span> <span class="token return-type class-name">RaycastResult</span> <span class="token function">FindFirstRaycast</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>RaycastResult<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//给定两个对象，返回他们最近的共同根物体。</span><span class="token return-type class-name">GameObject</span> <span class="token function">FindCommonRoot</span><span class="token punctuation">(</span><span class="token class-name">GameObject</span> g1<span class="token punctuation">,</span><span class="token class-name">GameObject</span> g2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//当发现新的输入目标时处理正在发送的进入和退出事件，会从PointerEventData参数里找到响应的对象，</span><span class="token comment">//并使用ExecuteEvents.Execute传递事件到对象里执行</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">HandlePointerExitAndEnter</span><span class="token punctuation">(</span><span class="token class-name">PointerEventData</span> currentPointerData<span class="token punctuation">,</span> <span class="token class-name">GameObject</span> newEnterTarget<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//具有给定 ID 的指针是否位于 EventSystem 对象上，这个方法主要由EventSystem.IsPointerOverGameObject调用过来。</span><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">IsPointerOverGameObject</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> pointerId<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由它派生出</p><ol><li><strong>PointerInputModule</strong>：<br>  这部分主要在其基础上扩展了对与点位的输入逻辑，增加了输入类型和状态，也是个抽象类。<br>  比较重要的是定义了鼠标指针的ID，这样可以通过ID来判断是左键还是右键。<pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//建立指针id与PointerEventData数据处理的字典</span><span class="token keyword">protected</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">GetPointerData</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> id<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name">PointerEventData</span> data<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> create<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//获得触摸的PointerEventData信息，触发EventSystem.RaycastAll，将射线信息存入PointerEventData返回</span><span class="token keyword">protected</span> <span class="token return-type class-name">PointerEventData</span> <span class="token function">GetTouchPointerEventData</span><span class="token punctuation">(</span><span class="token class-name">Touch</span> input<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">bool</span></span> pressed<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">bool</span></span> released<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//使用EventSystem的RaycastAll射线，获得射线碰撞的对象，并且返回保存按键数据的MouseState类</span><span class="token keyword">protected</span> <span class="token keyword">virtual</span> <span class="token return-type class-name">MouseState</span> <span class="token function">GetMousePointerEventData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//还有ProcessDrag等，判断指针的状态(移动还是拖拽),执行对应方法(HandlePointerExitAndEnter或者直接ExecuteEvents.Execute)</span><span class="token keyword">protected</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ProcessMove</span><span class="token punctuation">(</span><span class="token class-name">PointerEventData</span> pointerEvent<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>由<strong>PointerInputModule</strong>又派生出下面几个部分</p><ol><li><strong>StandaloneInputModule</strong>：<br>最直接的与EventSystem交流的类，EventSystem通过调用同对象下的Module类来调用功能。<br>里面定义了鼠标&#x2F;键盘的输入。</li></ol><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//EventSystem每帧都会调用这个函数</span><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//检测触点，会在对象下挂载一个BaseInput类，这个检测类会调用Input里的各种函数，来得到触点或者鼠标位置之类的东西。</span><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">ProcessTouchEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//处理所有的鼠标事件,先调用GetMousePointerEventData,调用了各种ProcessXXX函数</span><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ProcessMouseEvent</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><strong>TouchInputModule</strong>：<br>和上面的差不多</li></ol><p>期间大量使用了ExecuteEvents.ExecuteHierarchy，ExecuteEvents.Execute，用以传输事件到相应对象里。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">GameObject</span> <span class="token generic-method"><span class="token function">ExecuteHierarchy</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token class-name">GameObject</span> root<span class="token punctuation">,</span> <span class="token class-name">BaseEventData</span> eventData<span class="token punctuation">,</span> <span class="token class-name">EventFunction<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span> callbackFunction<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IEventSystemHandler</span></span><span class="token punctuation">&#123;</span> <span class="token comment">// 获取物体的所有父节点，包括它自己</span>    <span class="token function">GetEventChain</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> s_InternalTransformList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s_InternalTransformList<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token keyword">var</span></span> transform <span class="token operator">=</span> s_InternalTransformList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 对每个父节点包括自己依次执行句柄响应</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">Execute</span><span class="token punctuation">(</span>transform<span class="token punctuation">.</span>gameObject<span class="token punctuation">,</span> eventData<span class="token punctuation">,</span> callbackFunction<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> transform<span class="token punctuation">.</span>gameObject<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="射线碰撞检测模块"><a href="#射线碰撞检测模块" class="headerlink" title="射线碰撞检测模块"></a>射线碰撞检测模块</h4><p>射线碰撞检测模块主要工作是从摄像机的屏幕位置上，做射线碰撞检测并获取碰撞结果，把结果返回给事件处理逻辑类，交由事件处理模块处理事件。<br>主要为3个类，分别作用于2D射线碰撞检测，3D射线碰撞检测，GraphicRaycaster图形射线碰撞测试。</p><p>射线碰撞检测类的基类是<strong>BaseRaycaster</strong>，是1个抽象类</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//最重要的一个抽象方法，用于触发射线功能，PointerEventData用于存储碰撞后的点位信息</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Raycast</span><span class="token punctuation">(</span><span class="token class-name">PointerEventData</span> eventData<span class="token punctuation">,</span> <span class="token class-name">List<span class="token punctuation">&lt;</span>RaycastResult<span class="token punctuation">></span></span> resultAppendList<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//基于排序顺序的射线投射器优先级，仅对图形射线投射器有效。</span><span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> sortOrderPriority<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//基于渲染顺序的射线投射器优先级，仅对图形射线投射器有效。</span><span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> renderOrderPriority<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由此会派生出</p><ol><li><strong>PhysicsRaycaster</strong>：<pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//返回从摄像机通过事件位置的射线，以及沿该射线的近裁剪面和远裁剪面之间的距离。</span><span class="token comment">//可用于判断是否超出摄像机的远近裁剪平面的距离</span><span class="token keyword">protected</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">ComputeRayAndDistance</span><span class="token punctuation">(</span><span class="token class-name">PointerEventData</span> eventData<span class="token punctuation">,</span> <span class="token keyword">ref</span> <span class="token class-name">Ray</span> ray<span class="token punctuation">,</span> <span class="token keyword">ref</span> <span class="token class-name"><span class="token keyword">float</span></span> distanceToClipPlane<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><strong>GraphicRaycaster</strong></li></ol><p>继承自PhysicsRaycaster的类有</p><ol><li><strong>Physics2DRaycaster</strong></li></ol><h4 id="事件逻辑处理及回调模块"><a href="#事件逻辑处理及回调模块" class="headerlink" title="事件逻辑处理及回调模块"></a>事件逻辑处理及回调模块</h4><h3 id="核心渲染模块"><a href="#核心渲染模块" class="headerlink" title="核心渲染模块"></a>核心渲染模块</h3><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UI </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity的异步编程</title>
      <link href="//post/Unity%E7%9A%84%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B.html"/>
      <url>//post/Unity%E7%9A%84%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B.html</url>
      
        <content type="html"><![CDATA[<p>这里只打算探索一下Unity的协程实现和C#的原生异步实现：async&#x2F;await还有将async&#x2F;await整合进Unity生命周期的第三方库UniTask。</p><h2 id="1-Unity的协程"><a href="#1-Unity的协程" class="headerlink" title="1. Unity的协程"></a>1. Unity的协程</h2><p>Unity的协程依赖于IEnumertor类的迭代原理和Mono的生命周期，以实现一种分帧操作来呈现异步的效果。</p><p>Unity协程的生命依靠着几个关键词IEnumertor,yield return。 启动一般以StartCoroutine()开始，</p><p>IEnumertor的内部</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IEnumertor</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">MoveNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> Current <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当打算使用协程时，一般是声明一个函数迭代器(或者叫迭代器块)，然后使用yield return来控制函数执行的流程。</p><p>这里也可以再详细研究一下，首先函数迭代器里只能用yield return而不是普通的return，其二是函数迭代器内部的实现，看似是一个按着顺序执行的结构，实际是让编译器生成了一个<strong>状态机</strong>。</p><p>这个状态机的特性：</p><ol><li>拥有1个初始状态。</li><li>每次调用MoveNext，在执行到yield return 语句前，它需要执行GetEnumerator方法中的代码。</li><li>在使用到Current属性时，必须返回生成的上一个值。</li><li>必须知道什么时候完成生成值的操作，以便MoveNext返回false。</li></ol><p>使用1个例子来描述(来源于C# in Depth)<br>例如:</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IEnumerator<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> <span class="token function">CreateEnumerable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">Padding</span><span class="token punctuation">&#125;</span></span><span class="token string"> 开始调用 CreateEnumerable()"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">Padding</span><span class="token punctuation">&#125;</span></span><span class="token string">准备调用yield </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">i</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">yield</span> <span class="token keyword">return</span> i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">Padding</span><span class="token punctuation">&#125;</span></span><span class="token string"> yield 结束"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">Padding</span><span class="token punctuation">&#125;</span></span><span class="token string"> yiled 最后1个值"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">Padding</span><span class="token punctuation">&#125;</span></span><span class="token string">CreateEnumerable() 结束"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TestBegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">IEnumerator<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> iterator <span class="token operator">=</span> <span class="token function">CreateEnumerable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//IEnumerator&lt;int> iterator = iterable.GetEnumerator();</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"开始递归"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"调用MoveNext"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token keyword">bool</span></span> result <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">MoveNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"MoveNext的值=</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">result</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Fetching Current..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Current的值=</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">iterator<span class="token punctuation">.</span>Current</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出的结果为,<br><img src="/img/article/UNITY_YIBU/0.png" alt="image"></p><p>在函数的正常使用里，return 基本有两个用处：为调用者提供返回值，终止方法的执行，在退出时执行finally代码块。</p><p>上面的例子可以发现几个规律，</p><ol><li>yield return会临时退出方法，而当执行MoveNext的时候，yield return 会继续执行。</li><li>所有工作在调用MoveNext时完成，获取current值(yield return 后面的值 是赋值给current属性)。</li><li>需要通过MoveNext返回false才能结束方法执行。</li></ol><p>这样可以得到yield return的流程:<br>-&gt;声明IEnumerator代码块<br>-&gt;执行MoveNext()&#x3D;代码块执行到下一个yield return 临时退出方法<br>-&gt;执行MoveNext()&#x3D;从刚才的退出的地方执行到下一个yield return,然后临时退出方法<br>-&gt;执行MoveNext()-&gt; Loop -&gt; ……. 直到MoveNext返回false</p><p>有关于为什么yield return也能用在IEnumerable里，<br>C# in Depth作者对此有解析,<br><a href="https://csharpindepth.com/Articles/IteratorBlockImplementation">https://csharpindepth.com/Articles/IteratorBlockImplementation</a></p><p>那么为什么yield 可以Keep住状态，然后在下次继续执行呢？这里可以反编译一下yield 语法糖。</p><details><summary>反编译</summary><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Program</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">CompilerGenerated</span></span><span class="token punctuation">]</span><span class="token keyword">private</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token operator">&lt;</span>CreateEnumerable<span class="token operator">></span>d__2 <span class="token punctuation">:</span> IEnumerator<span class="token operator">&lt;</span><span class="token keyword">object</span><span class="token operator">></span><span class="token punctuation">,</span> IEnumerator<span class="token punctuation">,</span> IDisposable<span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token operator">&lt;</span><span class="token operator">></span>1__state<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">object</span> <span class="token operator">&lt;</span><span class="token operator">></span>2__current<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token operator">&lt;</span>i<span class="token operator">></span><span class="token number">5__1</span><span class="token punctuation">;</span><span class="token return-type class-name"><span class="token keyword">object</span></span> IEnumerator<span class="token operator">&lt;</span><span class="token keyword">object</span><span class="token operator">></span><span class="token punctuation">.</span>Current<span class="token punctuation">&#123;</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DebuggerHidden</span></span><span class="token punctuation">]</span><span class="token keyword">get</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token operator">&lt;</span><span class="token operator">></span>2__current<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">object</span></span> IEnumerator<span class="token punctuation">.</span>Current<span class="token punctuation">&#123;</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DebuggerHidden</span></span><span class="token punctuation">]</span><span class="token keyword">get</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token operator">&lt;</span><span class="token operator">></span>2__current<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DebuggerHidden</span></span><span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>CreateEnumerable<span class="token operator">></span><span class="token function">d__2</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&lt;</span><span class="token operator">></span>1__state<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">></span>1__state <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token operator">></span>1__state<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DebuggerHidden</span></span><span class="token punctuation">]</span><span class="token return-type class-name"><span class="token keyword">void</span></span> IDisposable<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">MoveNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token operator">></span>1__state<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">default</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">&lt;</span><span class="token operator">></span>1__state <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>Padding <span class="token operator">+</span> <span class="token string">" 开始调用 CreateEnumerable()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>i<span class="token operator">></span><span class="token number">5__1</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">goto</span> IL_00b6<span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">&lt;</span><span class="token operator">></span>1__state <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>Padding <span class="token operator">+</span> <span class="token string">" yield 结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>i<span class="token operator">></span><span class="token number">5__1</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">goto</span> IL_00b6<span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span><span class="token operator">&lt;</span><span class="token operator">></span>1__state <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>Padding <span class="token operator">+</span> <span class="token string">"CreateEnumerable() 结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>IL_00b6<span class="token punctuation">:</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>i<span class="token operator">></span><span class="token number">5__1</span> <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"&#123;0&#125;准备调用yield &#123;1&#125;"</span><span class="token punctuation">,</span> Padding<span class="token punctuation">,</span> <span class="token operator">&lt;</span>i<span class="token operator">></span><span class="token number">5__1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">></span>2__current <span class="token operator">=</span> <span class="token operator">&lt;</span>i<span class="token operator">></span><span class="token number">5__1</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">></span>1__state <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>Padding <span class="token operator">+</span> <span class="token string">" yiled 最后1个值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">></span>2__current <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">></span>1__state <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">bool</span></span> IEnumerator<span class="token punctuation">.</span><span class="token function">MoveNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//ILSpy generated this explicit interface implementation from .override directive in MoveNext</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">MoveNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DebuggerHidden</span></span><span class="token punctuation">]</span><span class="token return-type class-name"><span class="token keyword">void</span></span> IEnumerator<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotSupportedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">string</span></span> Padding <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span></span><span class="token punctuation">(</span><span class="token char">' '</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Program</span> program <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Program</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">TestBegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">IteratorStateMachine</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token punctuation">&lt;</span>CreateEnumerable<span class="token punctuation">></span>d__2</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IEnumerator</span> <span class="token function">CreateEnumerable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token operator">&lt;</span>CreateEnumerable<span class="token operator">></span><span class="token function">d__2</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TestBegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">IEnumerator</span> iterator <span class="token operator">=</span> <span class="token function">CreateEnumerable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"开始递归"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"调用MoveNext"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name"><span class="token keyword">bool</span></span> result <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">MoveNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"MoveNext的值=&#123;0&#125;"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Fetching Current..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"Current的值=&#123;0&#125;"</span><span class="token punctuation">,</span> iterator<span class="token punctuation">.</span>Current<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><p>可以看到，整个MoveNext变成了通过状态代码切换状态的函数，并分割成了几部分。<br>成员变量</p><p><strong><i>5__1</strong>：指的是for循环里的i变量</p><p><strong>&lt;&gt;2__current</strong>：就是IEnumertor的current属性，这里我使用了int泛型，所以这里的类型变成了int。如果没有指定类型，这个变量将会是个Object。</p><p><strong>&lt;&gt;1__state</strong> ：状态代码，这个值的初始化在static IEnumertor CreateEnumerable()中，初始值为0。</p><p><strong>这样看流程就很清晰，编译器将函数里的逻辑分成几个步骤并分配给不同状态码管理，而每次执行MoveNext都会推进这个状态码的切换，保持yield return部分更新Current属性的同时，进而推进逻辑的执行。</strong></p><hr><p>之后就是Unity部分，Unity部分涉及1个StartCorountine启动协程还有很多个yield return new XXXX。</p><p>StartCoroutine将入参的IEnumerator包裹成Corountine对象，之后这个对象会保存在MonoBehaviour的一个成员容器里，同时内部还会提取出MoveNext和Current以方便调用，然后调用Corountine内部的run方法启动。从上面得知调用MoveNext就等同于推进逻辑执行，<br>而Current主要是保存另一个yield return new XXXX的东西。</p><ul><li>WaitForSeconds</li><li>WaitForFixedUpdate</li><li>WaitForEndOfFrame</li><li>Coroutine (C#层)</li><li>WWW</li><li>AsyncOperation</li></ul><p>这些类型的处理方式，无非是做个类似定时器一样的类DelayedCallManager去实现他们，比如说yield return new WaitForSeconds(10f)，DelayedCallManager根据这个需要等待的值直接去Update里算时间，计时结束后再回调Coroutine。</p><details><summary>别人对DelayedCallManager的解析</summary><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">DelayedCallManager</span><span class="token double-colon punctuation">::</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">float</span> time <span class="token operator">=</span> <span class="token function">GetCurTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> frame <span class="token operator">=</span> <span class="token function">GetTimeManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetFrameCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Container<span class="token double-colon punctuation">::</span>iterator iterator <span class="token operator">=</span> m_CallObjects<span class="token punctuation">.</span><span class="token function">begin</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//m_CallObjects保存了所有注册的Coroutine对象</span><span class="token comment">// iterator->time 在注册的时候赋值是: 当前时间 + 等待的时间(new WaitForSeconds(5),那么就是5秒)</span><span class="token comment">// iterator->time &lt;= time 这个条件判断了iterator的定时时间是否满足了</span><span class="token comment">// 比如上面我们加入定义new WaitForSeconds(5)，</span><span class="token comment">// 满足的条件时就当当前时间time要大于iterator满足的时间的时候，则进入这个while循环内</span><span class="token keyword">while</span> <span class="token punctuation">(</span>iterator <span class="token operator">!=</span>  m_CallObjects<span class="token punctuation">.</span><span class="token function">end</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> iterator<span class="token operator">-></span>time <span class="token operator">&lt;=</span> time<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//判断帧是否满足,加入用到了new WaitForFixedUpdate()之类的</span><span class="token keyword">if</span> <span class="token punctuation">(</span>cb<span class="token punctuation">.</span>timeStamp <span class="token operator">!=</span> m_TimeStamp <span class="token operator">&amp;&amp;</span> cb<span class="token punctuation">.</span>frame <span class="token operator">&lt;=</span> frame<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//调用CoroutineCallback了</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><h2 id="2-async-x2F-await"><a href="#2-async-x2F-await" class="headerlink" title="2. async&#x2F;await"></a>2. async&#x2F;await</h2><p>去看了看Unity课堂的日本站，有关于异步处理的专栏，几乎都是async&#x2F;await的讲解，看下他们的解析来总结。</p><ul><li>async关键字：指定方法为异步方法。</li><li>await关键字：用于修饰async方法里的逻辑，await是阻塞的，若无返回则不会执行下面的操作。</li></ul><p>用简单的例子展开：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">AsyncTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>反编译这段代码，可以发现内部是创建了一个状态机，用比较清晰的写法来描述这段</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">AsyncTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//实例化1个异步状态机</span><span class="token class-name"><span class="token keyword">var</span></span> statemachine <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AsyncTestStateMachine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stateMachine<span class="token punctuation">.</span>builder <span class="token operator">=</span> AsyncVoidMethodBuilder<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stateMachine<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>stateMachine<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>stateMachine<span class="token punctuation">.</span>builder<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token keyword">ref</span> stateMachine<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>AsyncTestStateMachine是一个名字是动态生成，继承自IAsyncStateMachine的类，MSDN对这个接口的解释是 表示为异步方法生成的状态机。 此类别仅供编译器使用。 需要实现一个MoveNext()作为状态转换函数，有一个重要的成员对象AsyncVoidMethodBuilder。</p><details><summary>AsyncTestStateMachine的反编译</summary><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token operator">&lt;</span>asyncFunc<span class="token operator">></span>d__1 <span class="token punctuation">:</span> IAsyncStateMachine<span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token operator">&lt;</span><span class="token operator">></span>1__state<span class="token punctuation">;</span><span class="token keyword">public</span> AsyncVoidMethodBuilder <span class="token operator">&lt;</span><span class="token operator">></span>t__builder<span class="token punctuation">;</span><span class="token keyword">private</span> TaskAwaiter <span class="token operator">&lt;</span><span class="token operator">></span>u__1<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MoveNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name"><span class="token keyword">int</span></span> num <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token operator">></span>1__state<span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span><span class="token class-name">TaskAwaiter</span> awaiter<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">)</span><span class="token punctuation">;</span>awaiter <span class="token operator">=</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetAwaiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>awaiter<span class="token punctuation">.</span>IsCompleted<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token operator">></span>1__state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">></span>u__1 <span class="token operator">=</span> awaiter<span class="token punctuation">;</span><span class="token operator">&lt;</span>asyncFunc<span class="token operator">></span><span class="token class-name">d__1</span> stateMachine <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">></span>t__builder<span class="token punctuation">.</span><span class="token function">AwaitUnsafeOnCompleted</span><span class="token punctuation">(</span><span class="token keyword">ref</span> awaiter<span class="token punctuation">,</span> <span class="token keyword">ref</span> stateMachine<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>awaiter <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token operator">></span>u__1<span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">></span>u__1 <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token type-expression class-name">TaskAwaiter</span><span class="token punctuation">)</span><span class="token punctuation">;</span>num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token operator">></span>1__state <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>awaiter<span class="token punctuation">.</span><span class="token function">GetResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> exception<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">&lt;</span><span class="token operator">></span>1__state <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">></span>t__builder<span class="token punctuation">.</span><span class="token function">SetException</span><span class="token punctuation">(</span>exception<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">></span>1__state <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">></span>t__builder<span class="token punctuation">.</span><span class="token function">SetResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> IAsyncStateMachine<span class="token punctuation">.</span><span class="token function">MoveNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//ILSpy generated this explicit interface implementation from .override directive in MoveNext</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">MoveNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DebuggerHidden</span></span><span class="token punctuation">]</span><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetStateMachine</span><span class="token punctuation">(</span><span class="token class-name">IAsyncStateMachine</span> stateMachine<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> IAsyncStateMachine<span class="token punctuation">.</span><span class="token function">SetStateMachine</span><span class="token punctuation">(</span><span class="token class-name">IAsyncStateMachine</span> stateMachine<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//ILSpy generated this explicit interface implementation from .override directive in SetStateMachine</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">SetStateMachine</span><span class="token punctuation">(</span>stateMachine<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><p>这个状态机内部有几个成员变量:<br><strong>&lt;&gt;1__state</strong> 当前状态机的状态<br><strong>&lt;&gt;t__builder</strong> 主要负责异步方面操作的核心成员变量。这里的类型是AsyncVoidMethodBuilder，表示不返回值的异步方法生成器。<br><strong>&lt;&gt;u__1</strong>TaskAwaiter类型，提供等待异步任务完成的对象。</p><p>流程上是，编译器为所有被async修饰的异步方法，构建继承自IAsyncStateMachine的状态机，每个状态机都新增一个初始化的方法，这个方法用于初始化 builder 成员，将初始状态设置为 -1，并且会调用builder的start，调用MoveNext。<br>若有async嵌套async的情况，最外层的async会获得下一层async的awaiter，并且对其进行等待回调操作。</p><p>进入MoveNext，先判断状态是否为0，</p><p>否：获取Task异步方法的Awaiter，并判断异步是否已经完成</p><p>未完成：<br>则将状态置为0，把Awaiter存入类成员变量中，并以该awaiter和自身this作为入参调用builder的.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine)方法，然后退出状态机。AwaitUnsafeOnCompleted的作用是，待异步方法完成时回调状态机的MoveNext()方法。</p><p>是：将状态设为-1，重置状态码，执行延迟后面的逻辑。</p><p>深入到Task.Delay，内部主要通过System.Threading.Timer实现，本身是基于线程池线程实现，所以他的计时是开启线程-&gt;线程内计时-&gt;计时结束回调，Delay函数返回Task，而AsyncVoidMethodBuilder的机制使得他会等待计时完成再执行后面的逻辑，因为使用了多线程所以也没有阻塞到主线程。</p><p>async void和async Task区别<br><a href="https://docs.microsoft.com/zh-cn/archive/msdn-magazine/2013/march/async-await-best-practices-in-asynchronous-programming">https://docs.microsoft.com/zh-cn/archive/msdn-magazine/2013/march/async-await-best-practices-in-asynchronous-programming</a></p><h2 id="3-UniTask"><a href="#3-UniTask" class="headerlink" title="3. UniTask"></a>3. UniTask</h2>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 探索发现 </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>玩游戏-仁王2</title>
      <link href="//post/%E7%8E%A9%E6%B8%B8%E6%88%8F-%E4%BB%81%E7%8E%8B2.html"/>
      <url>//post/%E7%8E%A9%E6%B8%B8%E6%88%8F-%E4%BB%81%E7%8E%8B2.html</url>
      
        <content type="html"><![CDATA[<p>之前一段时间(半年前)在玩仁王2，实在是很有意思的游戏。有可玩性高的动作系统，换一把武器就能有截然不同体验的感觉和怪猎非常相似，然后还拥有一些刷刷刷，装备build的RPG要素。</p><p>游戏里角色操作三段架势还有数种适配架势的技能，结合精力管控系统，再进行一些合理的玩法增添后，让人玩起来感觉非常顺滑且游刃有余，当然这是建立在偏后期，阴阳术和基本装备成型后才能达到的效果，游戏的前期体验在没有选对武器，加点思想不对的情况下还是非常吃苦（说的就是你，手甲），不过我以前玩过1代，所以对残心的使用还是比较知悉，至少说有使用它的习惯。</p><p>精力系统的存在我认识是对游戏内RPG要素的一个妥协，也可能算是种历史遗留问题，毕竟1代的时候光荣脱裤魔是有些碰瓷宣传的，碰的是目前还在大热的魂系，估计当时组内也是以制作一款类魂游戏为目的去制作，当然了，游戏本身最大的成功还是要归功于忍者组深厚的ACT游戏制作功底，不管怎么说也是经历过忍龙的组，而现在很多类魂3D游戏，也不是每款都像仁王那么独一档。（迸发，堕落之王，Mortal Shell，CODE VEIN等），当然我是认为凭借这套动作系统，完全可以摆脱这套精力系统，去做更自由的变化。</p><p>目前玩的时候是时间是</p><p><img src="/img/article/TALK_NIOH2/0.png" alt="image"></p><p><img src="/img/article/TALK_NIOH2/1.png" alt="image"></p><p>仁王1的进度还在DLC里，还是大学时期玩的，估计是不会再碰。而仁王2在5周目后直接打奈落狱，进度是第30层。</p><p>因为我主用手甲，也没换过武器，所以下面的体验以手甲为主：</p><p>手甲最大的使用体验在于需要你使用不同武技去叠加名为“连绵”的buff，这个buff能增加伤害，因为本身手甲动作发生比较快，所以作为补偿伤害也会相应低一些，所以十分依靠连绵buff带来的伤害补足，也因此叠加连绵层数期间会让人觉得十分拖沓，暖机机制也不是所有人都喜欢。连绵buff最多有10层，且层数越高buff存在的时间就越短，如何快速叠加连绵，且在连绵buff生效期间去打出高伤害，就成为了重中之重的技巧，叠不起buff的话伤害就会非常刮痧，体验极差。由于手甲的动作十分之快，所以在连续攻击的情况下切换架势去释放不同战技，也不会有停顿感，更别说一些战技拥有位移闪避的效果，配合高层数连绵和混沌debuff，打起来还是非常赏心悦目的。</p><p>混沌debuff又是这个游戏里面比较重要的玩法，混沌debuff的效果是增加玩家伤害，和阻止妖怪进入常暗。 这一作的妖怪型敌人在妖力槽被清空前都处于霸体状态，只有在妖力槽清空后玩家攻击才会造成硬直。在妖力槽清空的一段时间后或者妖怪从可处决状态里恢复过来，就会自动进入常暗，特效是玩家所见都变成黑白，玩家精力槽回复变慢，妖怪恢复大部分妖力槽且增加很多招式且保持霸体。若能在妖怪进常暗前让妖怪进入混沌的debuff状态，就能在妖怪倒地处决前不进入常暗。</p><p>混沌debuff需要让对面积累两种异常属性（不包括麻痹和毒），一般来说武器可以附魔增加一种属性，而另一种属性就要依靠阴阳术（类似法术一样的存在）。所以这也是这个游戏里“阴阳武者”这件套装十分风靡的原因，阴阳武者的神宝套装效果，可以恢复玩家最后一次释放的阴阳术的数量，搭配一些强力阴阳术，能让受苦度大量下降。</p><p>当然进入常暗状态对玩家也不是一件完全有害的事，进入常暗后攻击妖怪能大幅度增加自己的妖力槽，而妖力槽是释放妖怪技的必须能量。所以也存在进入常暗后，无限释放妖怪技的build。</p><p>所以现在很期待忍者组的下一部三国题材的作品。<br>下一个游戏想玩arc system的ggst。</p><p>今天听的歌是 Forever Yours feat. Stacy Epps &amp; Toby from Inverse (re-plus remix)<br><a href="https://music.163.com/song?id=22762850">https://music.163.com/song?id=22762850</a></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 玩游戏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ET框架学习_ETBook阅览(慢慢更)</title>
      <link href="//post/ET%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0-ETBook%E9%98%85%E8%A7%88.html"/>
      <url>//post/ET%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0-ETBook%E9%98%85%E8%A7%88.html</url>
      
        <content type="html"><![CDATA[<p>加了ET群很久，一直只是看群里的人聊天谈地，clone了ET框架很长时间，也没有怎么看过，所以这次想先从ETBook开始看起，认识一下这个框架。</p><p><strong>ETBook地址:<a href="http://etgame.cn/pages/a2f161/">http://etgame.cn/pages/a2f161/</a></strong></p><p>在这次的ETBook阅读的同时，我也会同步看烟雨迷离半世殇的ETBook笔记汇总，加深理解。</p><p>烟雨迷离半世殇的ETBook笔记汇总：<a href="https://www.lfzxb.top/etbook/">https://www.lfzxb.top/etbook/</a></p><p>目前的git上的master分支已经更到了7.0，该版本似乎还在持续更新中，不知道有多大的时效性。</p><p>略过前面的介绍，直接从第二章:CSharp的协程开始。</p><hr><h1 id="2-CSharp的协程"><a href="#2-CSharp的协程" class="headerlink" title="2.CSharp的协程"></a>2.CSharp的协程</h1><h2 id="2-1-CSharp的协程"><a href="#2-1-CSharp的协程" class="headerlink" title="2.1 CSharp的协程"></a>2.1 CSharp的协程</h2><p>作者在开篇使用一段while循环+线程挂起的程序。并以此做延伸来引出异步的实现。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span>       <span class="token class-name"><span class="token keyword">int</span></span> loopCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>       <span class="token punctuation">&#123;</span>           <span class="token class-name"><span class="token keyword">int</span></span> temp <span class="token operator">=</span> watcherValue<span class="token punctuation">;</span>                      Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token operator">++</span>loopCount<span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>loopCount <span class="token operator">%</span> <span class="token number">10000</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>           <span class="token punctuation">&#123;</span>               Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"loop count: </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">loopCount</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了做出延时5秒后输出loopCount的效果，且不打断10000次计数打印一次的逻辑，这里导入ET框架中的一个自定义单例<strong>OneThreadSynchronizationContext</strong>，这个类主要处理别的线程扔回主线程的委托。简短介绍一下该类的成员和方法。</p><details><summary>OneThreadSynchronizationContext</summary><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//SynchronizationContext 提供了1个Post虚函数。</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadSynchronizationContext</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">SynchronizationContext</span></span><span class="token punctuation">&#123;</span>    <span class="token comment">// Instance单例访问器</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ThreadSynchronizationContext</span> Instance<span class="token punctuation">;</span>           <span class="token comment">// 用于存储主线程的线程ID,在构造函数里初始化</span>    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">int</span></span> threadId <span class="token punctuation">;</span>        <span class="token comment">// 线程同步队列,发送接收socket回调都放到该队列,由poll线程统一执行</span>    <span class="token comment">// 一个线程安全的只读队列,存储Action。</span>    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">ConcurrentQueue<span class="token punctuation">&lt;</span>Action<span class="token punctuation">></span></span> queue<span class="token punctuation">;</span>    <span class="token comment">//用于存储从队列里提取的Action委托</span>    <span class="token keyword">private</span> <span class="token class-name">Action</span> a<span class="token punctuation">;</span>    <span class="token comment">//一个轮询用的函数,</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              <span class="token comment">//此处提取queue里的委托,若无则return;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">TryDequeue</span><span class="token punctuation">(</span><span class="token keyword">out</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                               <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>             <span class="token comment">//执行Action委托 </span>            <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//覆写SynchronizationContext的虚函数Post</span>    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Post</span><span class="token punctuation">(</span><span class="token class-name">SendOrPostCallback</span> callback<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span></span> state<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>   <span class="token comment">//用了一个匿名函数</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Post</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">callback</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Post</span><span class="token punctuation">(</span><span class="token class-name">Action</span> action<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//首先会判断当前Thread线程的ID是否与此单例的线程ID相同</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">.</span>ManagedThreadId <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>threadId<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//若相同,说明目前在主线程,则执行参数action</span>            <span class="token function">callback</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>     <span class="token comment">//否则将其他线程来的action委托入队queue</span>        <span class="token function">PostNext</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//用于将参数action入队</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PostNext</span><span class="token punctuation">(</span><span class="token class-name">Action</span> action<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token function">callback</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><p>而后作者设计出了一个异步方法，这个方法核心在于：另开一个线程，并将逻辑包裹成委托传入，使用Thread.Sleep做阻塞n秒的操作，待阻塞完毕后将委托扔回主线程执行，这样就能在不阻塞主线程的情况下作一个计时操作，也避免了一些线程冲突操作，且免去加锁的麻烦。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">WaitTimeAsync</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">,</span>WaitTimeFinishCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//时刻轮询</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        ThreadSynchronizationContext<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">WaitTimeFinishCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">WaitTimeAsync</span><span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">,</span>WaitTimeFinishCallback<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">WaitTimeAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> waitTime<span class="token punctuation">,</span><span class="token class-name">Action</span> action<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span> <span class="token function">WaitTime</span><span class="token punctuation">(</span>waitTime<span class="token punctuation">,</span>action<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    thread<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">WaitTime</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> waitTime<span class="token punctuation">,</span><span class="token class-name">Action</span> action<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//在新的线程里休眠等待</span>    Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>waitTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//休眠完事后把委托扔进去</span>    OneThreadSynchronizationContext<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">Post</span><span class="token punctuation">(</span>o<span class="token operator">=></span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="2-2-更好的协程"><a href="#2-2-更好的协程" class="headerlink" title="2.2 更好的协程"></a>2.2 更好的协程</h2><p>使用上面的方法如果有增加的需求会不方便。这时候可以用C#自带的异步语法。<br>此处使用了C#设计的几个逻辑</p><ol><li>Task</li><li>async&#x2F;await</li><li>TaskCompletionSource</li></ol><p>1.Task可以理解为，为了一个异步操作而封装了多种功能的集合单位，本质还是使用了Thread，MSDN直接解释为一个异步操作。而Thread更倾向于是一个最基本的线程单元。</p><p>2.async&#x2F;await是一对组合使用的关键字，async用于修饰方法，用于提醒该方法里有异步操作，而await用于修饰async方法里的逻辑，await是阻塞的，若无返回则不会执行下面的操作。</p><p>3.TaskCompletionSource，是一种创建Task的方式。集合了控制Task的方法。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">WaitTimeAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> waitTime<span class="token punctuation">,</span> <span class="token class-name">Action</span> action<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token function">WaitTime</span><span class="token punctuation">(</span>waitTime<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    thread<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//此处把action回调略去,改为使用TaskCompletionSource</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name">Task</span> <span class="token function">WaitTimeAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> waitTime<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">TaskCompletionSource<span class="token punctuation">&lt;</span><span class="token keyword">bool</span><span class="token punctuation">></span></span> tcs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TaskCompletionSource<span class="token punctuation">&lt;</span><span class="token keyword">bool</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token function">WaitTime</span><span class="token punctuation">(</span>waitTime<span class="token punctuation">,</span> tcs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    thread<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> tcs<span class="token punctuation">.</span>Task<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>改变了之前需要回调方法里嵌套回调来实现的连续异步操作。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Crontine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">await</span> <span class="token function">WaitTimeAsync</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"当前线程: </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">.</span>ManagedThreadId</span><span class="token punctuation">&#125;</span></span><span class="token string">, WaitTimeAsync finsih loopCount的值是: </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">loopCount</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> <span class="token function">WaitTimeAsync</span><span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"当前线程: </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">.</span>ManagedThreadId</span><span class="token punctuation">&#125;</span></span><span class="token string">, WaitTimeAsync finsih loopCount的值是: </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">loopCount</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token comment">//旧的形式</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">WaitTimeAsync</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">,</span> WaitTimeFinishCallback<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">WaitTimeFinishCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"WaitTimeAsync finsih loopCount的值是: </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">loopCount</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">WaitTimeAsync</span><span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">,</span> WaitTimeFinishCallback2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时作者在主线程调用了这个静态函数：<br>SynchronizationContext.SetSynchronizationContext(OneThreadSynchronizationContext.Instance); 用于同步上下文，替换了将逻辑扔回主线程执行的操作，</p><p><em><strong>在WaitTime中直接调用tcs.SetResult(true)就行了，回调会自动扔到同步上下文中，而同步上下文我们可以在主线程中取出回调执行，这样自动能够完成回到主线程的操作</strong></em></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"> <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">WaitTime</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> waitTime<span class="token punctuation">,</span> <span class="token class-name">TaskCompletionSource<span class="token punctuation">&lt;</span><span class="token keyword">bool</span><span class="token punctuation">></span></span> tcs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>waitTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    tcs<span class="token punctuation">.</span><span class="token function">SetResult</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="2-3-单线程异步"><a href="#2-3-单线程异步" class="headerlink" title="2.3 单线程异步"></a>2.3 单线程异步</h2><p>异步实现不仅仅只有多线程的方式，一般游戏逻辑会设计一个单线程的计时器。<br>代码比较简单,直接贴出来了。</p><details><summary>单线程异步</summary><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">int</span></span> loopCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">long</span></span> time<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Action</span> action<span class="token punctuation">;</span>                <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"主线程: </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">.</span>ManagedThreadId</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">Crontine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">CheckTimerOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token operator">++</span>loopCount<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>loopCount <span class="token operator">%</span> <span class="token number">10000</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"loop count: </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">loopCount</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Crontine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>                        <span class="token function">WaitTimeAsync</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">,</span> WaitTimeAsyncCallback1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//每次执行完都会刷新一次time和委托</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">WaitTimeAsyncCallback1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"当前线程: </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">.</span>ManagedThreadId</span><span class="token punctuation">&#125;</span></span><span class="token string">, WaitTimeAsync finsih loopCount的值是: </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">loopCount</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//刷新新的time和委托</span>            <span class="token function">WaitTimeAsync</span><span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">,</span> WaitTimeAsyncCallback2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CheckTimerOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 检测时间到了没有,若到了则执行。</span>            <span class="token class-name"><span class="token keyword">long</span></span> nowTicks <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span>Ticks <span class="token operator">/</span> <span class="token number">10000</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> nowTicks<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            time <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            action<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">WaitTimeAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> waitTime<span class="token punctuation">,</span> <span class="token class-name">Action</span> a<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>                         time <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span>Ticks <span class="token operator">/</span> <span class="token number">10000</span> <span class="token operator">+</span> waitTime<span class="token punctuation">;</span>            action <span class="token operator">=</span> a<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><p>把上面的样子改成await形式</p><details><summary>await异步</summary><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">Program</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">int</span></span> loopCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">long</span></span> time<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">TaskCompletionSource<span class="token punctuation">&lt;</span><span class="token keyword">bool</span><span class="token punctuation">></span></span> tcs<span class="token punctuation">;</span>            <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"主线程: </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">.</span>ManagedThreadId</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Crontine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">CheckTimerOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token operator">++</span>loopCount<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>loopCount <span class="token operator">%</span> <span class="token number">10000</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"loop count: </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">loopCount</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>            <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Crontine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">await</span> <span class="token function">WaitTimeAsync</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"当前线程: </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">.</span>ManagedThreadId</span><span class="token punctuation">&#125;</span></span><span class="token string">, WaitTimeAsync finsih loopCount的值是: </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">loopCount</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> <span class="token function">WaitTimeAsync</span><span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"当前线程: </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">.</span>ManagedThreadId</span><span class="token punctuation">&#125;</span></span><span class="token string">, WaitTimeAsync finsih loopCount的值是: </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">loopCount</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CheckTimerOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name"><span class="token keyword">long</span></span> nowTicks <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span>Ticks <span class="token operator">/</span> <span class="token number">10000</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> nowTicks<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        time <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        tcs<span class="token punctuation">.</span><span class="token function">SetResult</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>            <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name">Task</span> <span class="token function">WaitTimeAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> waitTime<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">TaskCompletionSource<span class="token punctuation">&lt;</span><span class="token keyword">bool</span><span class="token punctuation">></span></span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TaskCompletionSource<span class="token punctuation">&lt;</span><span class="token keyword">bool</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        time <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span>Ticks <span class="token operator">/</span> <span class="token number">10000</span> <span class="token operator">+</span> waitTime<span class="token punctuation">;</span>        tcs <span class="token operator">=</span> t<span class="token punctuation">;</span>        <span class="token keyword">return</span> t<span class="token punctuation">.</span>Task<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><p>代码简单，要注意的点是await不会开启多线程，这上面的调用都是在主线程中完成，有没使用多线程取决于具体实现，task在没有await的情况下是非阻塞的。我本身对这个不太熟悉，要去补补对应知识。</p><h2 id="3-2-强大的MongoBson库"><a href="#3-2-强大的MongoBson库" class="headerlink" title="3.2 强大的MongoBson库"></a>3.2 强大的MongoBson库</h2><p>需要使用序列化的场景:</p><ol><li>对象通过序列化反序列化clone</li><li>服务端数据库存储数据，二进制</li><li>分布式服务端，多进程间的消息，二进制</li><li>后端日志，文本格式</li><li>服务端的各种配置文件，文本格式</li></ol><p>列举常用序列化库</p><ol><li>protobuf不支持复杂的对象结构(无法使用继承)，做消息合适，做数据库存储和日志格式并不好用。</li><li>json做日志格式合适，但是做网络消息和数据存储就太大。</li></ol><details><summary>适用场景</summary><ol><li>你想想某天你的配置文件需要放到数据库中保存，你不需要进行格式转换，后端直接把前端发过来的配置消息保存到数据库中，这是不是能减少非常多错误呢？</li><li>某天有些服务端的配置文件不用文件格式了，需要放在数据库中，同样，只需要几行代码就可以完成迁移。</li><li>某天后端服务器crash，你需要扫描日志进行数据恢复，把日志进行反序列化成C#对象，一条条进行处理，再转成对象保存到数据库就完成了。</li><li>对象保存在数据库，直接就可以看到文本内容，可以做各种类sql的操作</li><li>想像一个场景，一个配置文本对象，反序列化到内存，通过网络消息发送，存储到数据库中。整个过程一气呵成。、</li><li></details></li></ol><p>这里作者选用了Mongo Bson，可以减少各种数据转换，减少代码，提高可维护性。MongoDB库既可以序列化成文本也可以序列化成BSON的二进制格式。</p><details><summary>Mongo Bson支持功能</summary><ol><li>支持复杂的继承结构</li><li>支持忽略某些字段序列化</li><li>支持字段默认值</li><li>结构多出多余的字段照样可以反序列化，这对多版本协议非常有用</li><li>支持ISupportInitialize接口使用，这个在反序列化的时候简直就是神器</li><li>支持文本json和二进制bson序列化</li><li>MongoDB数据库支持</li></ol></details><p>后面是列举MongoBson的一些使用例子，推荐直接去官网看。</p><h2 id="3-3-一切皆组件"><a href="#3-3-一切皆组件" class="headerlink" title="3.3 一切皆组件"></a>3.3 一切皆组件</h2><p>本篇主要介绍ECS设计，OW(守望先锋)率先使用ECS这种设计并取得巨大成功。它采用了状态帧这种网络技术：即客户端服务器端拥有一套相同逻辑，客户端进行预测行为，先进行客户端表现，而后和服务器端的预测行为做对照，不匹配的话就进行回滚。（<strong>预测</strong>这个词我这里还是有点不太理解，后面还需要去查查。）使用组件式开发的话，则只需要回滚对应组件即可。</p><p>ECS的重点在于逻辑与数据完全分离，EC是纯数据，System是逻辑，由数据驱动逻辑。而数据驱动逻辑的意思即：通过Update（tick）检测数据变化，通过事件机制来订阅数据变化。</p><p>作者认为传统的ECS书写逻辑的方式有让组件过于稀碎化的缺点，导致组件非常多且开发人员只熟悉自己的模块，造成大量冗余。Entity和Component通常只有一层，组件一多可能不知道要使用哪些Component。合理的做法是以树状的方式管理组件，<strong>Entity可以管理Component，Component管理Entity，甚至Component还可以挂载Component。例如：人由头，身体，手，脚组成，而头又由眼睛，耳朵，鼻子，嘴巴组成。</strong></p><p>在ET框架里，所有数据都是Component，包括Entity，Entity继承于ComponentWithId，ComponentWithId继承于Component，所以Entity本质上也是一个Component，只不过它可以挂载其它的Component。</p><p>实际使用中可以继承Component，ComponentWithId，Entity三者之一，</p><ol><li>如果该类需要挂载组件则继承Entity。</li><li>如果不需要挂载组件，但是需要带个逻辑ID则继承ComponentWithId。</li><li>其他情况继承Component。</li></ol><p>ET的Entity可以有数据成员，通用的数据放在Entity上作为成员，不通用的作为组件挂载在Entity上，比如物品的设计，所有物品都有配置id，数量，等级的字段，这些字段没有必要做成组件，放在Entity身上使用会更加方便。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Entity</span></span><span class="token punctuation">&#123;</span>    <span class="token comment">// 道具的配置Id</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> ConfigId <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token comment">// 道具的数量</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Count <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token comment">// 道具的等级</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Level <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ET的树状数据结构:<br>顶层Game.Scene，不同模块的数据都挂载在Game.Scene上，每个模块下可以挂载很多数据。<br>比如做一个道具系统，设计一个ItemsComponent挂载在Player上即可，需要技能开发一个SkillComponent挂载在Player上。全服需要做一个活动，则开发一个活动组件挂载到Game.Scene上，这种设计会十分简洁且模块化。</p><h3 id="组件的细节"><a href="#组件的细节" class="headerlink" title="组件的细节"></a>组件的细节</h3><h4 id="1-组件的创建"><a href="#1-组件的创建" class="headerlink" title="1.组件的创建"></a>1.组件的创建</h4><p>组件的创建统一由ComponentFactory创建，该工厂类提供了Create,CreateWithParent,CreateWithId三个方式。<br>其中Create是最简单的创建方式，它做了几个处理。</p><ol><li>根据组件类型构建一个组件。</li><li>将组件加入事件系统，并且抛出一个AwakeSystem。</li><li>是否启用对象池。</li></ol><p>CreateWithParent<br>在Create基础上提供了一个Parent对象，设置到Component.Parent字段上。</p><p>CreateWithId<br>是用来创建ComponentWithId或者其子类的，在Create的基础上可以自己设置一个Id, Component在创建的时候可以选择是否使用对象池。</p><p>三类工厂方法都带有一个fromPool的参数，默认是true。</p><h4 id="2-组件的释放"><a href="#2-组件的释放" class="headerlink" title="2.组件的释放"></a>2.组件的释放</h4><p>Component有非托管资源，所以需要继承一个IDisposable接口，用于显示释放资源。使用该接口主要做如下操作</p><ol><li>抛出Destory System。</li><li>如果组件是对象池创建的，那么在这里会放回对象池。</li><li>从全局事件系统(EventSystem)中删除该组件，并且将InstanceId设为0。<br>如果组件挂载Entity身上，那么Entity调用Dispose的时候会自动调用身上所有Component的Dispose方法。</li></ol><h4 id="3-1-InstanceId的作用"><a href="#3-1-InstanceId的作用" class="headerlink" title="3.1 InstanceId的作用"></a>3.1 InstanceId的作用</h4><p>所有Component都存在一个InstanceID作为唯一标识，组件构建或者组件从对象池取出时重新设置。<br>这个字段的存在意义如下。</p><ol><li><p>对象池的存在，使得组件未必会被释放，可能是回到对象池中。异步调用里很可能这个组件已经被释放了，然后又被重新利用起来，这样需要区分之前的组件对象是否已经被释放。</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">ETVoid</span> <span class="token function">UpdateAsync</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">ActorLocationSender</span> self<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>  <span class="token class-name"><span class="token keyword">long</span></span> instanceId <span class="token operator">=</span> self<span class="token punctuation">.</span>InstanceId<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>InstanceId <span class="token operator">!=</span> instanceId<span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token class-name">ActorTask</span> actorTask <span class="token operator">=</span> <span class="token keyword">await</span> self<span class="token punctuation">.</span><span class="token function">GetAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>InstanceId <span class="token operator">!=</span> instanceId<span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>actorTask<span class="token punctuation">.</span>ActorRequest <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">await</span> self<span class="token punctuation">.</span><span class="token function">RunTask</span><span class="token punctuation">(</span>actorTask<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  Log<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> while (true)中是段异步方法，await self.GetAsync()之后很可能ActorLocationSender对象已经被释放了，甚至有可能这个对象又被其它逻辑从对象池中再次利用了起来。我们这时候可以通过InstanceId的变化来判断这个对象是否已经被释放掉。</p></li><li><p>InstanceId是全局唯一，且带有位置信息，可以通过InstanceID来找到对象位置，将消息发给对象，这个设计将会在Actor消息中利用到。</p></li></ol><p>结合一下官方ET的DEMO来看看</p><h3 id="3-4-事件机制EventSystem"><a href="#3-4-事件机制EventSystem" class="headerlink" title="3.4 事件机制EventSystem"></a>3.4 事件机制EventSystem</h3>]]></content>
      
      
      <categories>
          
          <category> 通用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ET框架 </tag>
            
            <tag> 探索发现 </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UnityEngine.Object和System.Object</title>
      <link href="//post/UnityEngine-Object%E5%92%8CSystem-Object.html"/>
      <url>//post/UnityEngine-Object%E5%92%8CSystem-Object.html</url>
      
        <content type="html"><![CDATA[<p>引子</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">string</span></span> s <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span><span class="token class-name"><span class="token keyword">var</span></span> go <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GameObject</span><span class="token punctuation">(</span><span class="token string">"goodBoy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">DestroyImmediate</span><span class="token punctuation">(</span>go<span class="token punctuation">)</span><span class="token punctuation">;</span>go <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>go<span class="token punctuation">)</span> s <span class="token operator">+=</span> <span class="token string">"A"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>go <span class="token keyword">is</span> <span class="token keyword">null</span><span class="token punctuation">)</span> s <span class="token operator">+=</span> <span class="token string">"B"</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>go <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> s <span class="token operator">+=</span> <span class="token string">"C"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>Object<span class="token punctuation">)</span>go <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> s <span class="token operator">+=</span> <span class="token string">"D"</span><span class="token punctuation">;</span>Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后输出AC。</p><p>首先而System.Object的&#x3D;&#x3D;null是判断是否为空指针，</p><p>而UnityEngine.Object的”&#x3D;&#x3D;”是做过操作符重载的，当然也重载了≠。</p><p>UnityEngine.Object的&#x3D;&#x3D;会调用以下的片段。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">CompareBaseObjects</span><span class="token punctuation">(</span><span class="token class-name">Object</span> lhs<span class="token punctuation">,</span> <span class="token class-name">Object</span> rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//强转为System.object</span><span class="token comment">//操作符左边的值是否为null</span>    <span class="token class-name"><span class="token keyword">bool</span></span> flag <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">object</span><span class="token punctuation">)</span>lhs <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//操作符右边的值是否为null</span>    <span class="token class-name"><span class="token keyword">bool</span></span> flag2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">object</span><span class="token punctuation">)</span>rhs <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//都为null 返回true</span><span class="token comment">//此处说明，如果C#方面的引用已被置为空引用,那游戏对象肯定不存在.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag2 <span class="token operator">&amp;&amp;</span> flag<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>flag2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token operator">!</span><span class="token function">IsNativeObjectAlive</span><span class="token punctuation">(</span>lhs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token operator">!</span><span class="token function">IsNativeObjectAlive</span><span class="token punctuation">(</span>rhs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token comment">//（通过对GUID和LocalID的计算，得到全局唯一的m_InstanceID）</span><span class="token comment">// 对比二者的m_InstanceID</span>    <span class="token keyword">return</span> lhs<span class="token punctuation">.</span>m_InstanceID <span class="token operator">==</span> rhs<span class="token punctuation">.</span>m_InstanceID<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另一段是</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">IsNativeObjectAlive</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">GetCachedPtr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> IntPtr<span class="token punctuation">.</span>Zero<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//判断对象是否派生自MonoBehaviour 或者 ScriptableObject</span><span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token keyword">is</span> <span class="token class-name">MonoBehaviour</span> <span class="token operator">||</span> o <span class="token keyword">is</span> <span class="token class-name">ScriptableObject</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//判断InstanceID还存不存在</span><span class="token keyword">return</span> <span class="token function">DoesObjectWithInstanceIDExist</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">GetInstanceID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得出结论：对于被Destory掉了的UnityEngine.Object对象（底层C++对象），上面挂载的代码已经不会继续执行，C#方面的引用变量是否置为空引用已经无关紧要。</p><p>所以Unity重写了UnityEngine.Object的判空，只判断UnityEngine.Object是否被销毁（注意这个销毁让UnityEngine.Object不能继续执行它上面的代码），而不是C#引用是否被置为null。</p><p>题外话：像是？和？？都是跟System.Object靠边的，慎用在UnityEngine.Object上。</p><p>对于UnityEngine.Object被销毁后，C#层面的引用几时会置为空引用和实例几时被GC掉，这个有待考据。</p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小技巧_u3d_C#</title>
      <link href="//post/%E5%B0%8F%E6%8A%80%E5%B7%A7_u3d_C#.html"/>
      <url>//post/%E5%B0%8F%E6%8A%80%E5%B7%A7_u3d_C#.html</url>
      
        <content type="html"><![CDATA[<p>1，使用Physics.OverlapSphereNonAlloc，不会像Physics.OverlapSphere那样创建出Collider[]数组出来，它生成的是一个int值类型，这意味着就不会分配内存空间，不会产生GC，很多检测都有NonAlloc，有些情况可以考虑使用这些OverLapXXXNonAlloc。</p><p>2，对于两个脚本间互相调用，会遇到start与start间初始化时间存在乱序而空引用的错误，此时可以用访问器解决，</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">xxx <span class="token class-name">xx</span> <span class="token keyword">get</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>_xx<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>_xx <span class="token operator">=</span> <span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>xxx<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> _xx<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3，yield return new 产生的GC问题。可以生成一个静态对象解决。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">YieldHelper</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">WaitForEndOfFrame</span> WaitForEndOfFrame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WaitForEndOfFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IEnumerator</span> <span class="token function">WaitForSeconds</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">float</span></span> totalTime<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">bool</span></span> ignoreTimeScale <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name"><span class="token keyword">float</span></span> time <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>time <span class="token operator">&lt;</span> totalTime<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>time <span class="token operator">+=</span> <span class="token punctuation">(</span>ignoreTimeScale<span class="token punctuation">?</span>Time<span class="token punctuation">.</span>unscaledDeltaTime<span class="token punctuation">:</span>Time<span class="token punctuation">.</span>deltaTime<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4，enum : byte 的作用<br>这个表示枚举元素使用 byte 存储。<br>普通声明的话，是继承int。例 public enum Icon_Type : int<br>继承自byte可以稍微减少一点内存占用。</p><p>5，对比int比对比string效率更高，所以有些地方可以考虑用将字符串转化为哈希值再对比。当然可能有哈希冲突的风险。</p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UI的DrawCall计算</title>
      <link href="//post/UI%E7%9A%84DrawCall%E8%AE%A1%E7%AE%97.html"/>
      <url>//post/UI%E7%9A%84DrawCall%E8%AE%A1%E7%AE%97.html</url>
      
        <content type="html"><![CDATA[<p>总结提取自uwa4d的文章：<a href="https://edu.uwa4d.com/course-intro/0/126">https://edu.uwa4d.com/course-intro/0/126</a></p><p>影响DrawCall的元素有三点：Depth值，Material，Texture。</p><p>Depth值：</p><ol><li><p>需要按照Hierarchy面板的节点顺序，从上到下进行Depth分析。（使用深度优先原则）</p></li><li><p>跳过不渲染的节点，比如active&#x3D;false，Canvas不渲染的Layer等（使其depth为-1）。</p></li><li><p>如果处于渲染状态，但是Hierarchy面板的他<strong>下面</strong>没有其他元素跟他相交，其Depth值为0。</p></li></ol><p><strong>不是RectTransform的Rect相交，而是渲染元素有没有重叠。</strong></p><p><img src="/img/article/UI_DRAWCALL_CAL/0.png" alt="img"></p><ol start="4"><li>如果有相交，找到其中最大depth值(把值记作MaxLowerDepth)的元素，判断是否能与相交的合批</li></ol><p>（即<strong>Batch</strong>，条件为Material和Textrue相同），如果能，则当前depth值&#x3D;MaxLowerDepth。</p><p>若不能Batch，则相交的depth值&#x3D;MaxLowerDepth+1。（计算可从最底层往上算）</p><p><img src="/img/article/UI_DRAWCALL_CAL/1.png" alt="img"></p><p><img src="/img/article/UI_DRAWCALL_CAL/2.png" alt="img"></p><p>计算完Depth值后，获得材质球Material的InstanceID先进行升序排序，得出以下顺序的List</p><p><img src="/img/article/UI_DRAWCALL_CAL/3.png" alt="img"></p><p>之后获取TextTure ID的InstanceId，并再进行一次升序排序，最终得到下面顺序的List。</p><p>使用SpriteAltas的图集或者使用Tp打包的图集，TextTure ID就是图集的ID。</p><p>使用单个图片没有图集，TextTrueID就是其本身的ID，说明打包图集可以让元素拥有同一纹理。</p><p><img src="/img/article/UI_DRAWCALL_CAL/4.png" alt="img"></p><p>决定1次DrawCall就是List中相邻相同的Depth，MaterialID和TextureID，上图的DrawCall是638&#x2F;10138&#x2F;10414&#x2F;638，4个DrawCall。</p><p>如果出现这种情况，就优先从Hieraphy上往上搜寻。</p><p><img src="/img/article/UI_DRAWCALL_CAL/5.png" alt="img"></p><p>另一情况：<strong>PosZ不为0</strong></p><p>当父节点Pos Z 不为0，子节点Pos Z为0时，子节点满足以下条件可合批：</p><ol><li>满足图集一致，材质一致等基本条件。</li><li>在Hierarchy相邻。</li><li>跟Depth值以及其他节点是否相交没关系。</li></ol><p>当父节点Pos Z为 0，子节点Pos Z不为0时：</p><ol><li><p>父节点下所有子节点都满足合批条件，无论子节点PosZ都可以合批。</p></li><li><p>父节点下所有子节点都满足基本合批条件（部分图集和材质一致），则合批受Hierarchy的节点顺序影响。</p></li></ol><p><img src="/img/article/UI_DRAWCALL_CAL/6.png" alt="img"></p><p>根据以上规则，就可以得出一些“摆UI”的技巧：</p><ul><li>有相同材质和纹理的UI元素是可以Batch的，可以Batch的UI上下叠在一块不会影响性能，但是如果不能Batch的UI元素叠在一块，就会增加Drawcall开销。</li><li>要注意UI元素间的层叠关系，建议用“T”工具查看其矩形大小，因为有些图片透明，但是却叠在其它UI上面了，然后又无法Batch的话，就会无故多许多Drawcall；</li><li>UI中出现最多的就是img与Text组件，当Text叠在img上面（如Button)，然后Text上又叠了一个图片时，就会至少多2个Drawcall，可以考虑将字体直接印在下面的图片上；</li><li>有些情况可以考虑人为增加层级从而减少Drawcall，比如一个Text的层级为0，另一个可Batch的Text叠在一个图片A上，层级为1，那此时2个Text因为层级不同会安排2个Drawcall，但如果在第一个Text下放一个透明的图片（与图片A可Batch），那两个Text的层级就一致了，Drawcall就可以减少一个。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UI </tag>
            
            <tag> 优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>制作一个跑酷系统</title>
      <link href="//post/%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AA%E8%B7%91%E9%85%B7%E7%B3%BB%E7%BB%9F.html"/>
      <url>//post/%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AA%E8%B7%91%E9%85%B7%E7%B3%BB%E7%BB%9F.html</url>
      
        <content type="html"><![CDATA[<h1 id="1，人物控制和相机控制"><a href="#1，人物控制和相机控制" class="headerlink" title="1，人物控制和相机控制"></a>1，人物控制和相机控制</h1><h2 id="1：控制相机与角色的偏移"><a href="#1：控制相机与角色的偏移" class="headerlink" title="1：控制相机与角色的偏移"></a>1：控制相机与角色的偏移</h2><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">transform<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector3</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>x<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token operator">+</span> followTarget<span class="token punctuation">.</span>position<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2：让相机以角色为中心点，以一个圆为周期转动。"><a href="#2：让相机以角色为中心点，以一个圆为周期转动。" class="headerlink" title="2：让相机以角色为中心点，以一个圆为周期转动。"></a>2：让相机以角色为中心点，以一个圆为周期转动。</h2><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">transform<span class="token punctuation">.</span>position <span class="token operator">=</span> Quaternion<span class="token punctuation">.</span><span class="token function">Euler</span><span class="token punctuation">(</span>x轴转向<span class="token punctuation">,</span> y轴转向<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector3</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>距离角色距离<span class="token punctuation">)</span> <span class="token operator">+</span> followTarget<span class="token punctuation">.</span>position <span class="token operator">+</span> 中心点的偏移量<span class="token punctuation">;</span>transform<span class="token punctuation">.</span>rotation <span class="token operator">=</span> Quaternion<span class="token punctuation">.</span><span class="token function">Euler</span><span class="token punctuation">(</span>x轴转向<span class="token punctuation">,</span> y轴转向<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3：移动和根据相机位置调整方位"><a href="#3：移动和根据相机位置调整方位" class="headerlink" title="3：移动和根据相机位置调整方位"></a>3：移动和根据相机位置调整方位</h2><p><strong>知识点 : 四元数 * 向量 &#x3D; 旋转后的向量 （注意左右乘）</strong></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//监控按键 0渐变为1或者-1</span><span class="token class-name"><span class="token keyword">float</span></span> h <span class="token operator">=</span> Input<span class="token punctuation">.</span><span class="token function">GetAxis</span><span class="token punctuation">(</span><span class="token string">"Horizontal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name"><span class="token keyword">float</span></span> v <span class="token operator">=</span> Input<span class="token punctuation">.</span><span class="token function">GetAxis</span><span class="token punctuation">(</span><span class="token string">"Vertical"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//监控按键的量，有值说明有按键</span><span class="token class-name"><span class="token keyword">float</span></span> moveAmount <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Clamp01</span><span class="token punctuation">(</span>Mathf<span class="token punctuation">.</span><span class="token function">Abs</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token operator">+</span> Mathf<span class="token punctuation">.</span><span class="token function">Abs</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//构建移动向量，注意椭圆映射</span><span class="token class-name"><span class="token keyword">var</span></span> moveInput <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector3</span><span class="token punctuation">(</span>            h <span class="token operator">*</span> Mathf<span class="token punctuation">.</span><span class="token function">Sqrt</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> Mathf<span class="token punctuation">.</span><span class="token function">Pow</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0f</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             <span class="token number">0</span><span class="token punctuation">,</span>             v <span class="token operator">*</span> Mathf<span class="token punctuation">.</span><span class="token function">Sqrt</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> Mathf<span class="token punctuation">.</span><span class="token function">Pow</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获得相机的旋转量 并乘上移动向量，获得旋转后向量</span><span class="token class-name"><span class="token keyword">var</span></span> moveDir <span class="token operator">=</span> cameraController<span class="token punctuation">.</span>PlanarRotation <span class="token operator">*</span> moveInput<span class="token punctuation">;</span><span class="token comment">//若有按键</span><span class="token keyword">if</span> <span class="token punctuation">(</span>moveAmount <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>         <span class="token punctuation">&#123;</span>   <span class="token comment">//移动</span>            transform<span class="token punctuation">.</span>position <span class="token operator">+=</span> moveDir <span class="token operator">*</span> moveSpeed <span class="token operator">*</span> Time<span class="token punctuation">.</span>deltaTime<span class="token punctuation">;</span>            <span class="token comment">//保存转动方向</span>targetRotation <span class="token operator">=</span> Quaternion<span class="token punctuation">.</span><span class="token function">LookRotation</span><span class="token punctuation">(</span>moveDir<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">&#125;</span><span class="token comment">//转动角色朝向</span>transform<span class="token punctuation">.</span>rotation<span class="token operator">=</span> Quaternion<span class="token punctuation">.</span><span class="token function">RotateTowards</span><span class="token punctuation">(</span>transform<span class="token punctuation">.</span>rotation<span class="token punctuation">,</span> targetRotation<span class="token punctuation">,</span> rotationSpeed <span class="token operator">*</span> Time<span class="token punctuation">.</span>deltaTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置混合树 </span><span class="token comment">//dampTime: 用 dampTime 长的时间，将 我们设置的叫做  name 的 float类型 的值由 原本的值 改变到给定的 value 值。</span><span class="token comment">//deltaTime：两次执行该方法的时间间隔。（因为这个方法会每 deltaTime 执行一次，直到 name = value）</span>animator<span class="token punctuation">.</span><span class="token function">SetFloat</span><span class="token punctuation">(</span>Animator<span class="token punctuation">.</span><span class="token function">StringToHash</span><span class="token punctuation">(</span><span class="token string">"NormalAmount"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> moveAmount<span class="token punctuation">,</span><span class="token number">0.2f</span><span class="token punctuation">,</span>Time<span class="token punctuation">.</span>deltaTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4：转用CharacterController来控制角色移动"><a href="#4：转用CharacterController来控制角色移动" class="headerlink" title="4：转用CharacterController来控制角色移动"></a>4：转用CharacterController来控制角色移动</h2><p>CC自带有胶囊碰撞体。一般来说这类东西的组合是Rb+Collider或者单独一个CC。CC适用于第一人称或者第三人称人物角色控制，但是需要自己写一些东西比如重力。</p><p>CharacterController </p><pre><code>1.Character Controller不是基于物理，没有重力，没有阻力，没有加速度，所有移动都是精确的2.Character Controller可以跨过物体，也就是上台阶，不过会一顿一顿，同是下楼梯需要自己写重力3.Character Controller 不会对 Rigidbody产生反应4.Character Controller自带地面监测，不过好像有BUG，一般还是自己写5.Character Controller的移动通过向量控制，自带碰撞监测</code></pre><p>Rigidbody</p><pre><code>1.Rigidbody是基于物理的，所以移动会比较平滑自然，但是因为有各种力，所以很难保证精确度2.Rigidbody会对Rigidbody产生反应3.Rigidbody的移动通过力或者速度控制，不加碰撞体就不会产生碰撞</code></pre><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//transform.position += moveDir * moveSpeed * Time.deltaTime;</span><span class="token comment">//改成</span>characterController<span class="token punctuation">.</span><span class="token function">Move</span><span class="token punctuation">(</span>moveDir <span class="token operator">*</span> moveSpeed <span class="token operator">*</span> Time<span class="token punctuation">.</span>deltaTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5：使用Physics物理检测"><a href="#5：使用Physics物理检测" class="headerlink" title="5：使用Physics物理检测"></a>5：使用Physics物理检测</h2><p>检测是否踩在地板上，并且添加重力影响。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">SerializeField</span></span><span class="token punctuation">]</span> <span class="token class-name"><span class="token keyword">float</span></span> groundCheckRadius<span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">SerializeField</span></span><span class="token punctuation">]</span> <span class="token class-name">Vector3</span> groundCheckOffset<span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">SerializeField</span></span><span class="token punctuation">]</span> <span class="token class-name">LayerMask</span> groundLayer<span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">SerializeField</span></span><span class="token punctuation">]</span> <span class="token class-name"><span class="token keyword">bool</span></span> isGround<span class="token punctuation">;</span><span class="token function">GroundCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//如果踩在地板上</span><span class="token keyword">if</span> <span class="token punctuation">(</span>isGround<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   ySpeed <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">0.5f</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//添加一个向下的量，用以模拟重力掉落。</span>   ySpeed <span class="token operator">+=</span> Physics<span class="token punctuation">.</span>gravity<span class="token punctuation">.</span>y <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name"><span class="token keyword">var</span></span> velocity <span class="token operator">=</span> moveDir <span class="token operator">*</span> moveSpeed<span class="token punctuation">;</span><span class="token comment">//添加向下的量</span>velocity<span class="token punctuation">.</span>y <span class="token operator">=</span> ySpeed<span class="token punctuation">;</span><span class="token comment">//</span>characterController<span class="token punctuation">.</span><span class="token function">Move</span><span class="token punctuation">(</span>velocity <span class="token operator">*</span> Time<span class="token punctuation">.</span>deltaTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">GroundCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//射线检测，创建一个球体用来检测</span>    isGround <span class="token operator">=</span> Physics<span class="token punctuation">.</span><span class="token function">CheckSphere</span><span class="token punctuation">(</span>transform<span class="token punctuation">.</span><span class="token function">TransformPoint</span><span class="token punctuation">(</span>groundCheckOffset<span class="token punctuation">)</span> <span class="token punctuation">,</span>    groundCheckRadius<span class="token punctuation">,</span>     groundLayer<span class="token punctuation">.</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-跑酷系统"><a href="#2-跑酷系统" class="headerlink" title="2.跑酷系统"></a>2.跑酷系统</h1><h2 id="1-墙面扫描"><a href="#1-墙面扫描" class="headerlink" title="1.墙面扫描"></a>1.墙面扫描</h2><p>设定一个墙面扫描的脚本，用处是扫描人物面前的障碍物。</p><p>对于不同高度的障碍物，需要使用射线扫描面前的障碍物高度，然后根据高度选择播放的动画。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">//前向射线的偏移值</span><span class="token punctuation">[</span>SerializeField<span class="token punctuation">]</span> <span class="token class-name">Vector3</span> forwardRayOffset<span class="token punctuation">;</span><span class="token comment">//前向射线长度</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">SerializeField</span></span><span class="token punctuation">]</span> <span class="token class-name"><span class="token keyword">float</span></span> forwardRayLength <span class="token operator">=</span> <span class="token number">0.8f</span><span class="token punctuation">;</span><span class="token comment">//扫描高度值的射线最大值</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">SerializeField</span></span><span class="token punctuation">]</span> <span class="token class-name"><span class="token keyword">float</span></span> heightRayLength <span class="token operator">=</span> <span class="token number">5f</span><span class="token punctuation">;</span><span class="token comment">//用于标识障碍物的层</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">SerializeField</span></span><span class="token punctuation">]</span> <span class="token class-name">LayerMask</span> obstacleLayer<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token return-type class-name">ObstacleHitData</span> <span class="token function">ObstacleCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name"><span class="token keyword">var</span></span> hitData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ObstacleHitData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">var</span></span> forwardOrigin <span class="token operator">=</span> transform<span class="token punctuation">.</span>position <span class="token operator">+</span> forwardRayOffset<span class="token punctuation">;</span>            <span class="token comment">//前向射线</span>    hitData<span class="token punctuation">.</span>forwardHitFound <span class="token operator">=</span> Physics<span class="token punctuation">.</span><span class="token function">Raycast</span><span class="token punctuation">(</span>forwardOrigin<span class="token punctuation">,</span>     transform<span class="token punctuation">.</span>forward<span class="token punctuation">,</span>    <span class="token keyword">out</span> hitData<span class="token punctuation">.</span>forwardHit<span class="token punctuation">,</span> forwardRayLength<span class="token punctuation">,</span>obstacleLayer<span class="token punctuation">)</span><span class="token punctuation">;</span>    Debug<span class="token punctuation">.</span><span class="token function">DrawRay</span><span class="token punctuation">(</span>forwardOrigin<span class="token punctuation">,</span> transform<span class="token punctuation">.</span>forward <span class="token operator">*</span> forwardRayLength<span class="token punctuation">,</span><span class="token punctuation">(</span>hitData<span class="token punctuation">.</span>forwardHitFound<span class="token punctuation">)</span> <span class="token punctuation">?</span>Color<span class="token punctuation">.</span>red<span class="token punctuation">:</span>Color<span class="token punctuation">.</span>white<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>hitData<span class="token punctuation">.</span>forwardHitFound<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//碰撞点上面往下射,刚好碰到面前物体的边缘,算出障碍物的总高度,需要减去人物最低点才能得到实际高度。</span>        <span class="token class-name"><span class="token keyword">var</span></span> heightOrigin <span class="token operator">=</span> hitData<span class="token punctuation">.</span>forwardHit<span class="token punctuation">.</span>point <span class="token operator">+</span> Vector3<span class="token punctuation">.</span>up         <span class="token operator">*</span> heightRayLength<span class="token punctuation">;</span>        hitData<span class="token punctuation">.</span>heightHitFound <span class="token operator">=</span> Physics<span class="token punctuation">.</span><span class="token function">Raycast</span><span class="token punctuation">(</span>heightOrigin<span class="token punctuation">,</span>Vector3<span class="token punctuation">.</span>down<span class="token punctuation">,</span>        <span class="token keyword">out</span> hitData<span class="token punctuation">.</span>heightHit<span class="token punctuation">,</span>heightRayLength<span class="token punctuation">,</span>obstacleLayer<span class="token punctuation">)</span><span class="token punctuation">;</span>        Debug<span class="token punctuation">.</span><span class="token function">DrawRay</span><span class="token punctuation">(</span>heightOrigin<span class="token punctuation">,</span>Vector3<span class="token punctuation">.</span>down <span class="token operator">*</span> heightRayLength<span class="token punctuation">,</span><span class="token punctuation">(</span>hitData<span class="token punctuation">.</span>forwardHitFound<span class="token punctuation">)</span> <span class="token punctuation">?</span> Color<span class="token punctuation">.</span>red <span class="token punctuation">:</span> Color<span class="token punctuation">.</span>white<span class="token punctuation">)</span><span class="token punctuation">;</span>        Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>hitData<span class="token punctuation">.</span>heightHit<span class="token punctuation">.</span>point<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> hitData<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">struct</span> <span class="token class-name">ObstacleHitData</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//前向射线是否有碰撞</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">bool</span></span> forwardHitFound<span class="token punctuation">;</span>    <span class="token comment">//高度射线是否有碰撞</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">bool</span></span> heightHitFound<span class="token punctuation">;</span>    <span class="token comment">//前向射线</span>    <span class="token keyword">public</span> <span class="token class-name">RaycastHit</span> forwardHit<span class="token punctuation">;</span>    <span class="token comment">//高度射线</span>    <span class="token keyword">public</span> <span class="token class-name">RaycastHit</span> heightHit<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-播放动画"><a href="#2-播放动画" class="headerlink" title="2.播放动画"></a>2.播放动画</h2><p>首先封装一个行为类<strong>ParkourAction</strong>，继承自ScriptObject，用于存储动画信息和触发动画需要的条件。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">SerializeField</span></span><span class="token punctuation">]</span> <span class="token keyword">private</span>  <span class="token class-name"><span class="token keyword">string</span></span> animName<span class="token punctuation">;</span><span class="token comment">//可播放动画的最低高度</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">SerializeField</span></span><span class="token punctuation">]</span> <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">float</span></span> minHeight<span class="token punctuation">;</span><span class="token comment">//可播放动画的最高高度</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">SerializeField</span></span><span class="token punctuation">]</span> <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">float</span></span> maxHeight<span class="token punctuation">;</span><span class="token comment">//是否要角色转向障碍物</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">SerializeField</span></span><span class="token punctuation">]</span> <span class="token class-name"><span class="token keyword">bool</span></span> rotateToObstacle<span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Header</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"使用Target Matching"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">SerializeField</span></span><span class="token punctuation">]</span> <span class="token class-name"><span class="token keyword">bool</span></span> enabledTargetMatching <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">SerializeField</span></span><span class="token punctuation">]</span> <span class="token class-name">AvatarTarget</span> matchBodyPart<span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">SerializeField</span></span><span class="token punctuation">]</span> <span class="token class-name"><span class="token keyword">float</span></span> matchStartTime<span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">SerializeField</span></span><span class="token punctuation">]</span> <span class="token class-name"><span class="token keyword">float</span></span> matchTargetTime<span class="token punctuation">;</span><span class="token comment">//存储四元数,里面是射线碰撞到的障碍物的法线方向取反,即角色朝向障碍物面的四元数。</span><span class="token keyword">public</span> <span class="token return-type class-name">Quaternion</span> TargetRotation <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token return-type class-name">Vector3</span> MatchPos <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token comment">//检测条件是否符合播放动画的要求</span><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">CheckIfPossible</span><span class="token punctuation">(</span><span class="token class-name">ObstacleHitData</span> hitData<span class="token punctuation">,</span> <span class="token class-name">Transform</span> player<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//减去人物的高度得出障碍物的高度</span>    <span class="token class-name"><span class="token keyword">float</span></span> height <span class="token operator">=</span> hitData<span class="token punctuation">.</span>heightHit<span class="token punctuation">.</span>point<span class="token punctuation">.</span>y <span class="token operator">-</span> player<span class="token punctuation">.</span>position<span class="token punctuation">.</span> y<span class="token punctuation">;</span>    Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"面前的障碍物高度为:</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">height</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>height <span class="token operator">&lt;=</span> minHeight <span class="token operator">||</span> height <span class="token operator">></span> maxHeight<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rotateToObstacle<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>                TargetRotation <span class="token operator">=</span> Quaternion<span class="token punctuation">.</span><span class="token function">LookRotation</span><span class="token punctuation">(</span><span class="token operator">-</span>hitData<span class="token punctuation">.</span>forwardHit<span class="token punctuation">.</span>normal<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>enabledTargetMatching<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        MatchPos <span class="token operator">=</span> hitData<span class="token punctuation">.</span>heightHit<span class="token punctuation">.</span>point<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> AnimName <span class="token operator">=></span> animName<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> RotateToObstacle <span class="token operator">=></span> rotateToObstacle<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> EnabledTargetMatching <span class="token operator">=></span> enabledTargetMatching<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token return-type class-name">AvatarTarget</span> MatchBodyPart<span class="token operator">=></span> matchBodyPart<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">float</span></span> MatchStartTime <span class="token operator">=></span> matchStartTime<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">float</span></span> MatchTargetTime <span class="token operator">=></span> matchTargetTime<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于跨越或者攀爬这种会实际产生模型位移的动画，需要注意Animator的Apply Root Motion和动画Import Setting里Animation的Bake Into Pose，此处需要将Animator组件的Apply Root Motion勾选上。<br>使用协程来执行跨越障碍物的动画，</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name">IEnumerator</span> <span class="token function">DoParkoutAction</span><span class="token punctuation">(</span><span class="token class-name">ParkourAction</span> action<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//是否在播放动画</span>    inAction <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">//角色控制器是否可控</span>    playerController<span class="token punctuation">.</span><span class="token function">SetControl</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    animator<span class="token punctuation">.</span><span class="token function">CrossFade</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>AnimName<span class="token punctuation">,</span> <span class="token number">0.1f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//animator.Play("StepUp");</span>    <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>         <span class="token comment">//此函数在过渡期可用,获得下一个动画状态</span>    <span class="token class-name"><span class="token keyword">var</span></span> animState <span class="token operator">=</span> animator<span class="token punctuation">.</span><span class="token function">GetNextAnimatorStateInfo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>animState<span class="token punctuation">.</span><span class="token function">IsName</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>AnimName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"The parkour animation is wrong"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>             <span class="token class-name"><span class="token keyword">float</span></span> timer <span class="token operator">=</span> <span class="token number">0f</span><span class="token punctuation">;</span>    <span class="token comment">//动画播放中</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>timer <span class="token operator">&lt;=</span> animState<span class="token punctuation">.</span>length<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        timer <span class="token operator">+=</span> Time<span class="token punctuation">.</span>deltaTime<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>RotateToObstacle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//转向障碍物</span>            transform<span class="token punctuation">.</span>rotation <span class="token operator">=</span> Quaternion<span class="token punctuation">.</span><span class="token function">RotateTowards</span><span class="token punctuation">(</span>            transform<span class="token punctuation">.</span>rotation<span class="token punctuation">,</span>            action<span class="token punctuation">.</span>TargetRotation<span class="token punctuation">,</span>            playerController<span class="token punctuation">.</span>RotationSpeed <span class="token operator">*</span> Time<span class="token punctuation">.</span>deltaTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//目标匹配,后面再讲</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>EnabledTargetMatching<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">MatchTarget</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//解除锁定</span>    inAction <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    playerController<span class="token punctuation">.</span><span class="token function">SetControl</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-优化动画"><a href="#3-优化动画" class="headerlink" title="3.优化动画"></a>3.优化动画</h2><p>出现的问题：</p><ol><li><p>动画在播放结束后，脚部会出现障碍物穿模或者高过障碍物的情况。</p></li><li><p>有攀墙动作的动画，手部无法真正抓住边缘。</p></li><li><p>攀爬结束后按前进会导致人物平移一段时间。</p></li><li><p>攀爬过程中整个人穿模。</p></li></ol><h3 id="Target-Matching-目标匹配"><a href="#Target-Matching-目标匹配" class="headerlink" title="Target Matching 目标匹配"></a>Target Matching 目标匹配</h3><p>Unity手册的描述：通常在游戏中可能出现以下情况：角色必须以某种方式移动，使得手或脚在某个时间落在某个地方。例如，角色可能需要跳过踏脚石或跳跃并抓住顶梁。这种情况可以用Target Maching。(似乎只能用在AnimatorController里)</p><p>我们的动画里有跃起，然后踏上障碍体的动作。首先要在AnimationClip里找到动画标准化时间的两个点，1个是角色离地的时间点，1个是踏上障碍体,结束落地的时间点。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MatchTarget</span><span class="token punctuation">(</span><span class="token class-name">ParkourAction</span> action<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//是否要使用了目标匹配</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>animator<span class="token punctuation">.</span>isMatchingTarget<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//参数解释：1.需要匹配的位置(一般为障碍物的高度值y,这里为高度射线的碰撞点位置取y值)</span>    <span class="token comment">//2.角色转向的四元数。 3.系统枚举值:要匹配的肢体,人物四肢的其中1个。 4.~。 5.开始匹配的时间点。 6.结束匹配的时间点</span>    animator<span class="token punctuation">.</span><span class="token function">MatchTarget</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>MatchPos<span class="token punctuation">,</span>transform<span class="token punctuation">.</span>rotation<span class="token punctuation">,</span>        action<span class="token punctuation">.</span>MatchBodyPart<span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MatchTargetWeightMask</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector3</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        action<span class="token punctuation">.</span>MatchStartTime<span class="token punctuation">,</span>        action<span class="token punctuation">.</span>MatchTargetTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第1点，这时候可以调整,调为feet。<br><img src="/img/article/PARKOUR_SYSTEM/0.png" alt="image"></p><p>使用 Feet__ 时，对于所有帧，Root Transform Position Y 将与位置最低的脚 Y 匹配。因此，混合点始终保持在脚周围，从而防止在混合或过渡时发生浮动问题。</p><p>脚超模的现象可以按第2点调。</p><p>第2点，需要调整MatchTarget第4个参数，Unity手册里写的是：包含匹配位置和旋转的权重的结构，使用此结构可为 Animator.MatchTarget 指定位置和旋转权重遮罩。</p><p>有一个Vector3类型的参数positionXYZWeight:位置 XYZ 权重,值在0~1之间。</p><p>一个float类型的参数rotationWeight:旋转权重</p><p>这里把positionXYZWeight的z值设为最高值1,这样匹配的权重会偏向障碍物平面的最边缘，可以把这个权重值封装在ScriptObject行为类里。<br>同理把y值设为1,说明在匹配y值方面,会把权重偏向最接近障碍物平面上,这样就不容易出现脚穿模在地下的情况。</p><p>第3点，这里有一点上述的代码里没讲，因为攀爬动作没有从蹲下到站立的动画，所以攀爬结束后混合了一段蹲到站立的动画。而这里是由于使用了Time.deltaTime只等待了一段AnimationClip的播放，没有等待蹲下到站立的部分。这段的解决比较宽泛，可以用yield return 再等待一段时间。</p><p>第4点，这个是因为Match Target的匹配时间点没设好，只能慢慢调了。</p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 制作实例 </tag>
            
            <tag> 动画系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Time函数和Update和FixedUpdate</title>
      <link href="//post/Time%E5%87%BD%E6%95%B0%E5%92%8CUpdate%E5%92%8CFixedUpdate.html"/>
      <url>//post/Time%E5%87%BD%E6%95%B0%E5%92%8CUpdate%E5%92%8CFixedUpdate.html</url>
      
        <content type="html"><![CDATA[<p>Time.timeScale 不会影响Update和LateUpdate的执行速度。</p><p>FixedUpdate是根据Time.time来执行的，所以Time.timeScale会影响到FixedUpdate的执行。</p><p>FixedTimeStep中的设置是指<strong>Time.time的时间变化，如果设置为0.02s，则意味着</strong>Time.timeScale&#x3D;1的情况下，<br><strong>Time.time的值每过0.02秒就调用一次FixedUpdate。</strong></p><p>Time.deltaTime：表示当前时刻到上一帧所经过的秒数，具体值和当前游戏的帧数有关。<br>Time.deltaTime的值在update上 &#x3D; 1&#x2F;帧率 * Time.timeScale。同时也是Time.time的增量值。 </p><p>所以在Update中进行物体移动的话，需要Time.deltaTime * speed * Vector3方向向量,相当于每秒往Vector3方向移动speed距离。</p><hr><p>FixedUpdate，固定的一个时间频率去调整； </p><p>Update，根据系统性能的FPS速率有影响关系；</p><p>关于上两条的一些证明</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">FixedUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"这在是第"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"帧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        time <span class="token operator">+=</span> Time<span class="token punctuation">.</span>deltaTime<span class="token punctuation">;</span>        Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"时间："</span> <span class="token operator">+</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的time值始终是以0.02的量去增长。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">FixedUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"FixedUpdate realTime: "</span> <span class="token operator">+</span> Time<span class="token punctuation">.</span>realtimeSinceStartup<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Debug<span class="token punctuation">.</span><span class="token function">LogError</span><span class="token punctuation">(</span><span class="token string">"Update realTime: "</span> <span class="token operator">+</span> Time<span class="token punctuation">.</span>realtimeSinceStartup<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>经此测试可发现，在帧率较低的情况下，FixedUpdate并不是间隔0.02秒才调用一次，有可能在Update前调用多次，间隔的时间也不一定，当我们设置FixedUpdate的步长为0.02秒（50FPS）时，设置刷新的频率为30FPS，FixedUpdate每秒的调用次数势必要多于Update。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">SerializeField</span></span><span class="token punctuation">]</span> <span class="token class-name"><span class="token keyword">float</span></span> time <span class="token operator">=</span> <span class="token number">0f</span><span class="token punctuation">;</span> <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">SerializeField</span></span><span class="token punctuation">]</span> <span class="token class-name"><span class="token keyword">float</span></span> Fixedtime <span class="token operator">=</span> <span class="token number">0f</span><span class="token punctuation">;</span><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">FixedUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">>=</span> <span class="token number">1.0f</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"FixedUpdate realTime: "</span> <span class="token operator">+</span> Time<span class="token punctuation">.</span>realtimeSinceStartup<span class="token punctuation">)</span><span class="token punctuation">;</span>        Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"FixedUpdate deltaTime: "</span> <span class="token operator">+</span> Time<span class="token punctuation">.</span>deltaTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        Fixedtime <span class="token operator">+=</span> Time<span class="token punctuation">.</span>deltaTime<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">>=</span> <span class="token number">1.0f</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        time <span class="token operator">+=</span> Time<span class="token punctuation">.</span>deltaTime<span class="token punctuation">;</span>                Debug<span class="token punctuation">.</span><span class="token function">LogError</span><span class="token punctuation">(</span><span class="token string">"Update realTime: "</span> <span class="token operator">+</span> Time<span class="token punctuation">.</span>realtimeSinceStartup<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>验证两者对于真实时间的联系，设置游戏帧率为10帧，在经过1秒后，二者的增量几乎一致。</p><p><img src="/img/article/API_TIME_FIX_UPDATE/1.png" alt="image"></p><p>已知，Update的调用次数为1秒钟调用帧数次，FixedUpdate设置的步长为0.02。则1&#x2F;0.02 &#x3D; 50FPS。</p><p><img src="/img/article/API_TIME_FIX_UPDATE/2.png" alt="image"></p><p>所以说FixedUpdate固定时间频率是指，会在1秒内调用 （<strong>1&#x2F;设置的步长）</strong> 次FixedUpdate，而不一定是经过真实时间里 <strong>设置的Fixed Step</strong>  秒就调用1次，两次FixedUpdate调用的间隔其实是Time.time经过 <strong>设置的步长</strong>。</p><p>而Update则是根据游戏内的帧率时刻浮动来决定执行次数。</p><p>所以，FixedUpdate除了用来处理物理逻辑之外并不适合处理其他模块的逻辑。</p><p>因为它是用来处理物理模拟的，更重要的是它并非根据真实时间的间隔执行，而只是有一个固定的量。</p><h2 id="关于为何要推荐在FixedUpdate处理物理逻辑："><a href="#关于为何要推荐在FixedUpdate处理物理逻辑：" class="headerlink" title="关于为何要推荐在FixedUpdate处理物理逻辑："></a>关于为何要推荐在FixedUpdate处理物理逻辑：</h2><p>在物理模拟中，保证一个固定的增量时间是十分重要的。这是因为在游戏引擎进行物理模拟时要使用数值积分，而作为最简单的数值积分方法——欧拉法在游戏引擎中大量使用。而在游戏引擎的物理模拟中，一个不稳定的增量时间可能导致很多和预期相悖的结果。</p><p>固定的增量时间作为一个常量参数传递给物理模拟模块，这样我们就能够保证物理模拟的增量时间固定，同时还能将物理模拟的更新频率和游戏引擎的更新频率进行解耦——物理的模拟不受引擎的更新频率影响，无论游戏的更新频率是多少，传递给物理模拟的增量时间都是一个常量。</p><p>OnTrigger，OnCollision系列和FixedUpdate都依赖物理步，也就是<strong>Fixed Step</strong>来触发。</p><p>而如果将输入检测或者需要每帧检测的逻辑放入物理步中判断就会出错。</p><hr><p>Time.timeScale 会影响Time.Time，比如Time.timeScale ＝ 2的话，那么Time.time的增长速度也会变成2倍速度。</p><p>如果你想取到游戏的实际时间，那么使用Time.timeSinceLevelLoad就可以，前提是必须在**Awake()<strong>方法以后再取，如果在</strong>Awake()**方法里面取Time.realtimeSinceStartup会取出一个错误的值，在Start方法里面取的话就正常了。</p><p><strong>总之一句话Time.timeScale影响的是Unity的游戏时间缩放比例。</strong></p><p><strong>Unity里面所有跟时间有关系的东西都是根据timeScale来演算的。</strong></p><p>仔细想想现在的手游就是个 动画 和 粒子技能特效 还有UI位移特效，所以改他们的速度直接用Time.timeScale就可以完成。还有一个重要的东西就是人物移动 或者 技能移动的速度了，</p><p> 根据时间的公式，时间 ＝ 路程\速度 ，比如角色从起点跑到中间的一个预期时间， 或者一个技能的火球从攻击到打中目标的预期时间。 凡是处理时间的东东全用Time.time 这样就可以完美让Time.timeScale控制你的游戏了。</p><hr><p>有关于LateUpdate的操作，事关摄像机跟随游戏对象时会发生抖动的阐述。</p><p>画面抖动的原因是因为摄像机位置更新与目标(抖动对象)位置更新不同步造成的.</p><h1 id="结论："><a href="#结论：" class="headerlink" title="结论："></a>结论：</h1><p>1）Time.time的每帧的增量即为Time.deltaTime</p><p>2）<strong>Time.deltaTime和Time.time</strong>都受Time.timeScale影响，且是正比的关系</p><p>3）Time.deltaTime的最大调用时间间隔为Time面板的 <strong>Maximum Allowed Timestep</strong> 值</p><p>4）Time.realtimeSinceStartup不受Time.timeScale影响，它为真实的游戏时间</p><p>5）Update的调用不受Time.timeScale影响，它的调用间隔和真实的上一帧调用时间有关</p><p>6）LateUpdate的调用同Update，不受Time.timeScale影响（截图时忘了开打印，实际同Update）</p><p>7）FixedUpdate的调用受Time.timeScale影响，且成正比，当Time.timeScale &#x3D; 0时，FixedUpdate不被调用</p><p>8）FixedUpdate的调用时间间隔为Time面板的 Fixed Timestep 值，受Time.time影响。</p><ol start="9"><li>FixedUpdate在每帧的调用不固定，有可能执行多次，有可能不执行。</li></ol><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>1）想让游戏对象受Time.timeScale（子弹时间）影响时，则将游戏对象和 <strong>Time.time &#x2F; Time.deltaTime</strong> 做关联计算并放在Update中更新，或者将它放在<strong>FixedUpdate中做更新（使用Time.fixeddeltaTime，或按帧计算</strong>）</p><p>2）想让游戏对象不受Time.timeScale（子弹时间）影响时，则将游戏对象和 <strong>Time.realtimeSinceStartup</strong> 做关联计算并放在Update中更新</p><p>3）Unity中默认<strong>Animation、Animator和粒子特效</strong>都是受Time.timeScale（子弹时间）影响的</p><p>4）想让Animator不受Time.timeScale（子弹时间）影响时，可以将它的更新模式改为：<strong>animator.updateMode &#x3D; AnimatorUpdateMode.UnscaledTime;</strong></p><p>5）想让Animation或粒子特效不受Time.timeScale（子弹时间）影响时，要用Time.realtimeSinceStartup做采样计算，并对它们做更新</p><hr><h3 id="额外"><a href="#额外" class="headerlink" title="额外"></a>额外</h3><p>部分内容的链接<br><a href="https://blog.csdn.net/cube454517408/article/details/107496353">https://blog.csdn.net/cube454517408/article/details/107496353</a></p><p>关于Time相关的例子：</p><p>1，子弹时间（缓慢的粒子特效 或者 只有自己不受影响</p><p>2，定时回调系统</p><p>3，暂停游戏</p><p>设置 Time.timeScale ＝ 0；即可让游戏暂停。 其实我们暂停的主要是 人物动画，还有技能特效，比如一个火球打了一半。</p><p>UI方面往往我们不希望暂停，比如暂停界面 有一些UI位移动画或者帧动画， 或者最起码要有个“取消暂停的按钮” 吧。 总不能游戏暂停了我点击按钮，按钮的点击动画或者特效也暂停了吧。</p><p>所有的动画都是基于时间来的，因为Time.timeScale ＝ 0了，所以Time.time也就不会在变化了。换句话来说如果游戏暂停以后想在暂停界面上继续播放一些不受Time.timeScale 影响的动画，那么我们就需要用到Time.realtimeSinceStartup。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name">AnimationState</span> animState <span class="token operator">=</span> animation<span class="token punctuation">[</span>clipName<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 当前动画状态</span>animation<span class="token punctuation">.</span><span class="token function">Play</span><span class="token punctuation">(</span>clipName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//播放动画</span>curTime <span class="token operator">=</span> Time<span class="token punctuation">.</span>realtimeSinceStartup<span class="token punctuation">;</span> <span class="token comment">// 当前真实时间</span>deltaTime <span class="token operator">=</span> curTime <span class="token operator">-</span> lastFrameTime<span class="token punctuation">;</span> <span class="token comment">// 此帧与上一帧的时间间隔</span>lastFrameTime <span class="token operator">=</span> curTime<span class="token punctuation">;</span> <span class="token comment">// 记录此帧时间，下一帧用</span>progressTime <span class="token operator">+=</span> deltaTime<span class="token punctuation">;</span> <span class="token comment">// 动画已播放时间</span>animState<span class="token punctuation">.</span>normalizedTime <span class="token operator">=</span> progressTime <span class="token operator">/</span> currState<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// 动画规范化时间[0-1]</span>animation<span class="token punctuation">.</span><span class="token function">Sample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在当前状态对动画进行采样，当你想显式设置动画状态并且对它取样的时候使用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="附录："><a href="#附录：" class="headerlink" title="附录："></a>附录：</h2><p> <strong>只读</strong>:</p><p>Time.time：表示从游戏开发到现在的时间，会随着游戏的暂停而停止计算。<br>Time.deltaTime：表示从上一帧到当前帧的时间，以秒为单位。<br>Time.unscaleddeltaTime：不考虑timescale时候与deltaTime相同，若timescale被设置，则无效。<br>Time.timeSinceLevelLoad：表示从当前Scene开始到目前为止的时间，也会随着暂停操作而停止。<br>Time.unscaledTime：不考虑timescale时候与time相同，若timescale被设置，则无效。<br>Time.fixeddeltaTime：表示以秒计间隔，在物理和其他固定帧率进行更新，在Edit-&gt;ProjectSettings-&gt;Time的Fixed Timestep可以自行设置。<br>Time.realtimeSinceStartup： 表示自游戏开始后的总时间，即使暂停也会不断的增加。<br>Time.frameCount：总帧数</p><p> <strong>可读可写</strong>:</p><p>Time.fixedTime：表示以秒计游戏开始的时间，固定时间以定期间隔更新（相当于fixeddeltaTime）直到达到time属性。<br>Time.SmoothdeltaTime：表示一个平稳的deltaTime，根据前 N帧的时间加权平均的值。<br>Time.timeScale：时间缩放，默认值为1，若设置&lt;1，表示时间减慢，若设置&gt;1,表示时间加快，可以用来加速和减速游戏，非常有用。<br>Time.captureFramerate：表示设置每秒的帧率，然后不考虑真实时间。 </p><hr><p>帧数显示器和设置游戏整体帧率的代码：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">UnityEngine</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FPS</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">float</span></span> m_LastUpdateShowTime <span class="token operator">=</span> <span class="token number">0f</span><span class="token punctuation">;</span>  <span class="token comment">//上一次更新帧率的时间;  </span>    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">float</span></span> m_UpdateShowdeltaTime <span class="token operator">=</span> <span class="token number">0.01f</span><span class="token punctuation">;</span><span class="token comment">//更新帧率的时间间隔;  </span>    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> m_FrameUpdate <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//帧数;  </span>    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">float</span></span> m_FPS <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span><span class="token comment">//设置帧率</span>        Application<span class="token punctuation">.</span>targetFrameRate <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Use this for initialization  </span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        m_LastUpdateShowTime <span class="token operator">=</span> Time<span class="token punctuation">.</span>realtimeSinceStartup<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Update is called once per frame  </span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        m_FrameUpdate<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Time<span class="token punctuation">.</span>realtimeSinceStartup <span class="token operator">-</span> m_LastUpdateShowTime <span class="token operator">>=</span> m_UpdateShowdeltaTime<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            m_FPS <span class="token operator">=</span> m_FrameUpdate <span class="token operator">/</span> <span class="token punctuation">(</span>Time<span class="token punctuation">.</span>realtimeSinceStartup <span class="token operator">-</span> m_LastUpdateShowTime<span class="token punctuation">)</span><span class="token punctuation">;</span>            m_FrameUpdate <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            m_LastUpdateShowTime <span class="token operator">=</span> Time<span class="token punctuation">.</span>realtimeSinceStartup<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnGUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">GUIStyle</span> labelFont <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GUIStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        labelFont<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        GUI<span class="token punctuation">.</span><span class="token function">Label</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Rect</span><span class="token punctuation">(</span>Screen<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"FPS: "</span> <span class="token operator">+</span> m_FPS<span class="token punctuation">,</span> labelFont<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于deltaTime比较粗浅的解释：<a href="https://www.cnblogs.com/jiangxiaoming/p/12983807.html">https://www.cnblogs.com/jiangxiaoming/p/12983807.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 探索发现 </tag>
            
            <tag> C# </tag>
            
            <tag> Api </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
